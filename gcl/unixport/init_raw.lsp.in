(make-package :s :use '(:cl))
(make-package :compiler :use '(:cl :si :s))
(make-package :sloop :use '(:cl))
(make-package :ansi-loop :use'(:cl))
(make-package :defpackage :use '(:cl))
(make-package :tk :use '(:cl :sloop))
(make-package :fpe :use '(:cl))
(make-package :cltl1-compat)

(in-package :s)
(si::import-internal 'si::(\| & ^ ~ c+ c* << >> object double
			   c-object-== c-fixnum-== c-float-== c-double-== c-fcomplex-== c-dcomplex-== fcomplex dcomplex
			   string-concatenate lit seqind fixnum-length char-length cref address short int
			   package-internal package-external array-dims cmp-norm-tp tp0 tp1 tp2 tp3 tp4 tp5 tp6 tp7 tp8))
;(si::import-internal 'compiler::(lisp-type cmp-norm-tp fsf))
;(export 's::(object double strcat) :s)
(export '(lisp-type defdlfun strcat))

(dolist (l '((:float      "make_shortfloat"      short-float     cnum)
	     (:double     "make_longfloat"       long-float      cnum)
	     (:character  "code_char"            character       cnum)
	     (:char       "make_fixnum"          char            cnum)
	     (:short      "make_fixnum"          short           cnum)
	     (:int        "make_fixnum"          int             cnum)
	     (:uchar      "make_fixnum"          unsigned-char   cnum)
	     (:ushort     "make_fixnum"          unsigned-short  cnum)
	     (:uint       "make_fixnum"          unsigned-int    cnum)
	     (:fixnum     "make_fixnum"          fixnum          cnum)
	     (:long       "make_fixnum"          fixnum          cnum)
	     (:fcomplex   "make_fcomplex"        fcomplex        cnum)
	     (:dcomplex   "make_dcomplex"        dcomplex        cnum)
	     (:string     "make_simple_string"   string)
	     (:object     ""                     t)

	     (:stdesig    ""                     (or symbol string character))
	     (:longfloat  ""                     long-float)
	     (:shortfloat ""                     short-float)
	     (:hashtable  ""                     hash-table)
	     (:ocomplex   ""                     complex)
	     (:bitvector  ""                     bit-vector)
	     (:random     ""                     random-state)
	     (:ustring    ""                     string)
	     (:fixarray   ""                     (array fixnum))
	     (:sfarray    ""                     (array short-float))
	     (:lfarray    ""                     (array long-float))

	     (:real       ""                     real)

	     (:float*     nil                    nil             (array short-float) "->sfa.sfa_self")
	     (:double*    nil                    nil             (array long-float)  "->lfa.lfa_self")
	     (:long*      nil                    nil             (array fixnum)      "->fixa.fixa_self")
	     (:void*      nil                    nil             (or array symbol character) "->v.v_self")))
  (setf (get (car l) 'lisp-type) (if (cadr l) (caddr l) (cadddr l))))


(in-package :system)
(use-package '(:fpe :s :gmp))

(export 'si::(object double system cmp-inline cmp-eval type-propagator c1no-side-effects strcat defcfun clines defentry) :si)



(init-system) 
(in-package :si)
(gbc t)

(do-symbols (s)
  (when (get s 'proclaimed-function)
    (unless (sig s)
      (let* ((fun (symbol-function s)))
	(c-set-function-plist
	 fun
	 (apply 'make-function-plist
		(list (get s 'proclaimed-arg-types) (get s 'proclaimed-return-type))
		(or (cdr (c-function-plist fun)) (list nil nil nil nil s))))))
    (dolist (l '(proclaimed-function proclaimed-arg-types proclaimed-return-type))
      (remprop s l))))

(unless *link-array*
  (setq *link-array* (make-array (ash 1 11) :element-type 'character :fill-pointer 0)))
(use-fast-links t)

(let* ((x (append (pathname-directory *system-directory*) (list :back)))
       (lsp (append x (list "lsp")))
       (cmpnew (append x (list "cmpnew")))
       (h (append x (list "h")))
       (xgcl-2 (append x (list "xgcl-2")))
       (pcl (append x (list "pcl")))
       (clcs (append x (list "clcs")))
       (gtk (append x (list "gcl-tk"))))
  (dolist (d (list lsp cmpnew #+(and xgcl (not pre-gcl)) xgcl-2 #+(or pcl ansi-cl) pcl #+ansi-cl clcs))
    (load (make-pathname :name "sys-proclaim" :type "lisp" :directory d)))
  (load (make-pathname :name "tk-package" :type "lsp" :directory gtk))
  (load (make-pathname :name "gcl_lfun_list" :type "lsp" :directory cmpnew))
  (load (make-pathname :name "gcl_cmpopt" :type "lsp" :directory cmpnew))
  (load (make-pathname :name "gcl_auto_new" :type "lsp" :directory lsp))
  
  (gbc t))

(terpri)
(setq *inhibit-macro-special* t)
(gbc t)
(reset-gbc-count)

(defun top-level nil (gcl-top-level))

(set-up-top-level)

(setq *gcl-extra-version* @LI-EXTVERS@
      *gcl-minor-version* @LI-MINVERS@ 
      *gcl-major-version* @LI-MAJVERS@)

(defvar *system-banner* (default-system-banner))
(setq *optimize-maximum-pages* t)

(fmakunbound 'init-cmp-anon)
(when (fboundp 'user-init) (user-init))

(in-package :compiler)
(setq *cc* @LI-CC@
      *ld* @LI-LD@
      *ld-libs* @LI-LD-LIBS@
      *opt-three* @LI-OPT-THREE@
      *opt-two* @LI-OPT-TWO@
      *init-lsp* @LI-INIT-LSP@)

(import 'si::(clines defentry defcfun object void int double quit bye gbc system
		     commonp *break-on-warnings* make-char char-bits char-font
		     char-bit set-char-bit string-char-p int-char
		     char-font-limit char-bits-limit char-control-bit
		     char-meta-bit char-super-bit char-hyper-bit compiler-let) :cltl1-compat)
(deftype cltl1-compat::string-char nil 'character)
(do-symbols (s :cltl1-compat) (export s :cltl1-compat))

;#-ansi-cl(use-package :cltl1-compat :lisp)
;#-ansi-cl(do-symbols (s :cltl1-compat) (export s :lisp))

#+ansi-cl (use-package :pcl :user)

(import 'si::(clines defentry defcfun object void int double quit bye gbc system
		     *lib-directory* *system-directory*) :user)

(let* ((i 4096)(j (si::equal-tail-recursion-check i)))
  (unless (<= (ash i -1) j)
    (warn "equal is not tail recursive ~s ~s" i j)))
