(make-package "C")
(make-package "COMPILER" :use '("LISP"))
(make-package "SLOOP" :use '("LISP"))
(make-package "SERROR" :use '("LISP" "SLOOP"))
(make-package "ANSI-LOOP" :use '("LISP"))
(make-package "DEFPACKAGE" :use '("LISP"))
(make-package "TK" :use '("LISP" "SLOOP"))
(make-package "JAPI-PRIMITIVES" :use '("LISP"))
(make-package "TK-PRIMITIVES" :use '("LISP"))
#+win32(make-package :WIN32-PRIMITIVES :use '("LISP"))

(in-package "SYSTEM")
(defvar *command-args* nil)

(progn 
 (system:init-system) 
 (gbc t)

 (in-package "USER")

 (load (concatenate 'string si::*system-directory* "../gcl-tk/tk-package.lsp"))

 (or lisp::*link-array*
     (setq lisp::*link-array*
	   (make-array (ash 1 11)  :element-type 'character :fill-pointer 0)))
 (si::use-fast-links t)
 
 (setq compiler::*cmpinclude* "\"cmpinclude.h\"") 
 
; (load (concatenate 'string si::*system-directory* "../cmpnew/gcl_cmpmain.lsp")) 
 (gbc t)
 (load (concatenate 'string si::*system-directory* "../cmpnew/gcl_lfun_list.lsp"))
 (gbc t) 
 (load (concatenate 'string si::*system-directory* "../cmpnew/gcl_cmpopt.lsp"))
 (gbc t)
 (load (concatenate 'string si::*system-directory* "../lsp/gcl_auto_new.lsp")) 
 (gbc t)
 
 (when compiler::*cmpinclude-string*
   (with-open-file (st (concatenate 'string si::*system-directory* "../h/cmpinclude.h"))
		   (let
		       ((tem (make-array (file-length st) :element-type 'standard-char
					 :static t)))
		     (if (si::fread tem 0 (length tem) st)
			 (setq compiler::*cmpinclude-string* tem)))))
 
 (defvar si::*lib-directory* (namestring "../"))
 
 (defun lisp-implementation-version nil (format nil "GCL-~a-~a" si::*gcl-major-version* si::*gcl-version*))
 
 (terpri)
 (setq si:*inhibit-macro-special* t)
 (gbc t) (system:reset-gbc-count)
 
 (setq compiler::*default-c-file* nil)
 (setq compiler::*default-h-file* nil)
 (setq compiler::*default-data-file* nil)
 (setq compiler::*default-system-p* nil)
 (setq compiler::*keep-gaz* nil)
 
 (unintern 'system)
 (unintern 'lisp)
 (unintern 'compiler)
 (unintern 'user)
 (when (fboundp 'si::init-cmp-anon) (fmakunbound 'si::init-cmp-anon))
 
 (eval-when (load)
	    (if (fboundp 'get-system-time-zone)
		(setf system:*default-time-zone* (get-system-time-zone))
	      (setf system:*default-time-zone* 6)))
 
 (si::set-up-top-level)
 (if (fboundp 'si::user-init) (si::user-init))
 
 (setq si::*gcl-version* @LI-MINVERS@ si::*gcl-major-version* @LI-MAJVERS@)
 (setq compiler::*cc* @LI-CC@)
 (setq compiler::*ld* @LI-LD@)
 (setq compiler::*ld-libs* @LI-LD-LIBS@)
 (setq compiler::*opt-three* @LI-OPT-THREE@)
 (setq compiler::*opt-two* @LI-OPT-TWO@)
 (setq compiler::*init-lsp* @LI-INIT-LSP@)
 
 (defvar si::*system-banner* (si::default-system-banner))

 (in-package 'user)
 (import 'si::info)

 t)
