       
#(#! 
(lisp::in-package :walker)#! 
(lisp::export (lisp::quote (walker::define-walker-template walker::walk-form walker::walk-form-expand-macros-p walker::nested-walk-form walker::variable-lexical-p walker::variable-special-p walker::variable-globally-special-p walker::*variable-declarations* walker::variable-declaration walker::macroexpand-all)))
#("The evaluator was called to evaluate a form in a macroexpansion~%~
          environment constructed by the PCL portable code walker.  These~%~
          environments are only useful for macroexpansion, they cannot be~%~
          used for evaluation.~%~
          This error should never occur when using PCL.~%~
          This most likely source of this error is a program which tries to~%~
          to use the PCL portable code walker to build its own evaluator." lisp::let walker::with-augmented-environment-internal lisp::function lisp::macro "Functions" "Macros" lisp::ecase lisp::car (lisp::flet lisp::labels) lisp::dolist walker::fn lisp::cadr lisp::push (lisp::macrolet) walker::mac (lisp::list (lisp::car walker::mac) (walker::convert-macro-to-lambda (lisp::cadr walker::mac) (lisp::cddr walker::mac) (lisp::string (lisp::car walker::mac)))) walker::with-augmented-environment :functions :macros "Dummy Macro" lisp::defmacro walker::walker-environment-bind-1 walker::*key-to-walker-environment* :lexical-var :key :macro walker::*variable-declarations* "~S is not a recognized variable declaration." lisp::special lisp::get #0=(lisp::quote walker::walker-template) (lisp::nil walker::repeat (lisp::eval)) lisp::eval-when (lisp::load lisp::eval) lisp::setf walker::get-walker-template-internal lisp::quote walker::walker-template lisp::lambda (lisp::lambda walker::repeat (lisp::eval)) "Can't get template for ~S" walker::walk-form-expand-macros-p :walk-function :eval :walk-form "~S is a special form, not defined in the CommonLisp.~%~
		      manual This code walker doesn't know how to walk it.~%~
		      Define a template for this special form and try again." (walker::call walker::repeat (lisp::eval)) :set conditions::case-failure :name conditions::ecase :datum :expected-type (lisp::member . #1=(lisp::eval lisp::function walker::test walker::effect lisp::return lisp::quote lisp::nil lisp::set lisp::lambda walker::call)) :possibilities #1# "While handling repeat:
                     ~%~Ran into stop while still in repeat template." lisp::declare "Encountered declare ~S in a place where a declare was not expected." lisp::nil "Can't understand something in the arglist ~S" (walker::test walker::repeat (lisp::eval)) lisp::flet walker::.let-if-dummy. lisp::if (walker::.let-if-dummy.) (walker::.let-if-dummy.) lisp::setq lisp::multiple-value-bind (lisp::nil (walker::repeat (lisp::set)) lisp::eval) lisp::eval (lisp::eval) lisp::progn :lexical-variables walker::symbol-macrolet (lisp::member . #2=(lisp::flet lisp::labels lisp::macrolet)) #2# (lisp::member . #3=(lisp::flet lisp::labels lisp::macrolet)) #3# (lisp::member . #4=(lisp::flet lisp::labels lisp::macrolet)) #4# (lisp::member . #5=(lisp::flet lisp::labels lisp::macrolet)) #5# (lisp::member . #6=(lisp::flet lisp::labels lisp::macrolet)) #6# (lisp::member . #7=(lisp::flet lisp::labels lisp::macrolet)) #7# (lisp::member . #8=(lisp::flet lisp::labels lisp::macrolet)) #8# (lisp::member . #9=(lisp::flet lisp::labels lisp::macrolet)) #9# (lisp::member . #10=(lisp::flet lisp::labels lisp::macrolet)) #10# (lisp::member . #11=(lisp::flet lisp::labels lisp::macrolet)) #11# "In the form:~%~S~%~
                       IF only accepts three arguments, you are using ~D.~%~
                       It is true that some Common Lisps support this, but ~
                       it is not~%~
                       truly legal Common Lisp.  For now, this code ~
                       walker is interpreting ~%~
                       the extra arguments as extra else clauses. ~
                       Even if this is what~%~
                       you intended, you should fix your source code." walker::unbound-lexical-function walker::environment-macro :declarations walker::env-lock walker::env-lexical-variables walker::variable-lexical-p walker::env-declarations walker::variable-declaration walker::variable-globally-special-p walker::get-implementation-dependent-walker-template walker::walk-form lisp::nil walker::walk-form-internal lisp::nil walker::env-walk-form walker::env-walk-function walker::variable-symbol-macro-p walker::get-walker-template walker::walk-template walker::test walker::effect lisp::return lisp::set walker::call conditions::error walker::repeat walker::walk-template-handle-repeat walker::remote walker::recons walker::walk-template-handle-repeat-1 walker::walk-repeat-eval walker::relist-internal walker::walk-declarations walker::note-declaration lisp::warn walker::note-lexical-binding walker::walk-arglist walker::relist* walker::walk-let/let* walker::walk-prog/prog* walker::walk-do/do* walker::walk-bindings-1 walker::walk-bindings-2 lisp::some walker::relist walker::walk-tagbody-1 lisp::labels lisp::macrolet walker::convert-macro-to-lambda walker::walk-lambda (system::%init . #((system::setvv 110 (system::mc lisp::nil 68)) (system::setvv 108 (system::mc lisp::nil 67)) (system::mfvfun (lisp::quote walker::unbound-lexical-function) 0 16384) (system::putprop (lisp::quote walker::with-augmented-environment) (lisp::quote 1) #12=(lisp::quote system::pretty-print-format)) (system::mm (lisp::quote walker::with-augmented-environment) 1) (system::mfsfun (lisp::quote walker::with-augmented-environment-internal) 2 3) (system::mfsfun (lisp::quote walker::environment-function) 3 2) (system::mfsfun (lisp::quote walker::environment-macro) 4 2) (system::putprop (lisp::quote walker::with-new-definition-in-environment) (lisp::quote 1) #12#) (system::mm (lisp::quote walker::with-new-definition-in-environment) 5) (system::mfvfun (lisp::quote walker::convert-macro-to-lambda) 6 770) (system::putprop (lisp::quote walker::walker-environment-bind) (lisp::quote 1) #12#) (system::mm (lisp::quote walker::walker-environment-bind) 7) (system::*make-special (lisp::quote walker::*key-to-walker-environment*)) (lisp::or (lisp::boundp (lisp::quote walker::*key-to-walker-environment*)) (lisp::setq walker::*key-to-walker-environment* (lisp::gensym))) (system::mfsfun (lisp::quote walker::env-lock) 8 1) (system::mfvfun-key (lisp::quote walker::walker-environment-bind-1) 9 16385 10) (system::mfsfun (lisp::quote walker::env-walk-function) 11 1) (system::mfsfun (lisp::quote walker::env-walk-form) 12 1) (system::mfsfun (lisp::quote walker::env-declarations) 13 1) (system::mfsfun (lisp::quote walker::env-lexical-variables) 14 1) (system::mfsfun (lisp::quote walker::note-declaration) 15 2) (system::mfsfun (lisp::quote walker::note-lexical-binding) 16 2) (system::mfsfun (lisp::quote walker::variable-lexical-p) 17 2) (system::mfsfun (lisp::quote walker::variable-symbol-macro-p) 18 2) (system::*make-special (lisp::quote walker::*variable-declarations*)) (lisp::or (lisp::boundp (lisp::quote walker::*variable-declarations*)) (lisp::setq walker::*variable-declarations* (lisp::quote (lisp::special)))) (system::mfsfun (lisp::quote walker::variable-declaration) 19 3) (system::mfsfun (lisp::quote walker::variable-special-p) 20 2) (system::mfsfun (lisp::quote walker::variable-globally-special-p) 21 1) (system::mm (lisp::quote walker::get-walker-template-internal) 22) (system::mm (lisp::quote walker::define-walker-template) 23) (system::mfsfun (lisp::quote walker::get-walker-template) 24 1) (system::mfsfun (lisp::quote walker::get-implementation-dependent-walker-template) 25 1) (system::sputprop (lisp::quote lisp::block) #0# (lisp::quote (lisp::nil lisp::nil walker::repeat (lisp::eval)))) (system::sputprop (lisp::quote lisp::catch) #0# (lisp::quote (lisp::nil lisp::eval walker::repeat (lisp::eval)))) (system::sputprop (lisp::quote lisp::compiler-let) #0# (lisp::quote walker::walk-compiler-let)) (system::sputprop (lisp::quote lisp::declare) #0# (lisp::quote walker::walk-unexpected-declare)) (system::sputprop (lisp::quote lisp::eval-when) #0# (lisp::quote (lisp::nil lisp::quote walker::repeat (lisp::eval)))) (system::sputprop (lisp::quote lisp::flet) #0# (lisp::quote walker::walk-flet)) (system::sputprop (lisp::quote lisp::function) #0# (lisp::quote (lisp::nil walker::call))) (system::sputprop (lisp::quote lisp::go) #0# (lisp::quote (lisp::nil lisp::quote))) (system::sputprop (lisp::quote lisp::if) #0# (lisp::quote walker::walk-if)) (system::sputprop (lisp::quote lisp::labels) #0# (lisp::quote walker::walk-labels)) (system::sputprop (lisp::quote lisp::lambda) #0# (lisp::quote walker::walk-lambda)) (system::sputprop (lisp::quote lisp::let) #0# (lisp::quote walker::walk-let)) (system::sputprop (lisp::quote lisp::let*) #0# (lisp::quote walker::walk-let*)) (system::sputprop (lisp::quote lisp::locally) #0# (lisp::quote walker::walk-locally)) (system::sputprop (lisp::quote lisp::macrolet) #0# (lisp::quote walker::walk-macrolet)) (system::sputprop (lisp::quote lisp::multiple-value-call) #0# (lisp::quote (lisp::nil lisp::eval walker::repeat (lisp::eval)))) (system::sputprop (lisp::quote lisp::multiple-value-prog1) #0# (lisp::quote (lisp::nil lisp::return walker::repeat (lisp::eval)))) (system::sputprop (lisp::quote lisp::multiple-value-setq) #0# (lisp::quote walker::walk-multiple-value-setq)) (system::sputprop (lisp::quote lisp::multiple-value-bind) #0# (lisp::quote walker::walk-multiple-value-bind)) (system::sputprop (lisp::quote lisp::progn) #0# (lisp::quote (lisp::nil walker::repeat (lisp::eval)))) (system::sputprop (lisp::quote lisp::progv) #0# (lisp::quote (lisp::nil lisp::eval lisp::eval walker::repeat (lisp::eval)))) (system::sputprop (lisp::quote lisp::quote) #0# (lisp::quote (lisp::nil lisp::quote))) (system::sputprop (lisp::quote lisp::return-from) #0# (lisp::quote (lisp::nil lisp::quote walker::repeat (lisp::return)))) (system::sputprop (lisp::quote lisp::setq) #0# (lisp::quote walker::walk-setq)) (system::sputprop (lisp::quote walker::symbol-macrolet) #0# (lisp::quote walker::walk-symbol-macrolet)) (system::sputprop (lisp::quote lisp::tagbody) #0# (lisp::quote walker::walk-tagbody)) (system::sputprop (lisp::quote lisp::the) #0# (lisp::quote (lisp::nil lisp::quote lisp::eval))) (system::sputprop (lisp::quote lisp::throw) #0# (lisp::quote (lisp::nil lisp::eval lisp::eval))) (system::sputprop (lisp::quote lisp::unwind-protect) #0# (lisp::quote (lisp::nil lisp::return walker::repeat (lisp::eval)))) (system::sputprop (lisp::quote lisp::do) #0# (lisp::quote walker::walk-do)) (system::sputprop (lisp::quote lisp::do*) #0# (lisp::quote walker::walk-do*)) (system::sputprop (lisp::quote lisp::prog) #0# (lisp::quote walker::walk-prog)) (system::sputprop (lisp::quote lisp::prog*) #0# (lisp::quote walker::walk-prog*)) (system::sputprop (lisp::quote lisp::cond) #0# (lisp::quote (lisp::nil walker::repeat ((walker::test walker::repeat (lisp::eval)))))) (system::sputprop (lisp::quote lisp::lambda-block) #0# (lisp::quote walker::walk-named-lambda)) (system::*make-special (lisp::quote walker::walk-form-expand-macros-p)) (lisp::or (lisp::boundp (lisp::quote walker::walk-form-expand-macros-p)) (lisp::setq walker::walk-form-expand-macros-p lisp::nil)) (system::mf (lisp::quote walker::macroexpand-all) 26) (system::mf (lisp::quote walker::walk-form) 27) (system::mf (lisp::quote walker::nested-walk-form) 28) (system::mf (lisp::quote walker::walk-form-internal) 29) (system::mfsfun (lisp::quote walker::walk-template) 30 4) (system::mfsfun (lisp::quote walker::walk-template-handle-repeat) 31 5) (system::mfsfun (lisp::quote walker::walk-template-handle-repeat-1) 32 6) (system::mfsfun (lisp::quote walker::walk-repeat-eval) 33 2) (system::mfsfun (lisp::quote walker::recons) 34 3) (system::mfvfun (lisp::quote walker::relist) 35 16385) (system::mfvfun (lisp::quote walker::relist*) 36 16385) (system::mfsfun (lisp::quote walker::relist-internal) 37 3) (system::mf (lisp::quote walker::walk-declarations) 38) (system::mfsfun (lisp::quote walker::walk-unexpected-declare) 39 3) (system::setvv 60 lisp::lambda-list-keywords) (system::mfvfun (lisp::quote walker::walk-arglist) 40 1027) (system::mfsfun (lisp::quote walker::walk-let) 41 3) (system::mfsfun (lisp::quote walker::walk-let*) 42 3) (system::mfsfun (lisp::quote walker::walk-prog) 43 3) (system::mfsfun (lisp::quote walker::walk-prog*) 44 3) (system::mfsfun (lisp::quote walker::walk-do) 45 3) (system::mfsfun (lisp::quote walker::walk-do*) 46 3) (system::mfsfun (lisp::quote walker::walk-let/let*) 47 4) (system::mfsfun (lisp::quote walker::walk-locally) 48 3) (system::mfsfun (lisp::quote walker::walk-prog/prog*) 49 4) (system::mfsfun (lisp::quote walker::walk-do/do*) 50 4) (system::mf (lisp::quote walker::walk-let-if) 51) (system::mfsfun (lisp::quote walker::walk-multiple-value-setq) 52 3) (system::mfsfun (lisp::quote walker::walk-multiple-value-bind) 53 3) (system::mfsfun (lisp::quote walker::walk-bindings-1) 54 5) (system::mfsfun (lisp::quote walker::walk-bindings-2) 55 4) (system::mfsfun (lisp::quote walker::walk-lambda) 56 3) (system::mfsfun (lisp::quote walker::walk-named-lambda) 57 3) (system::mfsfun (lisp::quote walker::walk-setq) 58 3) (system::mfsfun (lisp::quote walker::walk-symbol-macrolet) 59 3) (system::mfsfun (lisp::quote walker::walk-tagbody) 60 3) (system::mfsfun (lisp::quote walker::walk-tagbody-1) 61 3) (system::mfsfun (lisp::quote walker::walk-compiler-let) 62 3) (system::mfsfun (lisp::quote walker::walk-macrolet) 63 3) (system::mfsfun (lisp::quote walker::walk-flet) 64 3) (system::mfsfun (lisp::quote walker::walk-labels) 65 3) (system::mfsfun (lisp::quote walker::walk-if) 66 3) (system::debug (lisp::quote walker::with-augmented-environment-internal) (lisp::quote (walker::f #:g1649))) (system::debug (lisp::quote walker::convert-macro-to-lambda) (lisp::quote (walker::llist walker::body walker::name))) (system::debug (lisp::quote walker::walker-environment-bind-1) (lisp::quote (walker::env walker::walk-function walker::walk-form walker::declarations walker::lexical-variables walker::wfnp walker::wfop walker::decp walker::lexp))) (system::debug (lisp::quote walker::note-declaration) (lisp::quote (#:g1664 #:g1665))) (system::debug (lisp::quote walker::note-lexical-binding) (lisp::quote (#:g1669 #:g1670 #:g1671))) (system::debug (lisp::quote walker::variable-declaration) (lisp::quote (#:g1674 walker::decl))) (system::debug (lisp::quote walker::macroexpand-all) (lisp::quote (walker::form walker::environment))) (system::debug (lisp::quote walker::walk-form) (lisp::quote (walker::form walker::environment walker::walk-function))) (system::debug (lisp::quote walker::nested-walk-form) (lisp::quote (walker::whole walker::form walker::environment walker::walk-function walker::outer-walk-function))) (system::debug (lisp::quote walker::walk-form-internal) (lisp::quote (walker::form walker::context walker::env walker::fn walker::template))) (system::debug (lisp::quote walker::relist) (lisp::quote (walker::x walker::args))) (system::debug (lisp::quote walker::relist*) (lisp::quote (walker::x walker::args))) (system::debug (lisp::quote walker::walk-declarations) (lisp::quote (walker::body walker::fn walker::env walker::doc-string-p walker::declarations walker::old-body walker::form #:g1686 lisp::declaration))) (system::debug (lisp::quote walker::walk-arglist) (lisp::quote (walker::arglist walker::context walker::env walker::destructuringp))) (system::debug (lisp::quote walker::walk-let/let*) (lisp::quote (walker::let/let* walker::bindings walker::body walker::walked-bindings walker::walked-body))) (system::debug (lisp::quote walker::walk-locally) (lisp::quote (lisp::locally walker::body walker::walked-body))) (system::debug (lisp::quote walker::walk-prog/prog*) (lisp::quote (walker::context walker::possible-block-name walker::blocked-prog walker::walked-bindings walker::walked-body))) (system::debug (lisp::quote walker::walk-do/do*) (lisp::quote (walker::do/do* walker::bindings walker::end-test walker::body walker::walked-bindings walker::walked-body))) (system::debug (lisp::quote walker::walk-let-if) (lisp::quote (walker::form walker::context walker::env))) (system::debug (lisp::quote walker::walk-multiple-value-setq) (lisp::quote (walker::env walker::temps walker::sets walker::expanded walker::walked))) (system::debug (lisp::quote walker::walk-multiple-value-bind) (lisp::quote (walker::old-env walker::context walker::new-env walker::mvb walker::bindings walker::mv-form walker::body walker::walked-bindings walker::walked-body))) (system::debug (lisp::quote walker::walk-lambda) (lisp::quote (walker::arglist walker::body walker::walked-arglist walker::walked-body))) (system::debug (lisp::quote walker::walk-named-lambda) (lisp::quote (walker::name walker::arglist walker::body walker::walked-arglist walker::walked-body))) (system::debug (lisp::quote walker::walk-setq) (lisp::quote (walker::var walker::val walker::symmac walker::expanded walker::walked))) (system::debug (lisp::quote walker::walk-symbol-macrolet) (lisp::quote (walker::bindings))) (system::debug (lisp::quote walker::walk-compiler-let) (lisp::quote (#:g1706 walker::binding #:g1711))) (system::debug (lisp::quote walker::walk-macrolet) (lisp::quote (walker::context walker::macro-env #:g1749 walker::fn #:g1756))) (system::debug (lisp::quote walker::walk-flet) (lisp::quote (walker::old-env walker::context #:g1799 walker::mac #:g1802))) (system::debug (lisp::quote walker::walk-labels) (lisp::quote (walker::context #:g1818 walker::fn #:g1825))))))
)
