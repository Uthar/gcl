       
#(#! 
(lisp::in-package :pcl)
#("#<" "~S" "Instance" " " ">" "~A ~S ~:S" pcl::name "~A ~S" "Method-Combination ~S ~S" lisp::type pcl::options lisp::nil pcl::std-instance pcl::*funcallable-instance-marker* pcl::..slot-unbound.. :class :allocation :instance "structure slots must have :instance allocation" lisp::nil "~S doesn't seem to have a method-function" lisp::nil lisp::nil lisp::nil lisp::generic-function "~A ~S ~{~S ~}~:S" pcl::fast-method-call lisp::nil pcl::method-call pcl::.next-method-call. (pcl::method-call lisp::function) "No next method." lisp::nil "~A ~S, slot:~S, ~:S" lisp::nil (pcl::method-call lisp::function) "Attempt to reinitialize the method ~S.~%~
          Method objects cannot be reinitialized." "a string or NULL" "a function" "Contains ~S which ~A" "Is not a proper list." "is not a non-null atom" "is not a symbol and so cannot be bound" "is a keyword and so cannot be bound" (lisp::t lisp::nil) "cannot be bound" "is a constant and so cannot be bound" "Contains ~S which ~A" "Is not a proper list." pcl::*allow-experimental-specializers-p* "is neither a class object nor an eql specializer" :qualifiers :lambda-list :specializers :function :fast-function :documentation "When initializing the method ~S:~%~
                   The ~S initialization argument was: ~S.~%~
                   which ~A." :slot-name :slot-definition "The value of the :SLOT-NAME initarg ~A." :method-spec :plist pcl::qualifiers lisp::nil :key lisp::nil pcl::methods "?" :name :argument-precedence-order :declarations :method-class :method-combination lisp::nil pcl::*the-class-method* "a subclass of the class METHOD" pcl::method-class "not supplied" "a subclass of the class METHOD" "a method combination object" lisp::method-combination "not supplied" "a method combination object" "When initializing the generic-function ~S:~%~
                   The ~S initialization argument was: ~A.~%~
                   It must be ~A." "~S does not name a generic-function." "There is no method for the generic-function ~S~%~
                   which matches the argument-specifiers ~S." pcl::function-arglist "The :arglist argument to make-specializable was not supplied~%~
            and there is no version of FUNCTION-ARGLIST defined for this~%~
            port of Portable CommonLoops.~%~
            You must either define a version of FUNCTION-ARGLIST (which~%~
            should be easy), and send it off to the Portable CommonLoops~%~
            people or you should call make-specializable again with the~%~
            :arglist keyword to specify the arglist." lisp::standard-generic-function lisp::nil :initial-element "No method on ~S with qualifiers ~:S and specializers ~:S." lisp::&aux (lisp::&optional lisp::&rest lisp::&key) pcl::*the-class-t* "Discriminating Function Arg ~D" lisp::&rest "Discriminating Function &rest Arg" lisp::nil pcl::arg-info lisp::nil lisp::nil "The method ~S is already part of the generic~@
              function ~S.  It can't be added to another generic~@
              function until it is removed from the first one." :new-method (pcl::make-instance pcl::default-initargs pcl::allocate-instance pcl::shared-initialize pcl::initialize-instance) "The method ~S is attached to the generic function~@
               ~S.  It can't be removed from the generic function~@
               to which it is not attached." (pcl::make-instance pcl::default-initargs pcl::allocate-instance pcl::shared-initialize pcl::initialize-instance) lisp::eql pcl::class-eq lisp::nil "The function ~S requires at least ~D arguments" :constant-value pcl::*boot-state* pcl::complete pcl::compute-applicable-methods pcl::*std-cam-methods* pcl::*old-c-a-m-gf-methods* pcl::*the-class-standard-reader-method* pcl::reader pcl::*the-class-standard-writer-method* pcl::writer pcl::*the-class-standard-boundp-method* lisp::boundp pcl::*standard-method-combination* "error in get-accessor-method-function" pcl::*new-class* pcl::slot-object pcl::*standard-slot-value-using-class-method* pcl::*standard-setf-slot-value-using-class-method* pcl::*standard-slot-boundp-using-class-method* pcl::*structure-slot-value-using-class-method* pcl::*structure-setf-slot-value-using-class-method* pcl::*structure-slot-boundp-using-class-method* pcl::std-class lisp::standard-object pcl::standard-effective-slot-definition lisp::structure-class lisp::structure-object pcl::structure-effective-slot-definition pcl::*the-class-slot-object* pcl::*the-class-standard-object* pcl::*the-class-structure-object* (pcl::default) lisp::not lisp::eq pcl::*the-class-built-in-class* pcl::wrapper-class pcl::std-instance-wrapper pcl::class-of lisp::or pcl::std-instance-p pcl::fsc-instance-p pcl::memq lisp::quote pcl::class-precedence-list lisp::typep pcl::unordered-methods lisp::let pcl::.case-arg. lisp::cond lisp::member (lisp::t lisp::otherwise) pcl::scase pcl::mcase lisp::if pcl::class-test pcl::class-eq-test pcl::*in-precompute-effective-methods-p* lisp::and "The key for the last case arg to mcase was not T" :simple pcl::*eq-case-table-limit* pcl::*case-table-limit* :assoc :hash-table "Invalid eq-p argument" lisp::car lisp::cdr lisp::dolist pcl::e lisp::when (lisp::car pcl::e) (lisp::return (lisp::cdr pcl::e)) lisp::gethash pcl::.call. pcl::.methods. pcl::.umethods. pcl::mlookup :mcase :test lisp::locally (lisp::declare (lisp::optimize (lisp::speed 3) (lisp::safety 0))) pcl::emf pcl::sdfun-method :arg-info pcl::*show-make-unordered-methods-emf-calls* "~&make-unordered-methods-emf ~s~%" lisp::nil pcl::slot-value-using-class (lisp::setf pcl::slot-value-using-class) pcl::slot-boundp-using-class lisp::&allow-other-keys (lisp::&allow-other-keys) lisp::&key lisp::&optional pcl::required pcl::optional lisp::rest pcl::key pcl::class-name pcl::printing-random-thing-internal pcl::named-object-print-function pcl::capitalize-words pcl::slot-value-or-default pcl::cclosure-env-nthcdr pcl::%cclosure-env-nthcdr slot-accessor-name::|PCL ALLOCATION slot READER| slot-accessor-name::|LISP CLASS slot READER| slot-accessor-name::|PCL ALLOCATION slot WRITER| pcl::get-key-arg1 slot-accessor-name::|LISP FUNCTION slot READER| slot-accessor-name::|PCL FAST-FUNCTION slot READER| pcl::method-function-from-fast-function slot-accessor-name::|LISP FUNCTION slot WRITER| slot-accessor-name::|PCL SPECIALIZERS slot READER| pcl::slot-boundp-normal pcl::method-generic-function pcl::generic-function-name pcl::method-qualifiers pcl::unparse-specializers system::structure-subtype-p system::typecase-error-string pcl::accessor-method-slot-name pcl::legal-qualifier-p pcl::legal-specializer-p pcl::specializerp pcl::classp pcl::eql-specializer-p pcl::get-key-arg pcl::legal-qualifiers-p pcl::legal-lambda-list-p pcl::legal-specializers-p pcl::legal-method-function-p pcl::legal-documentation-p pcl::legal-slot-name-p pcl::initialize-method-function pcl::|SETF PCL PLIST-VALUE| slot-accessor-name::|PCL SLOT-DEFINITION slot READER| pcl::accessor-method-class pcl::slot-class-p slot-accessor-name::|PCL SLOT-NAME slot READER| pcl::class-direct-slots pcl::slot-definition-name lisp::find slot-accessor-name::|PCL SLOT-DEFINITION slot WRITER| slot-accessor-name::|PCL SLOT-NAME slot WRITER| pcl::plist-value pcl::generic-function-methods pcl::set-function-name pcl::find-class pcl::class-eq-specializer pcl::*subtypep slot-accessor-name::|PCL METHOD-CLASS slot WRITER| pcl::method-combination-p pcl::generic-function-p pcl::get-method pcl::parse-specializers pcl::remove-method pcl::ensure-generic-function pcl::method-prototype-for-gf pcl::make-instance pcl::add-method :arglist pcl::|SETF PCL GDEFINITION| pcl::|SETF PCL GF-PRETTY-ARGLIST| pcl::add-named-method pcl::same-specializer-p pcl::method-specializers lisp::every pcl::compute-discriminating-function-arglist-info-internal lisp::< lisp::sort pcl::method-lambda-list pcl::gf-lambda-list slot-accessor-name::|PCL ARG-INFO slot READER| pcl::set-arg-info pcl::arg-info-valid-p pcl::update-dfun pcl::|SETF PCL GENERIC-FUNCTION-METHODS| pcl::real-add-method pcl::|SETF PCL METHOD-GENERIC-FUNCTION| pcl::add-direct-method pcl::type-class pcl::update-make-instance-function-table lisp::remove pcl::remove-direct-method pcl::types-from-arguments pcl::compute-applicable-methods-using-types pcl::class-incompatible-superclass-list pcl::|SETF PCL CLASS-INCOMPATIBLE-SUPERCLASS-LIST| pcl::specializer-class pcl::specializer-object slot-accessor-name::|LISP OBJECT slot READER| pcl::get-generic-function-info pcl::class-wrapper pcl::class-eq-type pcl::get-secondary-dispatch-function1 pcl::method-function-get pcl::method-fast-function pcl::method-function pcl::gdefinition pcl::get-effective-method-function pcl::list-eq pcl::compute-applicable-methods-function pcl::gf-arg-info pcl::map-all-generic-functions pcl::update-c-a-m-gf-info pcl::update-gf-simple-accessor-type pcl::early-gf-p pcl::compute-applicable-methods-emf pcl::generic-function-method-combination pcl::standard-svuc-method pcl::structure-svuc-method pcl::get-optimized-std-accessor-method-function pcl::get-optimized-std-slot-value-using-class-method-function pcl::wrapper-of pcl::get-secondary-dispatch-function pcl::get-accessor-from-svuc-method-function pcl::update-std-or-str-methods pcl::map-all-classes pcl::set-standard-svuc-method pcl::set-structure-svuc-method pcl::class-direct-subclasses pcl::mec-all-classes-internal pcl::mec-all-classes pcl::mec-all-class-lists pcl::arg-info-nkeys lisp::identity pcl::generate-discrimination-net-internal lisp::class pcl::arg-info-number-required pcl::compute-secondary-dispatch-function1 pcl::default-test-converter pcl::invoke-effective-method-function pcl::invoke-fast-method-call pcl::compute-mcase-parameters pcl::default-code-converter pcl::methods-converter pcl::default-constant-converter pcl::get-effective-method-function1 pcl::default-secondary-dispatch-function pcl::convert-methods pcl::arg-info-applyp pcl::make-dispatch-lambda pcl::make-emf-call pcl::net-test-converter pcl::net-code-converter pcl::get-function1 pcl::slot-definition-reader-function pcl::slot-definition-writer-function pcl::slot-definition-boundp-function slot-accessor-name::|PCL DFUN-STATE slot READER| pcl::update-all-c-a-m-gf-info pcl::update-slot-value-gf-info pcl::slot-value-using-class-dfun pcl::setf-slot-value-using-class-dfun pcl::slot-boundp-using-class-dfun pcl::make-final-dfun pcl::make-initial-dfun pcl::make-final-dfun-internal pcl::set-dfun pcl::early-method-lambda-list pcl::analyze-lambda-list lisp::remove-if pcl::method-pretty-arglist pcl::function-keywords lisp::union pcl::sort-applicable-methods pcl::invoke-emf pcl::convert-table pcl::make-fast-method-call pcl::net-constant-converter pcl::type-from-specializer pcl::specializer-applicable-using-type-p pcl::augment-type pcl::class-from-type pcl::methods-contain-eql-specializer-p pcl::map-all-orders pcl::dfun-arg-symbol pcl::dnet-methods-p pcl::one-order-p pcl::get-wrappers-from-classes pcl::probe-cache pcl::sdfun-for-caching pcl::value-for-caching pcl::fill-cache pcl::class-finalized-p pcl::class-slots pcl::compute-slot-accessor-info pcl::no-applicable-method (system::%init . #((pcl::proclaim-defgeneric (lisp::quote pcl::print-object) (lisp::quote (pcl::instance lisp::stream))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD PRINT-OBJECT (T T))|) 0 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::print-object) (lisp::quote lisp::nil) (lisp::quote (lisp::t lisp::t)) (lisp::quote (pcl::instance lisp::stream)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD PRINT-OBJECT (T T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::print-object) (lisp::quote ((lisp::class lisp::class) lisp::stream))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD PRINT-OBJECT (CLASS T))|) 1 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::print-object) (lisp::quote lisp::nil) (lisp::quote (lisp::class lisp::t)) (lisp::quote (lisp::class lisp::stream)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD PRINT-OBJECT (CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::print-object) (lisp::quote ((pcl::slotd pcl::slot-definition) lisp::stream))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD PRINT-OBJECT (SLOT-DEFINITION T))|) 2 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::print-object) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-definition lisp::t)) (lisp::quote (pcl::slotd lisp::stream)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD PRINT-OBJECT (SLOT-DEFINITION T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (system::mfvfun (lisp::quote pcl::named-object-print-function) 3 770) (pcl::proclaim-defgeneric (lisp::quote pcl::print-object) (lisp::quote ((pcl::mc pcl::standard-method-combination) lisp::stream))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD PRINT-OBJECT (STANDARD-METHOD-COMBINATION T))|) 4 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::print-object) (lisp::quote lisp::nil) (lisp::quote (pcl::standard-method-combination lisp::t)) (lisp::quote (pcl::mc lisp::stream)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD PRINT-OBJECT (STANDARD-METHOD-COMBINATION T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((pcl::slotd pcl::standard-slot-definition) pcl::slot-names lisp::&key))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::allocation lisp::class pcl::allocation)) (lisp::quote (pcl::allocation)) (lisp::quote lisp::nil)) (system::setvv 11 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STANDARD-SLOT-DEFINITION T))|) 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:after)) (lisp::quote (pcl::standard-slot-definition lisp::t)) (lisp::quote (pcl::slotd pcl::slot-names lisp::&key)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STANDARD-SLOT-DEFINITION T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t) :slot-name-lists ((lisp::nil lisp::class pcl::allocation) lisp::nil) :pv-table-symbol #0=#:|pv-table|)))) (lisp::quote #0#)) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((pcl::slotd pcl::structure-slot-definition) pcl::slot-names lisp::&key #1=(pcl::allocation :instance)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STRUCTURE-SLOT-DEFINITION T))|) 6 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:after)) (lisp::quote (pcl::structure-slot-definition lisp::t)) (lisp::quote (pcl::slotd pcl::slot-names lisp::&key #1#)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STRUCTURE-SLOT-DEFINITION T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::inform-type-system-about-class) (lisp::quote ((lisp::class lisp::structure-class) (pcl::name lisp::t)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD INFORM-TYPE-SYSTEM-ABOUT-CLASS (STRUCTURE-CLASS T))|) 7 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::inform-type-system-about-class) (lisp::quote lisp::nil) (lisp::quote (lisp::structure-class lisp::t)) (lisp::quote (lisp::class pcl::name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD INFORM-TYPE-SYSTEM-ABOUT-CLASS (STRUCTURE-CLASS T))|) (lisp::quote (:plist (:arg-info (2) :constant-value lisp::nil)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::method-function) (lisp::quote ((lisp::method lisp::standard-method)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::fast-function lisp::function)) (lisp::quote (lisp::function)) (lisp::quote lisp::nil)) (system::setvv 19 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD METHOD-FUNCTION (STANDARD-METHOD))|) 8) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::method-function) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method)) (lisp::quote (lisp::method)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD METHOD-FUNCTION (STANDARD-METHOD))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil lisp::function pcl::fast-function)) :pv-table-symbol #2=#:|pv-table|)))) (lisp::quote #2#)) (pcl::proclaim-defgeneric (lisp::quote pcl::accessor-method-class) (lisp::quote ((lisp::method pcl::standard-accessor-method)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::specializers)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 21 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD ACCESSOR-METHOD-CLASS (STANDARD-ACCESSOR-METHOD))|) 9 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::accessor-method-class) (lisp::quote lisp::nil) (lisp::quote (pcl::standard-accessor-method)) (lisp::quote (lisp::method)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ACCESSOR-METHOD-CLASS (STANDARD-ACCESSOR-METHOD))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil pcl::specializers)) :pv-table-symbol #3=#:|pv-table|)))) (lisp::quote #3#)) (pcl::proclaim-defgeneric (lisp::quote pcl::accessor-method-class) (lisp::quote ((lisp::method pcl::standard-writer-method)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::specializers)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 22 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD ACCESSOR-METHOD-CLASS (STANDARD-WRITER-METHOD))|) 10 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::accessor-method-class) (lisp::quote lisp::nil) (lisp::quote (pcl::standard-writer-method)) (lisp::quote (lisp::method)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ACCESSOR-METHOD-CLASS (STANDARD-WRITER-METHOD))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil pcl::specializers)) :pv-table-symbol #4=#:|pv-table|)))) (lisp::quote #4#)) (pcl::proclaim-defgeneric (lisp::quote pcl::print-object) (lisp::quote ((lisp::method lisp::standard-method) lisp::stream))) (system::setvv 23 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 27 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD PRINT-OBJECT (STANDARD-METHOD T))|) 11 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::print-object) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method lisp::t)) (lisp::quote (lisp::method lisp::stream)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD PRINT-OBJECT (STANDARD-METHOD T))|) (lisp::quote (:plist (:arg-info (2) :slot-name-lists ((lisp::nil lisp::generic-function) lisp::nil) :pv-table-symbol #5=#:|pv-table| :needs-next-methods-p lisp::t)))) (lisp::quote #5#)) (pcl::proclaim-defgeneric (lisp::quote pcl::print-object) (lisp::quote ((lisp::method pcl::standard-accessor-method) lisp::stream))) (system::setvv 32 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 34 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD PRINT-OBJECT (STANDARD-ACCESSOR-METHOD T))|) 12 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::print-object) (lisp::quote lisp::nil) (lisp::quote (pcl::standard-accessor-method lisp::t)) (lisp::quote (lisp::method lisp::stream)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD PRINT-OBJECT (STANDARD-ACCESSOR-METHOD T))|) (lisp::quote (:plist (:arg-info (2) :slot-name-lists ((lisp::nil lisp::generic-function) lisp::nil) :pv-table-symbol #6=#:|pv-table| :needs-next-methods-p lisp::t)))) (lisp::quote #6#)) (pcl::proclaim-defgeneric (lisp::quote pcl::reinitialize-instance) (lisp::quote ((lisp::method lisp::standard-method) lisp::&rest pcl::initargs))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD REINITIALIZE-INSTANCE (STANDARD-METHOD))|) 13 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::reinitialize-instance) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method)) (lisp::quote (lisp::method lisp::&rest pcl::initargs)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD REINITIALIZE-INSTANCE (STANDARD-METHOD))|) (lisp::quote (:plist (:arg-info (1 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-documentation-p) (lisp::quote ((lisp::object lisp::standard-method) pcl::x))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD LEGAL-DOCUMENTATION-P (STANDARD-METHOD T))|) 14 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::legal-documentation-p) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method lisp::t)) (lisp::quote (lisp::object pcl::x)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD LEGAL-DOCUMENTATION-P (STANDARD-METHOD T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-lambda-list-p) (lisp::quote ((lisp::object lisp::standard-method) pcl::x))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD LEGAL-LAMBDA-LIST-P (STANDARD-METHOD T))|) 15 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::legal-lambda-list-p) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method lisp::t)) (lisp::quote (lisp::object pcl::x)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD LEGAL-LAMBDA-LIST-P (STANDARD-METHOD T))|) (lisp::quote (:plist (:arg-info (2) :constant-value lisp::t)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-method-function-p) (lisp::quote ((lisp::object lisp::standard-method) pcl::x))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD LEGAL-METHOD-FUNCTION-P (STANDARD-METHOD T))|) 16 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::legal-method-function-p) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method lisp::t)) (lisp::quote (lisp::object pcl::x)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD LEGAL-METHOD-FUNCTION-P (STANDARD-METHOD T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-qualifiers-p) (lisp::quote ((lisp::object lisp::standard-method) pcl::x))) (system::mf (lisp::quote pcl::|(FAST-METHOD LEGAL-QUALIFIERS-P (STANDARD-METHOD T))|) 17) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::legal-qualifiers-p) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method lisp::t)) (lisp::quote (lisp::object pcl::x)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD LEGAL-QUALIFIERS-P (STANDARD-METHOD T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-qualifier-p) (lisp::quote ((lisp::object lisp::standard-method) pcl::x))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD LEGAL-QUALIFIER-P (STANDARD-METHOD T))|) 18 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::legal-qualifier-p) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method lisp::t)) (lisp::quote (lisp::object pcl::x)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD LEGAL-QUALIFIER-P (STANDARD-METHOD T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-slot-name-p) (lisp::quote ((lisp::object lisp::standard-method) pcl::x))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD LEGAL-SLOT-NAME-P (STANDARD-METHOD T))|) 19 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::legal-slot-name-p) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method lisp::t)) (lisp::quote (lisp::object pcl::x)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD LEGAL-SLOT-NAME-P (STANDARD-METHOD T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-specializers-p) (lisp::quote ((lisp::object lisp::standard-method) pcl::x))) (system::mf (lisp::quote pcl::|(FAST-METHOD LEGAL-SPECIALIZERS-P (STANDARD-METHOD T))|) 20) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::legal-specializers-p) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method lisp::t)) (lisp::quote (lisp::object pcl::x)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD LEGAL-SPECIALIZERS-P (STANDARD-METHOD T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (system::*make-special (lisp::quote pcl::*allow-experimental-specializers-p*)) (lisp::or (lisp::boundp (lisp::quote pcl::*allow-experimental-specializers-p*)) (lisp::setq pcl::*allow-experimental-specializers-p* lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-specializer-p) (lisp::quote ((lisp::object lisp::standard-method) pcl::x))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD LEGAL-SPECIALIZER-P (STANDARD-METHOD T))|) 21 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::legal-specializer-p) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method lisp::t)) (lisp::quote (lisp::object pcl::x)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD LEGAL-SPECIALIZER-P (STANDARD-METHOD T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((lisp::method lisp::standard-method) pcl::slot-names lisp::&key pcl::qualifiers pcl::lambda-list pcl::specializers lisp::function pcl::fast-function pcl::documentation))) (system::mf (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (STANDARD-METHOD T))|) 22) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:before)) (lisp::quote (lisp::standard-method lisp::t)) (lisp::quote (lisp::method pcl::slot-names lisp::&key pcl::qualifiers pcl::lambda-list pcl::specializers lisp::function pcl::fast-function pcl::documentation)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (STANDARD-METHOD T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((lisp::method pcl::standard-accessor-method) pcl::slot-names lisp::&key pcl::slot-name pcl::slot-definition))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (STANDARD-ACCESSOR-METHOD T))|) 23 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:before)) (lisp::quote (pcl::standard-accessor-method lisp::t)) (lisp::quote (lisp::method pcl::slot-names lisp::&key pcl::slot-name pcl::slot-definition)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (STANDARD-ACCESSOR-METHOD T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((lisp::method lisp::standard-method) pcl::slot-names lisp::&rest pcl::initargs lisp::&key pcl::qualifiers pcl::method-spec pcl::plist))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STANDARD-METHOD T))|) 24 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:after)) (lisp::quote (lisp::standard-method lisp::t)) (lisp::quote (lisp::method pcl::slot-names lisp::&rest pcl::initargs lisp::&key pcl::qualifiers pcl::method-spec pcl::plist)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STANDARD-METHOD T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((lisp::method pcl::standard-accessor-method) pcl::slot-names lisp::&key))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::slot-definition pcl::slot-name pcl::slot-definition pcl::slot-name pcl::slot-definition)) (lisp::quote (pcl::slot-name pcl::slot-definition)) (lisp::quote lisp::nil)) (system::setvv 64 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STANDARD-ACCESSOR-METHOD T))|) 25) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:after)) (lisp::quote (pcl::standard-accessor-method lisp::t)) (lisp::quote (lisp::method pcl::slot-names lisp::&key)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STANDARD-ACCESSOR-METHOD T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t) :slot-name-lists ((lisp::nil pcl::slot-definition pcl::slot-name) lisp::nil) :pv-table-symbol #7=#:|pv-table|)))) (lisp::quote #7#)) (pcl::proclaim-defgeneric (lisp::quote pcl::method-qualifiers) (lisp::quote ((lisp::method lisp::standard-method)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD METHOD-QUALIFIERS (STANDARD-METHOD))|) 26 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::method-qualifiers) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method)) (lisp::quote (lisp::method)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD METHOD-QUALIFIERS (STANDARD-METHOD))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (system::*make-special (lisp::quote pcl::*the-class-generic-function*)) (lisp::or (lisp::boundp (lisp::quote pcl::*the-class-generic-function*)) (lisp::setq pcl::*the-class-generic-function* (pcl::find-class (lisp::quote lisp::generic-function)))) (system::*make-special (lisp::quote pcl::*the-class-standard-generic-function*)) (lisp::or (lisp::boundp (lisp::quote pcl::*the-class-standard-generic-function*)) (lisp::setq pcl::*the-class-standard-generic-function* (pcl::find-class (lisp::quote lisp::standard-generic-function)))) (pcl::proclaim-defgeneric (lisp::quote pcl::print-object) (lisp::quote ((lisp::generic-function lisp::generic-function) lisp::stream))) (system::setvv 66 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD PRINT-OBJECT (GENERIC-FUNCTION T))|) 27 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::print-object) (lisp::quote lisp::nil) (lisp::quote (lisp::generic-function lisp::t)) (lisp::quote (lisp::generic-function lisp::stream)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD PRINT-OBJECT (GENERIC-FUNCTION T))|) (lisp::quote (:plist (:arg-info (2) :slot-name-lists ((lisp::nil pcl::methods) lisp::nil) :pv-table-symbol #8=#:|pv-table|)))) (lisp::quote #8#)) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((lisp::generic-function lisp::standard-generic-function) pcl::slot-names lisp::&key #9=(pcl::name lisp::nil pcl::namep) #10=(pcl::lambda-list lisp::nil pcl::lambda-list-p) pcl::argument-precedence-order pcl::declarations pcl::documentation #11=(pcl::method-class lisp::nil pcl::method-class-supplied-p) #12=(lisp::method-combination lisp::nil pcl::method-combination-supplied-p)))) (pcl::initialize-internal-slot-gfs* (lisp::quote lisp::nil) (lisp::quote (pcl::method-class)) (lisp::quote lisp::nil)) (system::setvv 74 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (STANDARD-GENERIC-FUNCTION T))|) 28) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:before)) (lisp::quote (lisp::standard-generic-function lisp::t)) (lisp::quote (lisp::generic-function pcl::slot-names lisp::&key #9# #10# pcl::argument-precedence-order pcl::declarations pcl::documentation #11# #12#)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (STANDARD-GENERIC-FUNCTION T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t) :slot-name-lists ((lisp::nil lisp::method-combination pcl::method-class) lisp::nil) :pv-table-symbol #13=#:|pv-table|)))) (lisp::quote #13#)) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-named-method) (lisp::quote (pcl::generic-function-name pcl::argument-specifiers lisp::&optional pcl::extra))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD REMOVE-NAMED-METHOD (T T))|) 29 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::remove-named-method) (lisp::quote lisp::nil) (lisp::quote (lisp::t lisp::t)) (lisp::quote (pcl::generic-function-name pcl::argument-specifiers lisp::&optional pcl::extra)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD REMOVE-NAMED-METHOD (T T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (system::mfvfun (lisp::quote pcl::real-add-named-method) 30 16388) (system::setvv 90 lisp::lambda-list-keywords) (system::mfvfun-key (lisp::quote pcl::make-specializable) 31 16385 32) (system::mfvfun (lisp::quote pcl::real-get-method) 33 1027) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-discriminating-function-arglist-info) (lisp::quote ((lisp::generic-function lisp::standard-generic-function)))) (system::mf (lisp::quote pcl::|(FAST-METHOD COMPUTE-DISCRIMINATING-FUNCTION-ARGLIST-INFO (STANDARD-GENERIC-FUNCTION))|) 34) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-discriminating-function-arglist-info) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-generic-function)) (lisp::quote (lisp::generic-function)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-DISCRIMINATING-FUNCTION-ARGLIST-INFO (STANDARD-GENERIC-FUNCTION))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (system::mf (lisp::quote pcl::compute-discriminating-function-arglist-info-internal) 35) (system::mfsfun (lisp::quote pcl::make-discriminating-function-arglist) 36 2) (pcl::proclaim-defgeneric (lisp::quote pcl::generic-function-lambda-list) (lisp::quote ((pcl::gf lisp::generic-function)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD GENERIC-FUNCTION-LAMBDA-LIST (GENERIC-FUNCTION))|) 37 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::generic-function-lambda-list) (lisp::quote lisp::nil) (lisp::quote (lisp::generic-function)) (lisp::quote (pcl::gf)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD GENERIC-FUNCTION-LAMBDA-LIST (GENERIC-FUNCTION))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::gf-fast-method-function-p) (lisp::quote ((pcl::gf lisp::standard-generic-function)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::arg-info)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 99 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD GF-FAST-METHOD-FUNCTION-P (STANDARD-GENERIC-FUNCTION))|) 38 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::gf-fast-method-function-p) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-generic-function)) (lisp::quote (pcl::gf)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD GF-FAST-METHOD-FUNCTION-P (STANDARD-GENERIC-FUNCTION))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil pcl::arg-info)) :pv-table-symbol #14=#:|pv-table|)))) (lisp::quote #14#)) (pcl::proclaim-defgeneric (lisp::quote pcl::initialize-instance) (lisp::quote ((pcl::gf lisp::standard-generic-function) lisp::&key #15=(pcl::lambda-list lisp::nil pcl::lambda-list-p) pcl::argument-precedence-order))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::arg-info)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 101 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD INITIALIZE-INSTANCE :AFTER (STANDARD-GENERIC-FUNCTION))|) 39 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::initialize-instance) (lisp::quote (:after)) (lisp::quote (lisp::standard-generic-function)) (lisp::quote (pcl::gf lisp::&key #15# pcl::argument-precedence-order)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD INITIALIZE-INSTANCE :AFTER (STANDARD-GENERIC-FUNCTION))|) (lisp::quote (:plist (:arg-info (1 . lisp::t) :slot-name-lists ((lisp::nil pcl::arg-info)) :pv-table-symbol #16=#:|pv-table|)))) (lisp::quote #16#)) (pcl::proclaim-defgeneric (lisp::quote pcl::reinitialize-instance) (lisp::quote ((pcl::gf lisp::standard-generic-function) lisp::&rest pcl::args lisp::&key #17=(pcl::lambda-list lisp::nil pcl::lambda-list-p) #18=(pcl::argument-precedence-order lisp::nil pcl::argument-precedence-order-p)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::arg-info)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 102 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD REINITIALIZE-INSTANCE :AFTER (STANDARD-GENERIC-FUNCTION))|) 40 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::reinitialize-instance) (lisp::quote (:after)) (lisp::quote (lisp::standard-generic-function)) (lisp::quote (pcl::gf lisp::&rest pcl::args lisp::&key #17# #18#)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD REINITIALIZE-INSTANCE :AFTER (STANDARD-GENERIC-FUNCTION))|) (lisp::quote (:plist (:arg-info (1 . lisp::t) :slot-name-lists ((lisp::nil pcl::arg-info)) :pv-table-symbol #19=#:|pv-table|)))) (lisp::quote #19#)) (lisp::proclaim (lisp::quote (lisp::special pcl::*lazy-dfun-compute-p*))) (system::mfsfun (lisp::quote pcl::set-methods) 41 2) (system::mfvfun (lisp::quote pcl::real-add-method) 42 770) (system::mfsfun (lisp::quote pcl::real-remove-method) 43 2) (system::mfsfun (lisp::quote pcl::compute-applicable-methods-function) 44 2) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-applicable-methods) (lisp::quote ((lisp::generic-function lisp::generic-function) pcl::arguments))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD COMPUTE-APPLICABLE-METHODS (GENERIC-FUNCTION T))|) 45 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-applicable-methods) (lisp::quote lisp::nil) (lisp::quote (lisp::generic-function lisp::t)) (lisp::quote (lisp::generic-function pcl::arguments)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-APPLICABLE-METHODS (GENERIC-FUNCTION T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-applicable-methods-using-classes) (lisp::quote ((lisp::generic-function lisp::generic-function) pcl::classes))) (system::mf (lisp::quote pcl::|(FAST-METHOD COMPUTE-APPLICABLE-METHODS-USING-CLASSES (GENERIC-FUNCTION T))|) 46) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-applicable-methods-using-classes) (lisp::quote lisp::nil) (lisp::quote (lisp::generic-function lisp::t)) (lisp::quote (lisp::generic-function pcl::classes)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-APPLICABLE-METHODS-USING-CLASSES (GENERIC-FUNCTION T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (system::mfsfun (lisp::quote pcl::proclaim-incompatible-superclasses) 47 1) (system::mfsfun (lisp::quote pcl::superclasses-compatible-p) 48 2) (lisp::mapc (lisp::function pcl::proclaim-incompatible-superclasses) (lisp::quote ((lisp::built-in-class pcl::std-class lisp::structure-class) (lisp::standard-class pcl::funcallable-standard-class) (lisp::class pcl::eql-specializer pcl::class-eq-specializer lisp::method lisp::method-combination lisp::generic-function pcl::slot-definition) (lisp::number lisp::sequence lisp::character lisp::standard-object lisp::structure-object) (lisp::number lisp::array lisp::character lisp::symbol lisp::standard-object lisp::structure-object) (lisp::complex lisp::float lisp::rational) (lisp::integer lisp::ratio) (lisp::list lisp::vector) (lisp::cons lisp::null) (lisp::string lisp::bit-vector)))) (pcl::proclaim-defgeneric (lisp::quote pcl::same-specializer-p) (lisp::quote ((pcl::specl1 pcl::specializer) (pcl::specl2 pcl::specializer)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SAME-SPECIALIZER-P (SPECIALIZER SPECIALIZER))|) 49 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::same-specializer-p) (lisp::quote lisp::nil) (lisp::quote (pcl::specializer pcl::specializer)) (lisp::quote (pcl::specl1 pcl::specl2)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SAME-SPECIALIZER-P (SPECIALIZER SPECIALIZER))|) (lisp::quote (:plist (:arg-info (2) :constant-value lisp::nil)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::same-specializer-p) (lisp::quote ((pcl::specl1 lisp::class) (pcl::specl2 lisp::class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SAME-SPECIALIZER-P (CLASS CLASS))|) 50 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::same-specializer-p) (lisp::quote lisp::nil) (lisp::quote (lisp::class lisp::class)) (lisp::quote (pcl::specl1 pcl::specl2)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SAME-SPECIALIZER-P (CLASS CLASS))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-class) (lisp::quote ((pcl::specializer lisp::class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SPECIALIZER-CLASS (CLASS))|) 51 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::specializer-class) (lisp::quote lisp::nil) (lisp::quote (lisp::class)) (lisp::quote (pcl::specializer)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SPECIALIZER-CLASS (CLASS))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::same-specializer-p) (lisp::quote ((pcl::specl1 pcl::class-eq-specializer) (pcl::specl2 pcl::class-eq-specializer)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SAME-SPECIALIZER-P (CLASS-EQ-SPECIALIZER CLASS-EQ-SPECIALIZER))|) 52 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::same-specializer-p) (lisp::quote lisp::nil) (lisp::quote (pcl::class-eq-specializer pcl::class-eq-specializer)) (lisp::quote (pcl::specl1 pcl::specl2)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SAME-SPECIALIZER-P (CLASS-EQ-SPECIALIZER CLASS-EQ-SPECIALIZER))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::same-specializer-p) (lisp::quote ((pcl::specl1 pcl::eql-specializer) (pcl::specl2 pcl::eql-specializer)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SAME-SPECIALIZER-P (EQL-SPECIALIZER EQL-SPECIALIZER))|) 53 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::same-specializer-p) (lisp::quote lisp::nil) (lisp::quote (pcl::eql-specializer pcl::eql-specializer)) (lisp::quote (pcl::specl1 pcl::specl2)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SAME-SPECIALIZER-P (EQL-SPECIALIZER EQL-SPECIALIZER))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-class) (lisp::quote ((pcl::specializer pcl::eql-specializer)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (lisp::object)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 110 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SPECIALIZER-CLASS (EQL-SPECIALIZER))|) 54 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::specializer-class) (lisp::quote lisp::nil) (lisp::quote (pcl::eql-specializer)) (lisp::quote (pcl::specializer)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SPECIALIZER-CLASS (EQL-SPECIALIZER))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil lisp::object)) :pv-table-symbol #20=#:|pv-table|)))) (lisp::quote #20#)) (system::*make-special (lisp::quote pcl::*in-gf-arg-info-p*)) (lisp::or (lisp::boundp (lisp::quote pcl::*in-gf-arg-info-p*)) (lisp::setq pcl::*in-gf-arg-info-p* lisp::nil)) (lisp::let ((#21=#:g8621 (lisp::quote pcl::arg-info-reader))) (pcl::|SETF PCL GDEFINITION| (lisp::let ((pcl::mf (pcl::initialize-method-function (pcl::make-internal-reader-method-function (lisp::quote lisp::standard-generic-function) (lisp::quote pcl::arg-info)) lisp::t))) (lisp::function (lisp::lambda (lisp::&rest pcl::args) (lisp::funcall pcl::mf pcl::args lisp::nil)))) #21#)) (system::mf (lisp::quote pcl::types-from-arguments) 55) (system::mfsfun (lisp::quote pcl::get-wrappers-from-classes) 56 4) (system::mf (lisp::quote pcl::sdfun-for-caching) 57) (system::mfsfun (lisp::quote pcl::value-for-caching) 58 2) (system::mfsfun (lisp::quote pcl::default-secondary-dispatch-function) 59 1) (system::mfsfun (lisp::quote pcl::list-eq) 60 2) (system::*make-special (lisp::quote pcl::*std-cam-methods*)) (lisp::or (lisp::boundp (lisp::quote pcl::*std-cam-methods*)) (lisp::setq pcl::*std-cam-methods* lisp::nil)) (system::mf (lisp::quote pcl::compute-applicable-methods-emf) 61) (system::mfsfun (lisp::quote pcl::compute-applicable-methods-emf-std-p) 62 1) (system::*make-special (lisp::quote pcl::*old-c-a-m-gf-methods*)) (lisp::or (lisp::boundp (lisp::quote pcl::*old-c-a-m-gf-methods*)) (lisp::setq pcl::*old-c-a-m-gf-methods* lisp::nil)) (system::mfsfun (lisp::quote pcl::update-all-c-a-m-gf-info) 63 1) (system::mfsfun (lisp::quote pcl::update-gf-info) 64 1) (system::mfsfun (lisp::quote pcl::update-c-a-m-gf-info) 65 1) (system::mfsfun (lisp::quote pcl::update-gf-simple-accessor-type) 66 1) (system::mf (lisp::quote pcl::get-accessor-method-function) 67) (system::mf (lisp::quote pcl::update-slot-value-gf-info) 68) (system::*make-special (lisp::quote pcl::*standard-slot-value-using-class-method*)) (lisp::or (lisp::boundp (lisp::quote pcl::*standard-slot-value-using-class-method*)) (lisp::setq pcl::*standard-slot-value-using-class-method* lisp::nil)) (system::*make-special (lisp::quote pcl::*standard-setf-slot-value-using-class-method*)) (lisp::or (lisp::boundp (lisp::quote pcl::*standard-setf-slot-value-using-class-method*)) (lisp::setq pcl::*standard-setf-slot-value-using-class-method* lisp::nil)) (system::*make-special (lisp::quote pcl::*standard-slot-boundp-using-class-method*)) (lisp::or (lisp::boundp (lisp::quote pcl::*standard-slot-boundp-using-class-method*)) (lisp::setq pcl::*standard-slot-boundp-using-class-method* lisp::nil)) (system::*make-special (lisp::quote pcl::*structure-slot-value-using-class-method*)) (lisp::or (lisp::boundp (lisp::quote pcl::*structure-slot-value-using-class-method*)) (lisp::setq pcl::*structure-slot-value-using-class-method* lisp::nil)) (system::*make-special (lisp::quote pcl::*structure-setf-slot-value-using-class-method*)) (lisp::or (lisp::boundp (lisp::quote pcl::*structure-setf-slot-value-using-class-method*)) (lisp::setq pcl::*structure-setf-slot-value-using-class-method* lisp::nil)) (system::*make-special (lisp::quote pcl::*structure-slot-boundp-using-class-method*)) (lisp::or (lisp::boundp (lisp::quote pcl::*structure-slot-boundp-using-class-method*)) (lisp::setq pcl::*structure-slot-boundp-using-class-method* lisp::nil)) (system::mfsfun (lisp::quote pcl::standard-svuc-method) 69 1) (system::mfsfun (lisp::quote pcl::set-standard-svuc-method) 70 2) (system::mfsfun (lisp::quote pcl::structure-svuc-method) 71 1) (system::mfsfun (lisp::quote pcl::set-structure-svuc-method) 72 2) (system::mfsfun (lisp::quote pcl::update-std-or-str-methods) 73 2) (system::mfsfun (lisp::quote pcl::mec-all-classes-internal) 74 2) (system::mfsfun (lisp::quote pcl::mec-all-classes) 75 2) (system::mfsfun (lisp::quote pcl::mec-all-class-lists) 76 2) (system::mfsfun (lisp::quote pcl::make-emf-cache) 77 5) (system::mm (lisp::quote pcl::class-test) 78) (system::mm (lisp::quote pcl::class-eq-test) 79) (system::mm (lisp::quote pcl::eql-test) 80) (system::mfsfun (lisp::quote pcl::dnet-methods-p) 81 1) (system::mm (lisp::quote pcl::scase) 82) (system::mm (lisp::quote pcl::mcase) 83) (system::mf (lisp::quote pcl::generate-discrimination-net) 84) (system::mfsfun (lisp::quote pcl::class-from-type) 85 1) (system::mfvfun (lisp::quote pcl::precompute-effective-methods) 86 770) (system::mfsfun (lisp::quote pcl::augment-type) 87 2) (system::mf (lisp::quote pcl::generate-discrimination-net-internal) 88) (system::mf (lisp::quote pcl::compute-secondary-dispatch-function) 89) (system::*make-special (lisp::quote pcl::*eq-case-table-limit*)) (lisp::or (lisp::boundp (lisp::quote pcl::*eq-case-table-limit*)) (lisp::setq pcl::*eq-case-table-limit* 15)) (system::*make-special (lisp::quote pcl::*case-table-limit*)) (lisp::or (lisp::boundp (lisp::quote pcl::*case-table-limit*)) (lisp::setq pcl::*case-table-limit* 10)) (system::mfsfun (lisp::quote pcl::compute-mcase-parameters) 90 1) (system::mm (lisp::quote pcl::mlookup) 91) (system::mfsfun (lisp::quote pcl::net-test-converter) 92 1) (system::mf (lisp::quote pcl::net-code-converter) 93) (system::mfsfun (lisp::quote pcl::net-constant-converter) 94 2) (system::mfsfun (lisp::quote pcl::methods-converter) 95 2) (system::mf (lisp::quote pcl::convert-methods) 96) (system::mfsfun (lisp::quote pcl::convert-table) 97 3) (system::mfvfun (lisp::quote pcl::compute-secondary-dispatch-function1) 98 770) (system::*make-special (lisp::quote pcl::*show-make-unordered-methods-emf-calls*)) (lisp::or (lisp::boundp (lisp::quote pcl::*show-make-unordered-methods-emf-calls*)) (lisp::setq pcl::*show-make-unordered-methods-emf-calls* lisp::nil)) (system::mfsfun (lisp::quote pcl::make-unordered-methods-emf) 99 2) (system::mf (lisp::quote pcl::slot-value-using-class-dfun) 100) (system::mf (lisp::quote pcl::setf-slot-value-using-class-dfun) 101) (system::mf (lisp::quote pcl::slot-boundp-using-class-dfun) 102) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-discriminating-function) (lisp::quote ((pcl::gf lisp::standard-generic-function)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::dfun-state pcl::dfun-state pcl::arg-info pcl::dfun-state)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 198 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD COMPUTE-DISCRIMINATING-FUNCTION (STANDARD-GENERIC-FUNCTION))|) 103) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-discriminating-function) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-generic-function)) (lisp::quote (pcl::gf)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-DISCRIMINATING-FUNCTION (STANDARD-GENERIC-FUNCTION))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil pcl::arg-info pcl::dfun-state)) :pv-table-symbol #22=#:|pv-table|)))) (lisp::quote #22#)) (pcl::proclaim-defgeneric (lisp::quote pcl::update-gf-dfun) (lisp::quote ((lisp::class pcl::std-class) pcl::gf))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD UPDATE-GF-DFUN (STD-CLASS T))|) 104 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::update-gf-dfun) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class lisp::t)) (lisp::quote (lisp::class pcl::gf)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD UPDATE-GF-DFUN (STD-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::function-keywords) (lisp::quote ((lisp::method lisp::standard-method)))) (system::mf (lisp::quote pcl::|(FAST-METHOD FUNCTION-KEYWORDS (STANDARD-METHOD))|) 105) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::function-keywords) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method)) (lisp::quote (lisp::method)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD FUNCTION-KEYWORDS (STANDARD-METHOD))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (system::mfsfun (lisp::quote pcl::method-ll->generic-function-ll) 106 1) (pcl::proclaim-defgeneric (lisp::quote pcl::generic-function-pretty-arglist) (lisp::quote ((lisp::generic-function lisp::standard-generic-function)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD GENERIC-FUNCTION-PRETTY-ARGLIST (STANDARD-GENERIC-FUNCTION))|) 107 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::generic-function-pretty-arglist) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-generic-function)) (lisp::quote (lisp::generic-function)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD GENERIC-FUNCTION-PRETTY-ARGLIST (STANDARD-GENERIC-FUNCTION))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::method-pretty-arglist) (lisp::quote ((lisp::method lisp::standard-method)))) (system::mf (lisp::quote pcl::|(FAST-METHOD METHOD-PRETTY-ARGLIST (STANDARD-METHOD))|) 108) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::method-pretty-arglist) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-method)) (lisp::quote (lisp::method)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD METHOD-PRETTY-ARGLIST (STANDARD-METHOD))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (system::debug (lisp::quote pcl::named-object-print-function) (lisp::quote (pcl::instance lisp::stream pcl::extra))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STANDARD-SLOT-DEFINITION T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::slotd lisp::nil pcl::.rest-arg.))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STRUCTURE-SLOT-DEFINITION T))|) (lisp::quote (pcl::.key. pcl::allocation))) (system::debug (lisp::quote pcl::|(FAST-METHOD METHOD-FUNCTION (STANDARD-METHOD))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::method))) (system::debug (lisp::quote pcl::|(FAST-METHOD LEGAL-QUALIFIERS-P (STANDARD-METHOD T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::object pcl::x))) (system::debug (lisp::quote pcl::|(FAST-METHOD LEGAL-SPECIALIZERS-P (STANDARD-METHOD T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::object pcl::x))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (STANDARD-METHOD T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::method lisp::nil pcl::.rest-arg. pcl::qualifiers pcl::lambda-list pcl::specializers lisp::function pcl::fast-function pcl::documentation))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (STANDARD-ACCESSOR-METHOD T))|) (lisp::quote (pcl::slot-name pcl::slot-definition))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STANDARD-METHOD T))|) (lisp::quote (pcl::qualifiers))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STANDARD-ACCESSOR-METHOD T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::method lisp::nil pcl::.rest-arg.))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (STANDARD-GENERIC-FUNCTION T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::generic-function lisp::nil pcl::.rest-arg. pcl::.key. pcl::name pcl::.key. lisp::nil lisp::nil lisp::nil lisp::nil pcl::.key. pcl::method-class pcl::.key. lisp::method-combination))) (system::debug (lisp::quote pcl::|(FAST-METHOD REMOVE-NAMED-METHOD (T T))|) (lisp::quote (pcl::extra))) (system::debug (lisp::quote pcl::real-add-named-method) (lisp::quote (pcl::generic-function-name pcl::qualifiers pcl::specializers pcl::lambda-list pcl::other-initargs))) (system::debug (lisp::quote pcl::make-specializable) (lisp::quote (pcl::function-name pcl::arglist pcl::arglistp))) (system::debug (lisp::quote pcl::real-get-method) (lisp::quote (lisp::generic-function pcl::qualifiers pcl::specializers pcl::errorp))) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-DISCRIMINATING-FUNCTION-ARGLIST-INFO (STANDARD-GENERIC-FUNCTION))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::generic-function lisp::method))) (system::debug (lisp::quote pcl::compute-discriminating-function-arglist-info-internal) (lisp::quote (lisp::nil lisp::method pcl::number-of-requireds pcl::restp pcl::specialized-argument-positions #:g8437 pcl::arg))) (system::debug (lisp::quote pcl::|(FAST-METHOD INITIALIZE-INSTANCE :AFTER (STANDARD-GENERIC-FUNCTION))|) (lisp::quote (pcl::.key. pcl::lambda-list pcl::argument-precedence-order))) (system::debug (lisp::quote pcl::|(FAST-METHOD REINITIALIZE-INSTANCE :AFTER (STANDARD-GENERIC-FUNCTION))|) (lisp::quote (pcl::.key. pcl::lambda-list pcl::.key. pcl::argument-precedence-order))) (system::debug (lisp::quote pcl::real-add-method) (lisp::quote (lisp::generic-function lisp::method pcl::specializers pcl::existing #:g8516))) (system::debug (lisp::quote pcl::real-remove-method) (lisp::quote (pcl::name pcl::specializers pcl::methods pcl::new-methods #:g8524 pcl::specializer))) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-APPLICABLE-METHODS-USING-CLASSES (GENERIC-FUNCTION T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::generic-function pcl::classes))) (system::debug (lisp::quote pcl::proclaim-incompatible-superclasses) (lisp::quote (lisp::class pcl::other-class #:g8552))) (system::debug (lisp::quote pcl::superclasses-compatible-p) (lisp::quote (pcl::sc1 #:g8561 pcl::ic))) (system::debug (lisp::quote pcl::types-from-arguments) (lisp::quote (lisp::generic-function pcl::arguments pcl::type-modifier #:g8629))) (system::debug (lisp::quote pcl::get-wrappers-from-classes) (lisp::quote (#:g8632 lisp::class))) (system::debug (lisp::quote pcl::sdfun-for-caching) (lisp::quote (pcl::gf pcl::classes))) (system::debug (lisp::quote pcl::default-secondary-dispatch-function) (lisp::quote (lisp::generic-function))) (system::debug (lisp::quote pcl::compute-applicable-methods-emf) (lisp::quote (lisp::generic-function pcl::cam pcl::cam-methods))) (system::debug (lisp::quote pcl::update-all-c-a-m-gf-info) (lisp::quote (pcl::methods pcl::gfs-to-do pcl::gf-classes-to-do lisp::method #:g8644))) (system::debug (lisp::quote pcl::update-gf-simple-accessor-type) (lisp::quote (pcl::methods lisp::class lisp::type #:g8648 lisp::method))) (system::debug (lisp::quote pcl::get-accessor-method-function) (lisp::quote (pcl::gf lisp::type lisp::class pcl::slotd pcl::std-method pcl::str-method pcl::types1 pcl::types pcl::methods pcl::std-p lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil lisp::method))) (system::debug (lisp::quote pcl::update-slot-value-gf-info) (lisp::quote (pcl::gf lisp::type))) (system::debug (lisp::quote pcl::update-std-or-str-methods) (lisp::quote (#:g8662 lisp::method))) (system::debug (lisp::quote pcl::mec-all-classes) (lisp::quote (pcl::a-classes pcl::c))) (system::debug (lisp::quote pcl::mec-all-class-lists) (lisp::quote (pcl::car-all-classes pcl::all-class-lists))) (system::debug (lisp::quote pcl::make-emf-cache) (lisp::quote (pcl::new-class pcl::cache pcl::valuep lisp::generic-function pcl::arg-info pcl::nkeys pcl::metatypes pcl::wrappers pcl::precompute-p pcl::default #:g8677 lisp::method))) (system::debug (lisp::quote pcl::generate-discrimination-net) (lisp::quote (lisp::generic-function pcl::methods pcl::types pcl::sorted-p pcl::arg-info pcl::precedence))) (system::debug (lisp::quote pcl::class-from-type) (lisp::quote (#:g8690 lisp::type))) (system::debug (lisp::quote pcl::precompute-effective-methods) (lisp::quote (pcl::gf pcl::methods pcl::classes-list-p lisp::nil pcl::classes-list))) (system::debug (lisp::quote pcl::generate-discrimination-net-internal) (lisp::quote (pcl::gf pcl::methods pcl::types pcl::methods-function pcl::test-function pcl::type-function pcl::arg-info pcl::precedence pcl::nreq pcl::metatypes))) (system::debug (lisp::quote pcl::compute-secondary-dispatch-function) (lisp::quote (lisp::generic-function pcl::net pcl::method-alist pcl::wrappers))) (system::debug (lisp::quote pcl::compute-mcase-parameters) (lisp::quote (pcl::eq-p pcl::len lisp::type lisp::case))) (system::debug (lisp::quote pcl::net-code-converter) (lisp::quote (pcl::form))) (system::debug (lisp::quote pcl::net-constant-converter) (lisp::quote (pcl::mp lisp::list pcl::default))) (system::debug (lisp::quote pcl::convert-methods) (lisp::quote (pcl::constant pcl::method-alist pcl::wrappers))) (system::debug (lisp::quote pcl::convert-table) (lisp::quote (pcl::k+m #:g8717 #:g8719))) (system::debug (lisp::quote pcl::compute-secondary-dispatch-function1) (lisp::quote (lisp::generic-function pcl::net pcl::function-p pcl::applyp pcl::fmc-arg-info pcl::cfunction pcl::constants))) (system::debug (lisp::quote pcl::make-unordered-methods-emf) (lisp::quote (pcl::methods lisp::generic-function))) (system::debug (lisp::quote pcl::slot-value-using-class-dfun) (lisp::quote (lisp::nil lisp::object pcl::slotd))) (system::debug (lisp::quote pcl::setf-slot-value-using-class-dfun) (lisp::quote (pcl::new-value lisp::nil lisp::object pcl::slotd))) (system::debug (lisp::quote pcl::slot-boundp-using-class-dfun) (lisp::quote (lisp::nil lisp::object pcl::slotd))) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-DISCRIMINATING-FUNCTION (STANDARD-GENERIC-FUNCTION))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::gf))) (system::debug (lisp::quote pcl::|(FAST-METHOD FUNCTION-KEYWORDS (STANDARD-METHOD))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::method))) (system::debug (lisp::quote pcl::method-ll->generic-function-ll) (lisp::quote (pcl::keyword-parameters))) (system::debug (lisp::quote pcl::|(FAST-METHOD GENERIC-FUNCTION-PRETTY-ARGLIST (STANDARD-GENERIC-FUNCTION))|) (lisp::quote (#:g8795 pcl::m))) (system::debug (lisp::quote pcl::|(FAST-METHOD METHOD-PRETTY-ARGLIST (STANDARD-METHOD))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::method pcl::arg))))))
)
