       
#(#! 
(lisp::in-package :pcl)
#(pcl::class-eq-specializer-p #0=(lisp::object) pcl::classp #1=(lisp::object) pcl::eql-specializer-p #2=(lisp::object) pcl::exact-class-specializer-p #3=(lisp::object) pcl::forward-referenced-class-p #4=(lisp::object) pcl::funcallable-standard-class-p #5=(lisp::object) pcl::generic-function-p #6=(lisp::object) pcl::legal-lambda-list-p #7=(lisp::object pcl::x) pcl::method-combination-p #8=(lisp::object) pcl::method-p #9=(lisp::object) pcl::short-method-combination-p #10=(lisp::object) pcl::long-method-combination-p #11=(lisp::object) pcl::slot-class-p #12=(lisp::object) pcl::specializerp #13=(lisp::object) pcl::standard-accessor-method-p #14=(lisp::object) pcl::standard-boundp-method-p #15=(lisp::object) pcl::standard-class-p #16=(lisp::object) pcl::standard-generic-function-p #17=(lisp::object) pcl::standard-method-p #18=(lisp::object) pcl::standard-reader-method-p #19=(lisp::object) pcl::standard-writer-method-p #20=(lisp::object) pcl::structure-class-p #21=(lisp::object) pcl::accessor-method-slot-definition #22=(pcl::standard-accessor-method) pcl::class-can-precede-list #23=(pcl::pcl-class) pcl::class-defstruct-constructor #24=(lisp::structure-class) pcl::class-defstruct-form #25=(lisp::structure-class) pcl::class-direct-subclasses #26=(lisp::class) pcl::class-direct-superclasses #27=(lisp::class) pcl::class-eq-specializer #28=(lisp::class) pcl::class-incompatible-superclass-list #29=(pcl::pcl-class) pcl::class-initialize-info #30=(pcl::slot-class) pcl::class-name #31=(lisp::class) pcl::class-precedence-list #32=(pcl::pcl-class) pcl::class-predicate-name #33=(lisp::class) pcl::class-wrapper #34=(pcl::pcl-class) pcl::definition-source #35=(pcl::definition-source-mixin) pcl::eql-specializer-object #36=(pcl::eql-specializer) pcl::generic-function-declarations #37=(lisp::standard-generic-function) pcl::generic-function-method-class #38=(lisp::standard-generic-function) pcl::generic-function-method-combination #39=(lisp::standard-generic-function) pcl::generic-function-methods #40=(lisp::standard-generic-function) pcl::generic-function-name #41=(lisp::standard-generic-function) pcl::generic-function-argument-precedence-order #42=(lisp::generic-function) pcl::gf-arg-info #43=(lisp::standard-generic-function) pcl::gf-dfun-state #44=(lisp::standard-generic-function) pcl::gf-pretty-arglist #45=(lisp::standard-generic-function) pcl::long-method-combination-function #46=(pcl::long-method-combination) pcl::method-combination-documentation #47=(pcl::standard-method-combination) pcl::method-combination-options #48=(pcl::standard-method-combination) pcl::method-combination-type #49=(pcl::standard-method-combination) pcl::method-fast-function #50=(lisp::standard-method) pcl::method-generic-function #51=(lisp::standard-method) pcl::object-plist #52=(pcl::plist-mixin) pcl::short-combination-identity-with-one-argument #53=(pcl::short-method-combination) pcl::short-combination-operator #54=(pcl::short-method-combination) pcl::slot-definition-boundp-function #55=(pcl::effective-slot-definition) pcl::slot-definition-class #56=(pcl::slot-definition) pcl::slot-definition-defstruct-accessor-symbol #57=(pcl::structure-slot-definition) pcl::slot-definition-initargs #58=(pcl::slot-definition) pcl::slot-definition-initform #59=(pcl::slot-definition) pcl::slot-definition-initfunction #60=(pcl::slot-definition) pcl::slot-definition-internal-reader-function #61=(pcl::structure-slot-definition) pcl::slot-definition-internal-writer-function #62=(pcl::structure-slot-definition) pcl::slot-definition-location #63=(pcl::standard-effective-slot-definition) pcl::slot-definition-name #64=(pcl::slot-definition) pcl::slot-definition-reader-function #65=(pcl::effective-slot-definition) pcl::slot-definition-readers #66=(pcl::slot-definition) pcl::slot-definition-type #67=(pcl::slot-definition) pcl::slot-definition-writer-function #68=(pcl::effective-slot-definition) pcl::slot-definition-writers #69=(pcl::slot-definition) pcl::specializer-object #70=(pcl::class-eq-specializer) pcl::specializer-type #71=(pcl::specializer) #72=(lisp::setf pcl::class-defstruct-constructor) #73=(pcl::new-value lisp::structure-class) #74=(lisp::setf pcl::class-defstruct-form) #75=(pcl::new-value lisp::structure-class) #76=(lisp::setf pcl::class-direct-slots) #77=(pcl::new-value pcl::slot-class) #78=(lisp::setf pcl::class-incompatible-superclass-list) #79=(pcl::new-value pcl::pcl-class) #80=(lisp::setf pcl::class-initialize-info) #81=(pcl::new-value pcl::slot-class) #82=(lisp::setf pcl::class-name) #83=(pcl::new-value lisp::class) #84=(lisp::setf pcl::class-slots) #85=(pcl::new-value pcl::slot-class) #86=(lisp::setf pcl::generic-function-method-class) #87=(pcl::new-value lisp::standard-generic-function) #88=(lisp::setf pcl::generic-function-method-combination) #89=(pcl::new-value lisp::standard-generic-function) #90=(lisp::setf pcl::generic-function-declarations) #91=(pcl::new-value lisp::standard-generic-function) #92=(lisp::setf pcl::generic-function-methods) #93=(pcl::new-value lisp::standard-generic-function) #94=(lisp::setf pcl::generic-function-name) #95=(pcl::new-value lisp::standard-generic-function) #96=(lisp::setf pcl::gf-dfun-state) #97=(pcl::new-value lisp::standard-generic-function) #98=(lisp::setf pcl::gf-pretty-arglist) #99=(pcl::new-value lisp::standard-generic-function) #100=(lisp::setf pcl::method-generic-function) #101=(pcl::new-value lisp::standard-method) #102=(lisp::setf pcl::object-plist) #103=(pcl::new-value pcl::plist-mixin) #104=(lisp::setf pcl::slot-definition-allocation) #105=(pcl::new-value pcl::standard-slot-definition) #106=(lisp::setf pcl::slot-definition-boundp-function) #107=(pcl::new-value pcl::effective-slot-definition) #108=(lisp::setf pcl::slot-definition-class) #109=(pcl::new-value pcl::slot-definition) #110=(lisp::setf pcl::slot-definition-defstruct-accessor-symbol) #111=(pcl::new-value pcl::structure-slot-definition) #112=(lisp::setf pcl::slot-definition-initargs) #113=(pcl::new-value pcl::slot-definition) #114=(lisp::setf pcl::slot-definition-initform) #115=(pcl::new-value pcl::slot-definition) #116=(lisp::setf pcl::slot-definition-initfunction) #117=(pcl::new-value pcl::slot-definition) #118=(lisp::setf pcl::slot-definition-internal-reader-function) #119=(pcl::new-value pcl::structure-slot-definition) #120=(lisp::setf pcl::slot-definition-internal-writer-function) #121=(pcl::new-value pcl::structure-slot-definition) #122=(lisp::setf pcl::slot-definition-location) #123=(pcl::new-value pcl::standard-effective-slot-definition) #124=(lisp::setf pcl::slot-definition-name) #125=(pcl::new-value pcl::slot-definition) #126=(lisp::setf pcl::slot-definition-reader-function) #127=(pcl::new-value pcl::effective-slot-definition) #128=(lisp::setf pcl::slot-definition-readers) #129=(pcl::new-value pcl::slot-definition) #130=(lisp::setf pcl::slot-definition-type) #131=(pcl::new-value pcl::slot-definition) #132=(lisp::setf pcl::slot-definition-writer-function) #133=(pcl::new-value pcl::effective-slot-definition) #134=(lisp::setf pcl::slot-definition-writers) #135=(pcl::new-value pcl::slot-definition) pcl::accessor-method-class #136=(lisp::method) pcl::accessor-method-slot-name #137=(pcl::m) pcl::class-constructors #138=(lisp::class) pcl::class-default-initargs #139=(lisp::class) pcl::class-direct-default-initargs #140=(lisp::class) pcl::class-direct-slots #141=(lisp::class) pcl::class-finalized-p #142=(lisp::class) pcl::class-prototype #143=(lisp::class) pcl::class-slot-cells #144=(lisp::class) pcl::class-slots #145=(lisp::class) pcl::compute-class-precedence-list #146=(pcl::root) pcl::compute-default-initargs #147=(lisp::class) pcl::compute-discriminating-function #148=(pcl::gf) pcl::compute-discriminating-function-arglist-info #149=(lisp::generic-function) pcl::compute-slots #150=(lisp::class) pcl::finalize-inheritance #151=(lisp::class) pcl::function-keywords #152=(lisp::method) pcl::generic-function-lambda-list #153=(pcl::gf) pcl::generic-function-pretty-arglist #154=(lisp::generic-function) pcl::gf-fast-method-function-p #155=(pcl::gf) pcl::initialize-internal-slot-functions #156=(pcl::slotd) pcl::make-instances-obsolete #157=(lisp::class) pcl::method-function #158=(lisp::method) pcl::method-lambda-list #159=(pcl::m) pcl::method-pretty-arglist #160=(lisp::method) pcl::method-qualifiers #161=(pcl::m) pcl::method-specializers #162=(pcl::m) pcl::raw-instance-allocator #163=(lisp::class) pcl::slot-definition-allocation #164=(pcl::slotd) pcl::slots-fetcher #165=(lisp::class) pcl::specializer-class #166=(pcl::specializer) pcl::specializer-direct-generic-functions #167=(pcl::specializer) pcl::specializer-direct-methods #168=(pcl::specializer) pcl::specializer-method-table #169=(pcl::specializer) pcl::update-constructors #170=(lisp::class) pcl::wrapper-fetcher #171=(lisp::class) pcl::add-dependent #172=(pcl::metaobject pcl::dependent) pcl::add-direct-method #173=(pcl::specializer lisp::method) pcl::add-direct-subclass #174=(lisp::class pcl::subclass) pcl::add-method #175=(lisp::generic-function lisp::method) pcl::change-class #176=(pcl::instance pcl::new-class-name lisp::&key lisp::&allow-other-keys) pcl::class-slot-value #177=(lisp::class pcl::slot-name) pcl::compatible-meta-class-change-p #178=(lisp::class pcl::proto-new-class) pcl::compute-applicable-methods #179=(lisp::generic-function pcl::arguments) pcl::compute-applicable-methods-using-classes #180=(lisp::generic-function pcl::classes) pcl::compute-effective-slot-definition #181=(lisp::class pcl::dslotds) pcl::compute-effective-slot-definition-initargs #182=(lisp::class pcl::direct-slotds) pcl::default-initargs #183=(lisp::class pcl::supplied-initargs) pcl::describe-object #184=(lisp::object lisp::stream) pcl::direct-slot-definition-class #185=(lisp::class pcl::initargs) pcl::effective-slot-definition-class #186=(lisp::class pcl::initargs) pcl::inform-type-system-about-class #187=(lisp::class pcl::name) pcl::legal-documentation-p #188=(lisp::object pcl::x) pcl::legal-method-function-p #189=(lisp::object pcl::x) pcl::legal-qualifier-p #190=(lisp::object pcl::x) pcl::legal-qualifiers-p #191=(lisp::object pcl::x) pcl::legal-slot-name-p #192=(lisp::object pcl::x) pcl::legal-specializer-p #193=(lisp::object pcl::x) pcl::legal-specializers-p #194=(lisp::object pcl::x) pcl::make-boundp-method-function #195=(lisp::class pcl::slot-name) pcl::make-reader-method-function #196=(lisp::class pcl::slot-name) pcl::make-writer-method-function #197=(lisp::class pcl::slot-name) pcl::map-dependents #198=(pcl::metaobject lisp::function) pcl::no-next-method #199=(lisp::generic-function lisp::method lisp::&rest pcl::args) pcl::print-object #200=(pcl::mc lisp::stream) pcl::remove-boundp-method #201=(lisp::class lisp::generic-function) pcl::remove-dependent #202=(pcl::metaobject pcl::dependent) pcl::remove-direct-method #203=(pcl::specializer lisp::method) pcl::remove-direct-subclass #204=(lisp::class pcl::subclass) pcl::remove-method #205=(lisp::generic-function lisp::method) pcl::remove-reader-method #206=(lisp::class lisp::generic-function) pcl::remove-writer-method #207=(lisp::class lisp::generic-function) pcl::same-specializer-p #208=(pcl::specl1 pcl::specl2) pcl::slot-accessor-function #209=(pcl::slotd lisp::type) pcl::slot-accessor-std-p #210=(pcl::slotd lisp::type) pcl::slots-to-inspect #211=(lisp::class lisp::object) pcl::update-gf-dfun #212=(lisp::class pcl::gf) pcl::validate-superclass #213=(pcl::fsc lisp::class) pcl::add-boundp-method #214=(lisp::class lisp::generic-function pcl::slot-name) pcl::add-reader-method #215=(lisp::class lisp::generic-function pcl::slot-name) pcl::add-writer-method #216=(lisp::class lisp::generic-function pcl::slot-name) #217=(lisp::setf pcl::class-slot-value) #218=(pcl::nv lisp::class pcl::slot-name) pcl::compute-effective-method #219=(lisp::generic-function pcl::combin pcl::applicable-methods) pcl::compute-slot-accessor-info #220=(pcl::slotd lisp::type pcl::gf) pcl::find-method-combination #221=(lisp::generic-function lisp::type pcl::options) #222=(lisp::setf pcl::slot-accessor-function) #223=(lisp::function pcl::slotd lisp::type) #224=(lisp::setf pcl::slot-accessor-std-p) #225=(pcl::value pcl::slotd lisp::type) pcl::slot-boundp-using-class #226=(lisp::class lisp::object pcl::slotd) pcl::slot-makunbound-using-class #227=(lisp::class lisp::object pcl::slotd) pcl::slot-unbound #228=(lisp::class pcl::instance pcl::slot-name) pcl::slot-value-using-class #229=(lisp::class lisp::object pcl::slotd) pcl::make-method-lambda #230=(pcl::proto-generic-function pcl::proto-method pcl::lambda-expression pcl::environment) #231=(lisp::setf pcl::slot-value-using-class) #232=(pcl::new-value lisp::class lisp::object pcl::slotd) pcl::make-method-initargs-form #233=(pcl::proto-generic-function pcl::proto-method pcl::lambda-expression pcl::lambda-list pcl::environment) pcl::get-method #234=(lisp::generic-function pcl::qualifiers pcl::specializers lisp::&optional pcl::errorp) pcl::find-method #235=(lisp::generic-function pcl::qualifiers pcl::specializers lisp::&optional pcl::errorp) #236=(lisp::setf pcl::documentation) #237=(pcl::new-value pcl::slotd lisp::&optional pcl::doc-type) pcl::documentation #238=(pcl::slotd lisp::&optional pcl::doc-type) pcl::remove-named-method #239=(pcl::generic-function-name pcl::argument-specifiers lisp::&optional pcl::extra) pcl::slot-missing #240=(lisp::class pcl::instance pcl::slot-name pcl::operation lisp::&optional pcl::new-value) pcl::allocate-instance #241=(lisp::class lisp::&rest pcl::initargs) pcl::ensure-class-using-class #242=(pcl::name lisp::class lisp::&rest pcl::args lisp::&key lisp::&allow-other-keys) pcl::ensure-generic-function-using-class #243=(lisp::generic-function pcl::function-specifier lisp::&key lisp::&allow-other-keys) pcl::initialize-instance #244=(pcl::gf lisp::&key lisp::&allow-other-keys) pcl::make-instance #245=(lisp::class lisp::&rest pcl::initargs) pcl::no-applicable-method #246=(lisp::generic-function lisp::&rest pcl::args) pcl::no-primary-method #247=(lisp::generic-function lisp::&rest pcl::args) pcl::reader-method-class #248=(lisp::class pcl::direct-slot lisp::&rest pcl::initargs) pcl::reinitialize-instance #249=(pcl::gf lisp::&rest pcl::args lisp::&key lisp::&allow-other-keys) pcl::shared-initialize #250=(lisp::generic-function pcl::slot-names lisp::&key lisp::&allow-other-keys) pcl::update-dependent #251=(pcl::metaobject pcl::dependent lisp::&rest pcl::initargs) pcl::update-instance-for-different-class #252=(pcl::previous pcl::current lisp::&rest pcl::initargs) pcl::update-instance-for-redefined-class #253=(pcl::instance pcl::added-slots pcl::discarded-slots pcl::property-list lisp::&rest pcl::initargs) pcl::writer-method-class #254=(lisp::class pcl::direct-slot lisp::&rest pcl::initargs) pcl::load-defgeneric (system::%init . #((pcl::proclaim-defgeneric (lisp::quote pcl::class-eq-specializer-p) (lisp::quote #0#)) (system::mf (lisp::quote #255=#:|(DEFGENERIC CLASS-EQ-SPECIALIZER-P)6252|) 0) (#255#) (lisp::function pcl::class-eq-specializer-p) (pcl::proclaim-defgeneric (lisp::quote pcl::classp) (lisp::quote #1#)) (system::mf (lisp::quote #256=#:|(DEFGENERIC CLASSP)6252|) 1) (#256#) (lisp::function pcl::classp) (pcl::proclaim-defgeneric (lisp::quote pcl::eql-specializer-p) (lisp::quote #2#)) (system::mf (lisp::quote #257=#:|(DEFGENERIC EQL-SPECIALIZER-P)6252|) 2) (#257#) (lisp::function pcl::eql-specializer-p) (pcl::proclaim-defgeneric (lisp::quote pcl::exact-class-specializer-p) (lisp::quote #3#)) (system::mf (lisp::quote #258=#:|(DEFGENERIC EXACT-CLASS-SPECIALIZER-P)6252|) 3) (#258#) (lisp::function pcl::exact-class-specializer-p) (pcl::proclaim-defgeneric (lisp::quote pcl::forward-referenced-class-p) (lisp::quote #4#)) (system::mf (lisp::quote #259=#:|(DEFGENERIC FORWARD-REFERENCED-CLASS-P)6252|) 4) (#259#) (lisp::function pcl::forward-referenced-class-p) (pcl::proclaim-defgeneric (lisp::quote pcl::funcallable-standard-class-p) (lisp::quote #5#)) (system::mf (lisp::quote #260=#:|(DEFGENERIC FUNCALLABLE-STANDARD-CLASS-P)6252|) 5) (#260#) (lisp::function pcl::funcallable-standard-class-p) (pcl::proclaim-defgeneric (lisp::quote pcl::generic-function-p) (lisp::quote #6#)) (system::mf (lisp::quote #261=#:|(DEFGENERIC GENERIC-FUNCTION-P)6252|) 6) (#261#) (lisp::function pcl::generic-function-p) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-lambda-list-p) (lisp::quote #7#)) (system::mf (lisp::quote #262=#:|(DEFGENERIC LEGAL-LAMBDA-LIST-P)6252|) 7) (#262#) (lisp::function pcl::legal-lambda-list-p) (pcl::proclaim-defgeneric (lisp::quote pcl::method-combination-p) (lisp::quote #8#)) (system::mf (lisp::quote #263=#:|(DEFGENERIC METHOD-COMBINATION-P)6252|) 8) (#263#) (lisp::function pcl::method-combination-p) (pcl::proclaim-defgeneric (lisp::quote pcl::method-p) (lisp::quote #9#)) (system::mf (lisp::quote #264=#:|(DEFGENERIC METHOD-P)6252|) 9) (#264#) (lisp::function pcl::method-p) (pcl::proclaim-defgeneric (lisp::quote pcl::short-method-combination-p) (lisp::quote #10#)) (system::mf (lisp::quote #265=#:|(DEFGENERIC SHORT-METHOD-COMBINATION-P)6252|) 10) (#265#) (lisp::function pcl::short-method-combination-p) (pcl::proclaim-defgeneric (lisp::quote pcl::long-method-combination-p) (lisp::quote #11#)) (system::mf (lisp::quote #266=#:|(DEFGENERIC LONG-METHOD-COMBINATION-P)6252|) 11) (#266#) (lisp::function pcl::long-method-combination-p) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-class-p) (lisp::quote #12#)) (system::mf (lisp::quote #267=#:|(DEFGENERIC SLOT-CLASS-P)6252|) 12) (#267#) (lisp::function pcl::slot-class-p) (pcl::proclaim-defgeneric (lisp::quote pcl::specializerp) (lisp::quote #13#)) (system::mf (lisp::quote #268=#:|(DEFGENERIC SPECIALIZERP)6252|) 13) (#268#) (lisp::function pcl::specializerp) (pcl::proclaim-defgeneric (lisp::quote pcl::standard-accessor-method-p) (lisp::quote #14#)) (system::mf (lisp::quote #269=#:|(DEFGENERIC STANDARD-ACCESSOR-METHOD-P)6252|) 14) (#269#) (lisp::function pcl::standard-accessor-method-p) (pcl::proclaim-defgeneric (lisp::quote pcl::standard-boundp-method-p) (lisp::quote #15#)) (system::mf (lisp::quote #270=#:|(DEFGENERIC STANDARD-BOUNDP-METHOD-P)6252|) 15) (#270#) (lisp::function pcl::standard-boundp-method-p) (pcl::proclaim-defgeneric (lisp::quote pcl::standard-class-p) (lisp::quote #16#)) (system::mf (lisp::quote #271=#:|(DEFGENERIC STANDARD-CLASS-P)6252|) 16) (#271#) (lisp::function pcl::standard-class-p) (pcl::proclaim-defgeneric (lisp::quote pcl::standard-generic-function-p) (lisp::quote #17#)) (system::mf (lisp::quote #272=#:|(DEFGENERIC STANDARD-GENERIC-FUNCTION-P)6252|) 17) (#272#) (lisp::function pcl::standard-generic-function-p) (pcl::proclaim-defgeneric (lisp::quote pcl::standard-method-p) (lisp::quote #18#)) (system::mf (lisp::quote #273=#:|(DEFGENERIC STANDARD-METHOD-P)6252|) 18) (#273#) (lisp::function pcl::standard-method-p) (pcl::proclaim-defgeneric (lisp::quote pcl::standard-reader-method-p) (lisp::quote #19#)) (system::mf (lisp::quote #274=#:|(DEFGENERIC STANDARD-READER-METHOD-P)6252|) 19) (#274#) (lisp::function pcl::standard-reader-method-p) (pcl::proclaim-defgeneric (lisp::quote pcl::standard-writer-method-p) (lisp::quote #20#)) (system::mf (lisp::quote #275=#:|(DEFGENERIC STANDARD-WRITER-METHOD-P)6252|) 20) (#275#) (lisp::function pcl::standard-writer-method-p) (pcl::proclaim-defgeneric (lisp::quote pcl::structure-class-p) (lisp::quote #21#)) (system::mf (lisp::quote #276=#:|(DEFGENERIC STRUCTURE-CLASS-P)6252|) 21) (#276#) (lisp::function pcl::structure-class-p) (pcl::proclaim-defgeneric (lisp::quote pcl::accessor-method-slot-definition) (lisp::quote #22#)) (system::mf (lisp::quote #277=#:|(DEFGENERIC ACCESSOR-METHOD-SLOT-DEFINITION)6252|) 22) (#277#) (lisp::function pcl::accessor-method-slot-definition) (pcl::proclaim-defgeneric (lisp::quote pcl::class-can-precede-list) (lisp::quote #23#)) (system::mf (lisp::quote #278=#:|(DEFGENERIC CLASS-CAN-PRECEDE-LIST)6252|) 23) (#278#) (lisp::function pcl::class-can-precede-list) (pcl::proclaim-defgeneric (lisp::quote pcl::class-defstruct-constructor) (lisp::quote #24#)) (system::mf (lisp::quote #279=#:|(DEFGENERIC CLASS-DEFSTRUCT-CONSTRUCTOR)6252|) 24) (#279#) (lisp::function pcl::class-defstruct-constructor) (pcl::proclaim-defgeneric (lisp::quote pcl::class-defstruct-form) (lisp::quote #25#)) (system::mf (lisp::quote #280=#:|(DEFGENERIC CLASS-DEFSTRUCT-FORM)6252|) 25) (#280#) (lisp::function pcl::class-defstruct-form) (pcl::proclaim-defgeneric (lisp::quote pcl::class-direct-subclasses) (lisp::quote #26#)) (system::mf (lisp::quote #281=#:|(DEFGENERIC CLASS-DIRECT-SUBCLASSES)6252|) 26) (#281#) (lisp::function pcl::class-direct-subclasses) (pcl::proclaim-defgeneric (lisp::quote pcl::class-direct-superclasses) (lisp::quote #27#)) (system::mf (lisp::quote #282=#:|(DEFGENERIC CLASS-DIRECT-SUPERCLASSES)6252|) 27) (#282#) (lisp::function pcl::class-direct-superclasses) (pcl::proclaim-defgeneric (lisp::quote pcl::class-eq-specializer) (lisp::quote #28#)) (system::mf (lisp::quote #283=#:|(DEFGENERIC CLASS-EQ-SPECIALIZER)6252|) 28) (#283#) (lisp::function pcl::class-eq-specializer) (pcl::proclaim-defgeneric (lisp::quote pcl::class-incompatible-superclass-list) (lisp::quote #29#)) (system::mf (lisp::quote #284=#:|(DEFGENERIC CLASS-INCOMPATIBLE-SUPERCLASS-LIST)6252|) 29) (#284#) (lisp::function pcl::class-incompatible-superclass-list) (pcl::proclaim-defgeneric (lisp::quote pcl::class-initialize-info) (lisp::quote #30#)) (system::mf (lisp::quote #285=#:|(DEFGENERIC CLASS-INITIALIZE-INFO)6252|) 30) (#285#) (lisp::function pcl::class-initialize-info) (pcl::proclaim-defgeneric (lisp::quote pcl::class-name) (lisp::quote #31#)) (system::mf (lisp::quote #286=#:|(DEFGENERIC CLASS-NAME)6252|) 31) (#286#) (lisp::function pcl::class-name) (pcl::proclaim-defgeneric (lisp::quote pcl::class-precedence-list) (lisp::quote #32#)) (system::mf (lisp::quote #287=#:|(DEFGENERIC CLASS-PRECEDENCE-LIST)6252|) 32) (#287#) (lisp::function pcl::class-precedence-list) (pcl::proclaim-defgeneric (lisp::quote pcl::class-predicate-name) (lisp::quote #33#)) (system::mf (lisp::quote #288=#:|(DEFGENERIC CLASS-PREDICATE-NAME)6252|) 33) (#288#) (lisp::function pcl::class-predicate-name) (pcl::proclaim-defgeneric (lisp::quote pcl::class-wrapper) (lisp::quote #34#)) (system::mf (lisp::quote #289=#:|(DEFGENERIC CLASS-WRAPPER)6252|) 34) (#289#) (lisp::function pcl::class-wrapper) (pcl::proclaim-defgeneric (lisp::quote pcl::definition-source) (lisp::quote #35#)) (system::mf (lisp::quote #290=#:|(DEFGENERIC DEFINITION-SOURCE)6252|) 35) (#290#) (lisp::function pcl::definition-source) (pcl::proclaim-defgeneric (lisp::quote pcl::eql-specializer-object) (lisp::quote #36#)) (system::mf (lisp::quote #291=#:|(DEFGENERIC EQL-SPECIALIZER-OBJECT)6252|) 36) (#291#) (lisp::function pcl::eql-specializer-object) (pcl::proclaim-defgeneric (lisp::quote pcl::generic-function-declarations) (lisp::quote #37#)) (system::mf (lisp::quote #292=#:|(DEFGENERIC GENERIC-FUNCTION-DECLARATIONS)6252|) 37) (#292#) (lisp::function pcl::generic-function-declarations) (pcl::proclaim-defgeneric (lisp::quote pcl::generic-function-method-class) (lisp::quote #38#)) (system::mf (lisp::quote #293=#:|(DEFGENERIC GENERIC-FUNCTION-METHOD-CLASS)6252|) 38) (#293#) (lisp::function pcl::generic-function-method-class) (pcl::proclaim-defgeneric (lisp::quote pcl::generic-function-method-combination) (lisp::quote #39#)) (system::mf (lisp::quote #294=#:|(DEFGENERIC GENERIC-FUNCTION-METHOD-COMBINATION)6252|) 39) (#294#) (lisp::function pcl::generic-function-method-combination) (pcl::proclaim-defgeneric (lisp::quote pcl::generic-function-methods) (lisp::quote #40#)) (system::mf (lisp::quote #295=#:|(DEFGENERIC GENERIC-FUNCTION-METHODS)6252|) 40) (#295#) (lisp::function pcl::generic-function-methods) (pcl::proclaim-defgeneric (lisp::quote pcl::generic-function-name) (lisp::quote #41#)) (system::mf (lisp::quote #296=#:|(DEFGENERIC GENERIC-FUNCTION-NAME)6252|) 41) (#296#) (lisp::function pcl::generic-function-name) (pcl::proclaim-defgeneric (lisp::quote pcl::generic-function-argument-precedence-order) (lisp::quote #42#)) (system::mf (lisp::quote #297=#:|(DEFGENERIC GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER)6252|) 42) (#297#) (lisp::function pcl::generic-function-argument-precedence-order) (pcl::proclaim-defgeneric (lisp::quote pcl::gf-arg-info) (lisp::quote #43#)) (system::mf (lisp::quote #298=#:|(DEFGENERIC GF-ARG-INFO)6252|) 43) (#298#) (lisp::function pcl::gf-arg-info) (pcl::proclaim-defgeneric (lisp::quote pcl::gf-dfun-state) (lisp::quote #44#)) (system::mf (lisp::quote #299=#:|(DEFGENERIC GF-DFUN-STATE)6252|) 44) (#299#) (lisp::function pcl::gf-dfun-state) (pcl::proclaim-defgeneric (lisp::quote pcl::gf-pretty-arglist) (lisp::quote #45#)) (system::mf (lisp::quote #300=#:|(DEFGENERIC GF-PRETTY-ARGLIST)6252|) 45) (#300#) (lisp::function pcl::gf-pretty-arglist) (pcl::proclaim-defgeneric (lisp::quote pcl::long-method-combination-function) (lisp::quote #46#)) (system::mf (lisp::quote #301=#:|(DEFGENERIC LONG-METHOD-COMBINATION-FUNCTION)6252|) 46) (#301#) (lisp::function pcl::long-method-combination-function) (pcl::proclaim-defgeneric (lisp::quote pcl::method-combination-documentation) (lisp::quote #47#)) (system::mf (lisp::quote #302=#:|(DEFGENERIC METHOD-COMBINATION-DOCUMENTATION)6252|) 47) (#302#) (lisp::function pcl::method-combination-documentation) (pcl::proclaim-defgeneric (lisp::quote pcl::method-combination-options) (lisp::quote #48#)) (system::mf (lisp::quote #303=#:|(DEFGENERIC METHOD-COMBINATION-OPTIONS)6252|) 48) (#303#) (lisp::function pcl::method-combination-options) (pcl::proclaim-defgeneric (lisp::quote pcl::method-combination-type) (lisp::quote #49#)) (system::mf (lisp::quote #304=#:|(DEFGENERIC METHOD-COMBINATION-TYPE)6252|) 49) (#304#) (lisp::function pcl::method-combination-type) (pcl::proclaim-defgeneric (lisp::quote pcl::method-fast-function) (lisp::quote #50#)) (system::mf (lisp::quote #305=#:|(DEFGENERIC METHOD-FAST-FUNCTION)6252|) 50) (#305#) (lisp::function pcl::method-fast-function) (pcl::proclaim-defgeneric (lisp::quote pcl::method-generic-function) (lisp::quote #51#)) (system::mf (lisp::quote #306=#:|(DEFGENERIC METHOD-GENERIC-FUNCTION)6252|) 51) (#306#) (lisp::function pcl::method-generic-function) (pcl::proclaim-defgeneric (lisp::quote pcl::object-plist) (lisp::quote #52#)) (system::mf (lisp::quote #307=#:|(DEFGENERIC OBJECT-PLIST)6252|) 52) (#307#) (lisp::function pcl::object-plist) (pcl::proclaim-defgeneric (lisp::quote pcl::short-combination-identity-with-one-argument) (lisp::quote #53#)) (system::mf (lisp::quote #308=#:|(DEFGENERIC SHORT-COMBINATION-IDENTITY-WITH-ONE-ARGUMENT)6252|) 53) (#308#) (lisp::function pcl::short-combination-identity-with-one-argument) (pcl::proclaim-defgeneric (lisp::quote pcl::short-combination-operator) (lisp::quote #54#)) (system::mf (lisp::quote #309=#:|(DEFGENERIC SHORT-COMBINATION-OPERATOR)6252|) 54) (#309#) (lisp::function pcl::short-combination-operator) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-boundp-function) (lisp::quote #55#)) (system::mf (lisp::quote #310=#:|(DEFGENERIC SLOT-DEFINITION-BOUNDP-FUNCTION)6252|) 55) (#310#) (lisp::function pcl::slot-definition-boundp-function) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-class) (lisp::quote #56#)) (system::mf (lisp::quote #311=#:|(DEFGENERIC SLOT-DEFINITION-CLASS)6252|) 56) (#311#) (lisp::function pcl::slot-definition-class) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-defstruct-accessor-symbol) (lisp::quote #57#)) (system::mf (lisp::quote #312=#:|(DEFGENERIC SLOT-DEFINITION-DEFSTRUCT-ACCESSOR-SYMBOL)6252|) 57) (#312#) (lisp::function pcl::slot-definition-defstruct-accessor-symbol) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-initargs) (lisp::quote #58#)) (system::mf (lisp::quote #313=#:|(DEFGENERIC SLOT-DEFINITION-INITARGS)6252|) 58) (#313#) (lisp::function pcl::slot-definition-initargs) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-initform) (lisp::quote #59#)) (system::mf (lisp::quote #314=#:|(DEFGENERIC SLOT-DEFINITION-INITFORM)6252|) 59) (#314#) (lisp::function pcl::slot-definition-initform) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-initfunction) (lisp::quote #60#)) (system::mf (lisp::quote #315=#:|(DEFGENERIC SLOT-DEFINITION-INITFUNCTION)6252|) 60) (#315#) (lisp::function pcl::slot-definition-initfunction) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-internal-reader-function) (lisp::quote #61#)) (system::mf (lisp::quote #316=#:|(DEFGENERIC SLOT-DEFINITION-INTERNAL-READER-FUNCTION)6252|) 61) (#316#) (lisp::function pcl::slot-definition-internal-reader-function) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-internal-writer-function) (lisp::quote #62#)) (system::mf (lisp::quote #317=#:|(DEFGENERIC SLOT-DEFINITION-INTERNAL-WRITER-FUNCTION)6252|) 62) (#317#) (lisp::function pcl::slot-definition-internal-writer-function) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-location) (lisp::quote #63#)) (system::mf (lisp::quote #318=#:|(DEFGENERIC SLOT-DEFINITION-LOCATION)6252|) 63) (#318#) (lisp::function pcl::slot-definition-location) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-name) (lisp::quote #64#)) (system::mf (lisp::quote #319=#:|(DEFGENERIC SLOT-DEFINITION-NAME)6252|) 64) (#319#) (lisp::function pcl::slot-definition-name) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-reader-function) (lisp::quote #65#)) (system::mf (lisp::quote #320=#:|(DEFGENERIC SLOT-DEFINITION-READER-FUNCTION)6252|) 65) (#320#) (lisp::function pcl::slot-definition-reader-function) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-readers) (lisp::quote #66#)) (system::mf (lisp::quote #321=#:|(DEFGENERIC SLOT-DEFINITION-READERS)6252|) 66) (#321#) (lisp::function pcl::slot-definition-readers) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-type) (lisp::quote #67#)) (system::mf (lisp::quote #322=#:|(DEFGENERIC SLOT-DEFINITION-TYPE)6252|) 67) (#322#) (lisp::function pcl::slot-definition-type) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-writer-function) (lisp::quote #68#)) (system::mf (lisp::quote #323=#:|(DEFGENERIC SLOT-DEFINITION-WRITER-FUNCTION)6252|) 68) (#323#) (lisp::function pcl::slot-definition-writer-function) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-writers) (lisp::quote #69#)) (system::mf (lisp::quote #324=#:|(DEFGENERIC SLOT-DEFINITION-WRITERS)6252|) 69) (#324#) (lisp::function pcl::slot-definition-writers) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-object) (lisp::quote #70#)) (system::mf (lisp::quote #325=#:|(DEFGENERIC SPECIALIZER-OBJECT)6252|) 70) (#325#) (lisp::function pcl::specializer-object) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-type) (lisp::quote #71#)) (system::mf (lisp::quote #326=#:|(DEFGENERIC SPECIALIZER-TYPE)6252|) 71) (#326#) (lisp::function pcl::specializer-type) (pcl::proclaim-defgeneric (lisp::quote #72#) (lisp::quote #73#)) (system::mf (lisp::quote #327=#:|(DEFGENERIC (SETF CLASS-DEFSTRUCT-CONSTRUCTOR))6252|) 72) (#327#) (lisp::function #72#) (pcl::proclaim-defgeneric (lisp::quote #74#) (lisp::quote #75#)) (system::mf (lisp::quote #328=#:|(DEFGENERIC (SETF CLASS-DEFSTRUCT-FORM))6252|) 73) (#328#) (lisp::function #74#) (pcl::proclaim-defgeneric (lisp::quote #76#) (lisp::quote #77#)) (system::mf (lisp::quote #329=#:|(DEFGENERIC (SETF CLASS-DIRECT-SLOTS))6252|) 74) (#329#) (lisp::function #76#) (pcl::proclaim-defgeneric (lisp::quote #78#) (lisp::quote #79#)) (system::mf (lisp::quote #330=#:|(DEFGENERIC (SETF CLASS-INCOMPATIBLE-SUPERCLASS-LIST))6252|) 75) (#330#) (lisp::function #78#) (pcl::proclaim-defgeneric (lisp::quote #80#) (lisp::quote #81#)) (system::mf (lisp::quote #331=#:|(DEFGENERIC (SETF CLASS-INITIALIZE-INFO))6252|) 76) (#331#) (lisp::function #80#) (pcl::proclaim-defgeneric (lisp::quote #82#) (lisp::quote #83#)) (system::mf (lisp::quote #332=#:|(DEFGENERIC (SETF CLASS-NAME))6252|) 77) (#332#) (lisp::function #82#) (pcl::proclaim-defgeneric (lisp::quote #84#) (lisp::quote #85#)) (system::mf (lisp::quote #333=#:|(DEFGENERIC (SETF CLASS-SLOTS))6252|) 78) (#333#) (lisp::function #84#) (pcl::proclaim-defgeneric (lisp::quote #86#) (lisp::quote #87#)) (system::mf (lisp::quote #334=#:|(DEFGENERIC (SETF GENERIC-FUNCTION-METHOD-CLASS))6252|) 79) (#334#) (lisp::function #86#) (pcl::proclaim-defgeneric (lisp::quote #88#) (lisp::quote #89#)) (system::mf (lisp::quote #335=#:|(DEFGENERIC (SETF GENERIC-FUNCTION-METHOD-COMBINATION))6252|) 80) (#335#) (lisp::function #88#) (pcl::proclaim-defgeneric (lisp::quote #90#) (lisp::quote #91#)) (system::mf (lisp::quote #336=#:|(DEFGENERIC (SETF GENERIC-FUNCTION-DECLARATIONS))6252|) 81) (#336#) (lisp::function #90#) (pcl::proclaim-defgeneric (lisp::quote #92#) (lisp::quote #93#)) (system::mf (lisp::quote #337=#:|(DEFGENERIC (SETF GENERIC-FUNCTION-METHODS))6252|) 82) (#337#) (lisp::function #92#) (pcl::proclaim-defgeneric (lisp::quote #94#) (lisp::quote #95#)) (system::mf (lisp::quote #338=#:|(DEFGENERIC (SETF GENERIC-FUNCTION-NAME))6252|) 83) (#338#) (lisp::function #94#) (pcl::proclaim-defgeneric (lisp::quote #96#) (lisp::quote #97#)) (system::mf (lisp::quote #339=#:|(DEFGENERIC (SETF GF-DFUN-STATE))6252|) 84) (#339#) (lisp::function #96#) (pcl::proclaim-defgeneric (lisp::quote #98#) (lisp::quote #99#)) (system::mf (lisp::quote #340=#:|(DEFGENERIC (SETF GF-PRETTY-ARGLIST))6252|) 85) (#340#) (lisp::function #98#) (pcl::proclaim-defgeneric (lisp::quote #100#) (lisp::quote #101#)) (system::mf (lisp::quote #341=#:|(DEFGENERIC (SETF METHOD-GENERIC-FUNCTION))6252|) 86) (#341#) (lisp::function #100#) (pcl::proclaim-defgeneric (lisp::quote #102#) (lisp::quote #103#)) (system::mf (lisp::quote #342=#:|(DEFGENERIC (SETF OBJECT-PLIST))6252|) 87) (#342#) (lisp::function #102#) (pcl::proclaim-defgeneric (lisp::quote #104#) (lisp::quote #105#)) (system::mf (lisp::quote #343=#:|(DEFGENERIC (SETF SLOT-DEFINITION-ALLOCATION))6252|) 88) (#343#) (lisp::function #104#) (pcl::proclaim-defgeneric (lisp::quote #106#) (lisp::quote #107#)) (system::mf (lisp::quote #344=#:|(DEFGENERIC (SETF SLOT-DEFINITION-BOUNDP-FUNCTION))6252|) 89) (#344#) (lisp::function #106#) (pcl::proclaim-defgeneric (lisp::quote #108#) (lisp::quote #109#)) (system::mf (lisp::quote #345=#:|(DEFGENERIC (SETF SLOT-DEFINITION-CLASS))6252|) 90) (#345#) (lisp::function #108#) (pcl::proclaim-defgeneric (lisp::quote #110#) (lisp::quote #111#)) (system::mf (lisp::quote #346=#:|(DEFGENERIC (SETF SLOT-DEFINITION-DEFSTRUCT-ACCESSOR-SYMBOL))6252|) 91) (#346#) (lisp::function #110#) (pcl::proclaim-defgeneric (lisp::quote #112#) (lisp::quote #113#)) (system::mf (lisp::quote #347=#:|(DEFGENERIC (SETF SLOT-DEFINITION-INITARGS))6252|) 92) (#347#) (lisp::function #112#) (pcl::proclaim-defgeneric (lisp::quote #114#) (lisp::quote #115#)) (system::mf (lisp::quote #348=#:|(DEFGENERIC (SETF SLOT-DEFINITION-INITFORM))6252|) 93) (#348#) (lisp::function #114#) (pcl::proclaim-defgeneric (lisp::quote #116#) (lisp::quote #117#)) (system::mf (lisp::quote #349=#:|(DEFGENERIC (SETF SLOT-DEFINITION-INITFUNCTION))6252|) 94) (#349#) (lisp::function #116#) (pcl::proclaim-defgeneric (lisp::quote #118#) (lisp::quote #119#)) (system::mf (lisp::quote #350=#:|(DEFGENERIC (SETF SLOT-DEFINITION-INTERNAL-READER-FUNCTION))6252|) 95) (#350#) (lisp::function #118#) (pcl::proclaim-defgeneric (lisp::quote #120#) (lisp::quote #121#)) (system::mf (lisp::quote #351=#:|(DEFGENERIC (SETF SLOT-DEFINITION-INTERNAL-WRITER-FUNCTION))6252|) 96) (#351#) (lisp::function #120#) (pcl::proclaim-defgeneric (lisp::quote #122#) (lisp::quote #123#)) (system::mf (lisp::quote #352=#:|(DEFGENERIC (SETF SLOT-DEFINITION-LOCATION))6252|) 97) (#352#) (lisp::function #122#) (pcl::proclaim-defgeneric (lisp::quote #124#) (lisp::quote #125#)) (system::mf (lisp::quote #353=#:|(DEFGENERIC (SETF SLOT-DEFINITION-NAME))6252|) 98) (#353#) (lisp::function #124#) (pcl::proclaim-defgeneric (lisp::quote #126#) (lisp::quote #127#)) (system::mf (lisp::quote #354=#:|(DEFGENERIC (SETF SLOT-DEFINITION-READER-FUNCTION))6252|) 99) (#354#) (lisp::function #126#) (pcl::proclaim-defgeneric (lisp::quote #128#) (lisp::quote #129#)) (system::mf (lisp::quote #355=#:|(DEFGENERIC (SETF SLOT-DEFINITION-READERS))6252|) 100) (#355#) (lisp::function #128#) (pcl::proclaim-defgeneric (lisp::quote #130#) (lisp::quote #131#)) (system::mf (lisp::quote #356=#:|(DEFGENERIC (SETF SLOT-DEFINITION-TYPE))6252|) 101) (#356#) (lisp::function #130#) (pcl::proclaim-defgeneric (lisp::quote #132#) (lisp::quote #133#)) (system::mf (lisp::quote #357=#:|(DEFGENERIC (SETF SLOT-DEFINITION-WRITER-FUNCTION))6252|) 102) (#357#) (lisp::function #132#) (pcl::proclaim-defgeneric (lisp::quote #134#) (lisp::quote #135#)) (system::mf (lisp::quote #358=#:|(DEFGENERIC (SETF SLOT-DEFINITION-WRITERS))6252|) 103) (#358#) (lisp::function #134#) (pcl::proclaim-defgeneric (lisp::quote pcl::accessor-method-class) (lisp::quote #136#)) (system::mf (lisp::quote #359=#:|(DEFGENERIC ACCESSOR-METHOD-CLASS)6252|) 104) (#359#) (lisp::function pcl::accessor-method-class) (pcl::proclaim-defgeneric (lisp::quote pcl::accessor-method-slot-name) (lisp::quote #137#)) (system::mf (lisp::quote #360=#:|(DEFGENERIC ACCESSOR-METHOD-SLOT-NAME)6252|) 105) (#360#) (lisp::function pcl::accessor-method-slot-name) (pcl::proclaim-defgeneric (lisp::quote pcl::class-constructors) (lisp::quote #138#)) (system::mf (lisp::quote #361=#:|(DEFGENERIC CLASS-CONSTRUCTORS)6252|) 106) (#361#) (lisp::function pcl::class-constructors) (pcl::proclaim-defgeneric (lisp::quote pcl::class-default-initargs) (lisp::quote #139#)) (system::mf (lisp::quote #362=#:|(DEFGENERIC CLASS-DEFAULT-INITARGS)6252|) 107) (#362#) (lisp::function pcl::class-default-initargs) (pcl::proclaim-defgeneric (lisp::quote pcl::class-direct-default-initargs) (lisp::quote #140#)) (system::mf (lisp::quote #363=#:|(DEFGENERIC CLASS-DIRECT-DEFAULT-INITARGS)6252|) 108) (#363#) (lisp::function pcl::class-direct-default-initargs) (pcl::proclaim-defgeneric (lisp::quote pcl::class-direct-slots) (lisp::quote #141#)) (system::mf (lisp::quote #364=#:|(DEFGENERIC CLASS-DIRECT-SLOTS)6252|) 109) (#364#) (lisp::function pcl::class-direct-slots) (pcl::proclaim-defgeneric (lisp::quote pcl::class-finalized-p) (lisp::quote #142#)) (system::mf (lisp::quote #365=#:|(DEFGENERIC CLASS-FINALIZED-P)6252|) 110) (#365#) (lisp::function pcl::class-finalized-p) (pcl::proclaim-defgeneric (lisp::quote pcl::class-prototype) (lisp::quote #143#)) (system::mf (lisp::quote #366=#:|(DEFGENERIC CLASS-PROTOTYPE)6252|) 111) (#366#) (lisp::function pcl::class-prototype) (pcl::proclaim-defgeneric (lisp::quote pcl::class-slot-cells) (lisp::quote #144#)) (system::mf (lisp::quote #367=#:|(DEFGENERIC CLASS-SLOT-CELLS)6252|) 112) (#367#) (lisp::function pcl::class-slot-cells) (pcl::proclaim-defgeneric (lisp::quote pcl::class-slots) (lisp::quote #145#)) (system::mf (lisp::quote #368=#:|(DEFGENERIC CLASS-SLOTS)6252|) 113) (#368#) (lisp::function pcl::class-slots) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-class-precedence-list) (lisp::quote #146#)) (system::mf (lisp::quote #369=#:|(DEFGENERIC COMPUTE-CLASS-PRECEDENCE-LIST)6252|) 114) (#369#) (lisp::function pcl::compute-class-precedence-list) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-default-initargs) (lisp::quote #147#)) (system::mf (lisp::quote #370=#:|(DEFGENERIC COMPUTE-DEFAULT-INITARGS)6252|) 115) (#370#) (lisp::function pcl::compute-default-initargs) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-discriminating-function) (lisp::quote #148#)) (system::mf (lisp::quote #371=#:|(DEFGENERIC COMPUTE-DISCRIMINATING-FUNCTION)6252|) 116) (#371#) (lisp::function pcl::compute-discriminating-function) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-discriminating-function-arglist-info) (lisp::quote #149#)) (system::mf (lisp::quote #372=#:|(DEFGENERIC COMPUTE-DISCRIMINATING-FUNCTION-ARGLIST-INFO)6252|) 117) (#372#) (lisp::function pcl::compute-discriminating-function-arglist-info) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-slots) (lisp::quote #150#)) (system::mf (lisp::quote #373=#:|(DEFGENERIC COMPUTE-SLOTS)6252|) 118) (#373#) (lisp::function pcl::compute-slots) (pcl::proclaim-defgeneric (lisp::quote pcl::finalize-inheritance) (lisp::quote #151#)) (system::mf (lisp::quote #374=#:|(DEFGENERIC FINALIZE-INHERITANCE)6252|) 119) (#374#) (lisp::function pcl::finalize-inheritance) (pcl::proclaim-defgeneric (lisp::quote pcl::function-keywords) (lisp::quote #152#)) (system::mf (lisp::quote #375=#:|(DEFGENERIC FUNCTION-KEYWORDS)6252|) 120) (#375#) (lisp::function pcl::function-keywords) (pcl::proclaim-defgeneric (lisp::quote pcl::generic-function-lambda-list) (lisp::quote #153#)) (system::mf (lisp::quote #376=#:|(DEFGENERIC GENERIC-FUNCTION-LAMBDA-LIST)6252|) 121) (#376#) (lisp::function pcl::generic-function-lambda-list) (pcl::proclaim-defgeneric (lisp::quote pcl::generic-function-pretty-arglist) (lisp::quote #154#)) (system::mf (lisp::quote #377=#:|(DEFGENERIC GENERIC-FUNCTION-PRETTY-ARGLIST)6252|) 122) (#377#) (lisp::function pcl::generic-function-pretty-arglist) (pcl::proclaim-defgeneric (lisp::quote pcl::gf-fast-method-function-p) (lisp::quote #155#)) (system::mf (lisp::quote #378=#:|(DEFGENERIC GF-FAST-METHOD-FUNCTION-P)6252|) 123) (#378#) (lisp::function pcl::gf-fast-method-function-p) (pcl::proclaim-defgeneric (lisp::quote pcl::initialize-internal-slot-functions) (lisp::quote #156#)) (system::mf (lisp::quote #379=#:|(DEFGENERIC INITIALIZE-INTERNAL-SLOT-FUNCTIONS)6252|) 124) (#379#) (lisp::function pcl::initialize-internal-slot-functions) (pcl::proclaim-defgeneric (lisp::quote pcl::make-instances-obsolete) (lisp::quote #157#)) (system::mf (lisp::quote #380=#:|(DEFGENERIC MAKE-INSTANCES-OBSOLETE)6252|) 125) (#380#) (lisp::function pcl::make-instances-obsolete) (pcl::proclaim-defgeneric (lisp::quote pcl::method-function) (lisp::quote #158#)) (system::mf (lisp::quote #381=#:|(DEFGENERIC METHOD-FUNCTION)6252|) 126) (#381#) (lisp::function pcl::method-function) (pcl::proclaim-defgeneric (lisp::quote pcl::method-lambda-list) (lisp::quote #159#)) (system::mf (lisp::quote #382=#:|(DEFGENERIC METHOD-LAMBDA-LIST)6252|) 127) (#382#) (lisp::function pcl::method-lambda-list) (pcl::proclaim-defgeneric (lisp::quote pcl::method-pretty-arglist) (lisp::quote #160#)) (system::mf (lisp::quote #383=#:|(DEFGENERIC METHOD-PRETTY-ARGLIST)6252|) 128) (#383#) (lisp::function pcl::method-pretty-arglist) (pcl::proclaim-defgeneric (lisp::quote pcl::method-qualifiers) (lisp::quote #161#)) (system::mf (lisp::quote #384=#:|(DEFGENERIC METHOD-QUALIFIERS)6252|) 129) (#384#) (lisp::function pcl::method-qualifiers) (pcl::proclaim-defgeneric (lisp::quote pcl::method-specializers) (lisp::quote #162#)) (system::mf (lisp::quote #385=#:|(DEFGENERIC METHOD-SPECIALIZERS)6252|) 130) (#385#) (lisp::function pcl::method-specializers) (pcl::proclaim-defgeneric (lisp::quote pcl::raw-instance-allocator) (lisp::quote #163#)) (system::mf (lisp::quote #386=#:|(DEFGENERIC RAW-INSTANCE-ALLOCATOR)6252|) 131) (#386#) (lisp::function pcl::raw-instance-allocator) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-allocation) (lisp::quote #164#)) (system::mf (lisp::quote #387=#:|(DEFGENERIC SLOT-DEFINITION-ALLOCATION)6252|) 132) (#387#) (lisp::function pcl::slot-definition-allocation) (pcl::proclaim-defgeneric (lisp::quote pcl::slots-fetcher) (lisp::quote #165#)) (system::mf (lisp::quote #388=#:|(DEFGENERIC SLOTS-FETCHER)6252|) 133) (#388#) (lisp::function pcl::slots-fetcher) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-class) (lisp::quote #166#)) (system::mf (lisp::quote #389=#:|(DEFGENERIC SPECIALIZER-CLASS)6252|) 134) (#389#) (lisp::function pcl::specializer-class) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-direct-generic-functions) (lisp::quote #167#)) (system::mf (lisp::quote #390=#:|(DEFGENERIC SPECIALIZER-DIRECT-GENERIC-FUNCTIONS)6252|) 135) (#390#) (lisp::function pcl::specializer-direct-generic-functions) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-direct-methods) (lisp::quote #168#)) (system::mf (lisp::quote #391=#:|(DEFGENERIC SPECIALIZER-DIRECT-METHODS)6252|) 136) (#391#) (lisp::function pcl::specializer-direct-methods) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-method-table) (lisp::quote #169#)) (system::mf (lisp::quote #392=#:|(DEFGENERIC SPECIALIZER-METHOD-TABLE)6252|) 137) (#392#) (lisp::function pcl::specializer-method-table) (pcl::proclaim-defgeneric (lisp::quote pcl::update-constructors) (lisp::quote #170#)) (system::mf (lisp::quote #393=#:|(DEFGENERIC UPDATE-CONSTRUCTORS)6252|) 138) (#393#) (lisp::function pcl::update-constructors) (pcl::proclaim-defgeneric (lisp::quote pcl::wrapper-fetcher) (lisp::quote #171#)) (system::mf (lisp::quote #394=#:|(DEFGENERIC WRAPPER-FETCHER)6252|) 139) (#394#) (lisp::function pcl::wrapper-fetcher) (pcl::proclaim-defgeneric (lisp::quote pcl::add-dependent) (lisp::quote #172#)) (system::mf (lisp::quote #395=#:|(DEFGENERIC ADD-DEPENDENT)6252|) 140) (#395#) (lisp::function pcl::add-dependent) (pcl::proclaim-defgeneric (lisp::quote pcl::add-direct-method) (lisp::quote #173#)) (system::mf (lisp::quote #396=#:|(DEFGENERIC ADD-DIRECT-METHOD)6252|) 141) (#396#) (lisp::function pcl::add-direct-method) (pcl::proclaim-defgeneric (lisp::quote pcl::add-direct-subclass) (lisp::quote #174#)) (system::mf (lisp::quote #397=#:|(DEFGENERIC ADD-DIRECT-SUBCLASS)6252|) 142) (#397#) (lisp::function pcl::add-direct-subclass) (pcl::proclaim-defgeneric (lisp::quote pcl::add-method) (lisp::quote #175#)) (system::mf (lisp::quote #398=#:|(DEFGENERIC ADD-METHOD)6252|) 143) (#398#) (lisp::function pcl::add-method) (pcl::proclaim-defgeneric (lisp::quote pcl::change-class) (lisp::quote #176#)) (system::mf (lisp::quote #399=#:|(DEFGENERIC CHANGE-CLASS)6252|) 144) (#399#) (lisp::function pcl::change-class) (pcl::proclaim-defgeneric (lisp::quote pcl::class-slot-value) (lisp::quote #177#)) (system::mf (lisp::quote #400=#:|(DEFGENERIC CLASS-SLOT-VALUE)6252|) 145) (#400#) (lisp::function pcl::class-slot-value) (pcl::proclaim-defgeneric (lisp::quote pcl::compatible-meta-class-change-p) (lisp::quote #178#)) (system::mf (lisp::quote #401=#:|(DEFGENERIC COMPATIBLE-META-CLASS-CHANGE-P)6252|) 146) (#401#) (lisp::function pcl::compatible-meta-class-change-p) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-applicable-methods) (lisp::quote #179#)) (system::mf (lisp::quote #402=#:|(DEFGENERIC COMPUTE-APPLICABLE-METHODS)6252|) 147) (#402#) (lisp::function pcl::compute-applicable-methods) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-applicable-methods-using-classes) (lisp::quote #180#)) (system::mf (lisp::quote #403=#:|(DEFGENERIC COMPUTE-APPLICABLE-METHODS-USING-CLASSES)6252|) 148) (#403#) (lisp::function pcl::compute-applicable-methods-using-classes) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-effective-slot-definition) (lisp::quote #181#)) (system::mf (lisp::quote #404=#:|(DEFGENERIC COMPUTE-EFFECTIVE-SLOT-DEFINITION)6252|) 149) (#404#) (lisp::function pcl::compute-effective-slot-definition) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-effective-slot-definition-initargs) (lisp::quote #182#)) (system::mf (lisp::quote #405=#:|(DEFGENERIC COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS)6252|) 150) (#405#) (lisp::function pcl::compute-effective-slot-definition-initargs) (pcl::proclaim-defgeneric (lisp::quote pcl::default-initargs) (lisp::quote #183#)) (system::mf (lisp::quote #406=#:|(DEFGENERIC DEFAULT-INITARGS)6252|) 151) (#406#) (lisp::function pcl::default-initargs) (pcl::proclaim-defgeneric (lisp::quote pcl::describe-object) (lisp::quote #184#)) (system::mf (lisp::quote #407=#:|(DEFGENERIC DESCRIBE-OBJECT)6252|) 152) (#407#) (lisp::function pcl::describe-object) (pcl::proclaim-defgeneric (lisp::quote pcl::direct-slot-definition-class) (lisp::quote #185#)) (system::mf (lisp::quote #408=#:|(DEFGENERIC DIRECT-SLOT-DEFINITION-CLASS)6252|) 153) (#408#) (lisp::function pcl::direct-slot-definition-class) (pcl::proclaim-defgeneric (lisp::quote pcl::effective-slot-definition-class) (lisp::quote #186#)) (system::mf (lisp::quote #409=#:|(DEFGENERIC EFFECTIVE-SLOT-DEFINITION-CLASS)6252|) 154) (#409#) (lisp::function pcl::effective-slot-definition-class) (pcl::proclaim-defgeneric (lisp::quote pcl::inform-type-system-about-class) (lisp::quote #187#)) (system::mf (lisp::quote #410=#:|(DEFGENERIC INFORM-TYPE-SYSTEM-ABOUT-CLASS)6252|) 155) (#410#) (lisp::function pcl::inform-type-system-about-class) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-documentation-p) (lisp::quote #188#)) (system::mf (lisp::quote #411=#:|(DEFGENERIC LEGAL-DOCUMENTATION-P)6252|) 156) (#411#) (lisp::function pcl::legal-documentation-p) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-method-function-p) (lisp::quote #189#)) (system::mf (lisp::quote #412=#:|(DEFGENERIC LEGAL-METHOD-FUNCTION-P)6252|) 157) (#412#) (lisp::function pcl::legal-method-function-p) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-qualifier-p) (lisp::quote #190#)) (system::mf (lisp::quote #413=#:|(DEFGENERIC LEGAL-QUALIFIER-P)6252|) 158) (#413#) (lisp::function pcl::legal-qualifier-p) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-qualifiers-p) (lisp::quote #191#)) (system::mf (lisp::quote #414=#:|(DEFGENERIC LEGAL-QUALIFIERS-P)6252|) 159) (#414#) (lisp::function pcl::legal-qualifiers-p) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-slot-name-p) (lisp::quote #192#)) (system::mf (lisp::quote #415=#:|(DEFGENERIC LEGAL-SLOT-NAME-P)6252|) 160) (#415#) (lisp::function pcl::legal-slot-name-p) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-specializer-p) (lisp::quote #193#)) (system::mf (lisp::quote #416=#:|(DEFGENERIC LEGAL-SPECIALIZER-P)6252|) 161) (#416#) (lisp::function pcl::legal-specializer-p) (pcl::proclaim-defgeneric (lisp::quote pcl::legal-specializers-p) (lisp::quote #194#)) (system::mf (lisp::quote #417=#:|(DEFGENERIC LEGAL-SPECIALIZERS-P)6252|) 162) (#417#) (lisp::function pcl::legal-specializers-p) (pcl::proclaim-defgeneric (lisp::quote pcl::make-boundp-method-function) (lisp::quote #195#)) (system::mf (lisp::quote #418=#:|(DEFGENERIC MAKE-BOUNDP-METHOD-FUNCTION)6252|) 163) (#418#) (lisp::function pcl::make-boundp-method-function) (pcl::proclaim-defgeneric (lisp::quote pcl::make-reader-method-function) (lisp::quote #196#)) (system::mf (lisp::quote #419=#:|(DEFGENERIC MAKE-READER-METHOD-FUNCTION)6252|) 164) (#419#) (lisp::function pcl::make-reader-method-function) (pcl::proclaim-defgeneric (lisp::quote pcl::make-writer-method-function) (lisp::quote #197#)) (system::mf (lisp::quote #420=#:|(DEFGENERIC MAKE-WRITER-METHOD-FUNCTION)6252|) 165) (#420#) (lisp::function pcl::make-writer-method-function) (pcl::proclaim-defgeneric (lisp::quote pcl::map-dependents) (lisp::quote #198#)) (system::mf (lisp::quote #421=#:|(DEFGENERIC MAP-DEPENDENTS)6252|) 166) (#421#) (lisp::function pcl::map-dependents) (pcl::proclaim-defgeneric (lisp::quote pcl::no-next-method) (lisp::quote #199#)) (system::mf (lisp::quote #422=#:|(DEFGENERIC NO-NEXT-METHOD)6252|) 167) (#422#) (lisp::function pcl::no-next-method) (pcl::proclaim-defgeneric (lisp::quote pcl::print-object) (lisp::quote #200#)) (system::mf (lisp::quote #423=#:|(DEFGENERIC PRINT-OBJECT)6252|) 168) (#423#) (lisp::function pcl::print-object) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-boundp-method) (lisp::quote #201#)) (system::mf (lisp::quote #424=#:|(DEFGENERIC REMOVE-BOUNDP-METHOD)6252|) 169) (#424#) (lisp::function pcl::remove-boundp-method) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-dependent) (lisp::quote #202#)) (system::mf (lisp::quote #425=#:|(DEFGENERIC REMOVE-DEPENDENT)6252|) 170) (#425#) (lisp::function pcl::remove-dependent) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-direct-method) (lisp::quote #203#)) (system::mf (lisp::quote #426=#:|(DEFGENERIC REMOVE-DIRECT-METHOD)6252|) 171) (#426#) (lisp::function pcl::remove-direct-method) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-direct-subclass) (lisp::quote #204#)) (system::mf (lisp::quote #427=#:|(DEFGENERIC REMOVE-DIRECT-SUBCLASS)6252|) 172) (#427#) (lisp::function pcl::remove-direct-subclass) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-method) (lisp::quote #205#)) (system::mf (lisp::quote #428=#:|(DEFGENERIC REMOVE-METHOD)6252|) 173) (#428#) (lisp::function pcl::remove-method) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-reader-method) (lisp::quote #206#)) (system::mf (lisp::quote #429=#:|(DEFGENERIC REMOVE-READER-METHOD)6252|) 174) (#429#) (lisp::function pcl::remove-reader-method) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-writer-method) (lisp::quote #207#)) (system::mf (lisp::quote #430=#:|(DEFGENERIC REMOVE-WRITER-METHOD)6252|) 175) (#430#) (lisp::function pcl::remove-writer-method) (pcl::proclaim-defgeneric (lisp::quote pcl::same-specializer-p) (lisp::quote #208#)) (system::mf (lisp::quote #431=#:|(DEFGENERIC SAME-SPECIALIZER-P)6252|) 176) (#431#) (lisp::function pcl::same-specializer-p) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-accessor-function) (lisp::quote #209#)) (system::mf (lisp::quote #432=#:|(DEFGENERIC SLOT-ACCESSOR-FUNCTION)6252|) 177) (#432#) (lisp::function pcl::slot-accessor-function) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-accessor-std-p) (lisp::quote #210#)) (system::mf (lisp::quote #433=#:|(DEFGENERIC SLOT-ACCESSOR-STD-P)6252|) 178) (#433#) (lisp::function pcl::slot-accessor-std-p) (pcl::proclaim-defgeneric (lisp::quote pcl::slots-to-inspect) (lisp::quote #211#)) (system::mf (lisp::quote #434=#:|(DEFGENERIC SLOTS-TO-INSPECT)6252|) 179) (#434#) (lisp::function pcl::slots-to-inspect) (pcl::proclaim-defgeneric (lisp::quote pcl::update-gf-dfun) (lisp::quote #212#)) (system::mf (lisp::quote #435=#:|(DEFGENERIC UPDATE-GF-DFUN)6252|) 180) (#435#) (lisp::function pcl::update-gf-dfun) (pcl::proclaim-defgeneric (lisp::quote pcl::validate-superclass) (lisp::quote #213#)) (system::mf (lisp::quote #436=#:|(DEFGENERIC VALIDATE-SUPERCLASS)6252|) 181) (#436#) (lisp::function pcl::validate-superclass) (pcl::proclaim-defgeneric (lisp::quote pcl::add-boundp-method) (lisp::quote #214#)) (system::mf (lisp::quote #437=#:|(DEFGENERIC ADD-BOUNDP-METHOD)6252|) 182) (#437#) (lisp::function pcl::add-boundp-method) (pcl::proclaim-defgeneric (lisp::quote pcl::add-reader-method) (lisp::quote #215#)) (system::mf (lisp::quote #438=#:|(DEFGENERIC ADD-READER-METHOD)6252|) 183) (#438#) (lisp::function pcl::add-reader-method) (pcl::proclaim-defgeneric (lisp::quote pcl::add-writer-method) (lisp::quote #216#)) (system::mf (lisp::quote #439=#:|(DEFGENERIC ADD-WRITER-METHOD)6252|) 184) (#439#) (lisp::function pcl::add-writer-method) (pcl::proclaim-defgeneric (lisp::quote #217#) (lisp::quote #218#)) (system::mf (lisp::quote #440=#:|(DEFGENERIC (SETF CLASS-SLOT-VALUE))6252|) 185) (#440#) (lisp::function #217#) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-effective-method) (lisp::quote #219#)) (system::mf (lisp::quote #441=#:|(DEFGENERIC COMPUTE-EFFECTIVE-METHOD)6252|) 186) (#441#) (lisp::function pcl::compute-effective-method) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-slot-accessor-info) (lisp::quote #220#)) (system::mf (lisp::quote #442=#:|(DEFGENERIC COMPUTE-SLOT-ACCESSOR-INFO)6252|) 187) (#442#) (lisp::function pcl::compute-slot-accessor-info) (pcl::proclaim-defgeneric (lisp::quote pcl::find-method-combination) (lisp::quote #221#)) (system::mf (lisp::quote #443=#:|(DEFGENERIC FIND-METHOD-COMBINATION)6252|) 188) (#443#) (lisp::function pcl::find-method-combination) (pcl::proclaim-defgeneric (lisp::quote #222#) (lisp::quote #223#)) (system::mf (lisp::quote #444=#:|(DEFGENERIC (SETF SLOT-ACCESSOR-FUNCTION))6252|) 189) (#444#) (lisp::function #222#) (pcl::proclaim-defgeneric (lisp::quote #224#) (lisp::quote #225#)) (system::mf (lisp::quote #445=#:|(DEFGENERIC (SETF SLOT-ACCESSOR-STD-P))6252|) 190) (#445#) (lisp::function #224#) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-boundp-using-class) (lisp::quote #226#)) (system::mf (lisp::quote #446=#:|(DEFGENERIC SLOT-BOUNDP-USING-CLASS)6252|) 191) (#446#) (lisp::function pcl::slot-boundp-using-class) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-makunbound-using-class) (lisp::quote #227#)) (system::mf (lisp::quote #447=#:|(DEFGENERIC SLOT-MAKUNBOUND-USING-CLASS)6252|) 192) (#447#) (lisp::function pcl::slot-makunbound-using-class) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-unbound) (lisp::quote #228#)) (system::mf (lisp::quote #448=#:|(DEFGENERIC SLOT-UNBOUND)6252|) 193) (#448#) (lisp::function pcl::slot-unbound) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-value-using-class) (lisp::quote #229#)) (system::mf (lisp::quote #449=#:|(DEFGENERIC SLOT-VALUE-USING-CLASS)6252|) 194) (#449#) (lisp::function pcl::slot-value-using-class) (pcl::proclaim-defgeneric (lisp::quote pcl::make-method-lambda) (lisp::quote #230#)) (system::mf (lisp::quote #450=#:|(DEFGENERIC MAKE-METHOD-LAMBDA)6252|) 195) (#450#) (lisp::function pcl::make-method-lambda) (pcl::proclaim-defgeneric (lisp::quote #231#) (lisp::quote #232#)) (system::mf (lisp::quote #451=#:|(DEFGENERIC (SETF SLOT-VALUE-USING-CLASS))6252|) 196) (#451#) (lisp::function #231#) (pcl::proclaim-defgeneric (lisp::quote pcl::make-method-initargs-form) (lisp::quote #233#)) (system::mf (lisp::quote #452=#:|(DEFGENERIC MAKE-METHOD-INITARGS-FORM)6252|) 197) (#452#) (lisp::function pcl::make-method-initargs-form) (pcl::proclaim-defgeneric (lisp::quote pcl::get-method) (lisp::quote #234#)) (system::mf (lisp::quote #453=#:|(DEFGENERIC GET-METHOD)6252|) 198) (#453#) (lisp::function pcl::get-method) (pcl::proclaim-defgeneric (lisp::quote pcl::find-method) (lisp::quote #235#)) (system::mf (lisp::quote #454=#:|(DEFGENERIC FIND-METHOD)6252|) 199) (#454#) (lisp::function pcl::find-method) (pcl::proclaim-defgeneric (lisp::quote #236#) (lisp::quote #237#)) (system::mf (lisp::quote #455=#:|(DEFGENERIC (SETF DOCUMENTATION))6252|) 200) (#455#) (lisp::function #236#) (pcl::proclaim-defgeneric (lisp::quote pcl::documentation) (lisp::quote #238#)) (system::mf (lisp::quote #456=#:|(DEFGENERIC DOCUMENTATION)6252|) 201) (#456#) (lisp::function pcl::documentation) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-named-method) (lisp::quote #239#)) (system::mf (lisp::quote #457=#:|(DEFGENERIC REMOVE-NAMED-METHOD)6252|) 202) (#457#) (lisp::function pcl::remove-named-method) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-missing) (lisp::quote #240#)) (system::mf (lisp::quote #458=#:|(DEFGENERIC SLOT-MISSING)6252|) 203) (#458#) (lisp::function pcl::slot-missing) (pcl::proclaim-defgeneric (lisp::quote pcl::allocate-instance) (lisp::quote #241#)) (system::mf (lisp::quote #459=#:|(DEFGENERIC ALLOCATE-INSTANCE)6252|) 204) (#459#) (lisp::function pcl::allocate-instance) (pcl::proclaim-defgeneric (lisp::quote pcl::ensure-class-using-class) (lisp::quote #242#)) (system::mf (lisp::quote #460=#:|(DEFGENERIC ENSURE-CLASS-USING-CLASS)6252|) 205) (#460#) (lisp::function pcl::ensure-class-using-class) (pcl::proclaim-defgeneric (lisp::quote pcl::ensure-generic-function-using-class) (lisp::quote #243#)) (system::mf (lisp::quote #461=#:|(DEFGENERIC ENSURE-GENERIC-FUNCTION-USING-CLASS)6252|) 206) (#461#) (lisp::function pcl::ensure-generic-function-using-class) (pcl::proclaim-defgeneric (lisp::quote pcl::initialize-instance) (lisp::quote #244#)) (system::mf (lisp::quote #462=#:|(DEFGENERIC INITIALIZE-INSTANCE)6252|) 207) (#462#) (lisp::function pcl::initialize-instance) (pcl::proclaim-defgeneric (lisp::quote pcl::make-instance) (lisp::quote #245#)) (system::mf (lisp::quote #463=#:|(DEFGENERIC MAKE-INSTANCE)6252|) 208) (#463#) (lisp::function pcl::make-instance) (pcl::proclaim-defgeneric (lisp::quote pcl::no-applicable-method) (lisp::quote #246#)) (system::mf (lisp::quote #464=#:|(DEFGENERIC NO-APPLICABLE-METHOD)6252|) 209) (#464#) (lisp::function pcl::no-applicable-method) (pcl::proclaim-defgeneric (lisp::quote pcl::no-primary-method) (lisp::quote #247#)) (system::mf (lisp::quote #465=#:|(DEFGENERIC NO-PRIMARY-METHOD)6252|) 210) (#465#) (lisp::function pcl::no-primary-method) (pcl::proclaim-defgeneric (lisp::quote pcl::reader-method-class) (lisp::quote #248#)) (system::mf (lisp::quote #466=#:|(DEFGENERIC READER-METHOD-CLASS)6252|) 211) (#466#) (lisp::function pcl::reader-method-class) (pcl::proclaim-defgeneric (lisp::quote pcl::reinitialize-instance) (lisp::quote #249#)) (system::mf (lisp::quote #467=#:|(DEFGENERIC REINITIALIZE-INSTANCE)6252|) 212) (#467#) (lisp::function pcl::reinitialize-instance) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote #250#)) (system::mf (lisp::quote #468=#:|(DEFGENERIC SHARED-INITIALIZE)6252|) 213) (#468#) (lisp::function pcl::shared-initialize) (pcl::proclaim-defgeneric (lisp::quote pcl::update-dependent) (lisp::quote #251#)) (system::mf (lisp::quote #469=#:|(DEFGENERIC UPDATE-DEPENDENT)6252|) 214) (#469#) (lisp::function pcl::update-dependent) (pcl::proclaim-defgeneric (lisp::quote pcl::update-instance-for-different-class) (lisp::quote #252#)) (system::mf (lisp::quote #470=#:|(DEFGENERIC UPDATE-INSTANCE-FOR-DIFFERENT-CLASS)6252|) 215) (#470#) (lisp::function pcl::update-instance-for-different-class) (pcl::proclaim-defgeneric (lisp::quote pcl::update-instance-for-redefined-class) (lisp::quote #253#)) (system::mf (lisp::quote #471=#:|(DEFGENERIC UPDATE-INSTANCE-FOR-REDEFINED-CLASS)6252|) 216) (#471#) (lisp::function pcl::update-instance-for-redefined-class) (pcl::proclaim-defgeneric (lisp::quote pcl::writer-method-class) (lisp::quote #254#)) (system::mf (lisp::quote #472=#:|(DEFGENERIC WRITER-METHOD-CLASS)6252|) 217) (#472#) (lisp::function pcl::writer-method-class))))
)
