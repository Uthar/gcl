       
#(#! 
(lisp::in-package :pcl)
#(pcl::*invalid-method-error* pcl::*method-combination-error* pcl::fast-method-call pcl::method-call conditions::case-failure :name conditions::etypecase :datum :expected-type (lisp::or . #0=(pcl::method-call lisp::function)) :possibilities #0# (lisp::or . #1=(pcl::method-call lisp::function)) #1# ((pcl::compute-effective-method #2=(:around) (lisp::generic-function lisp::method-combination lisp::t))) "The method combination type STANDARD accepts no options." pcl::*standard-method-combination* pcl::short-method-combination lisp::standard-class (pcl::standard-method-combination) pcl::operator :readers (pcl::short-combination-operator) :writers :initargs (:operator) pcl::identity-with-one-argument (pcl::short-combination-identity-with-one-argument) (:identity-with-one-argument) :predicate-name (pcl::short-method-combination-p) :documentation "" :identity-with-one-argument :operator pcl::define-method-combination (lisp::load lisp::eval) pcl::load-short-defcombin lisp::quote lisp::generic-function pcl::*the-class-t* lisp::standard-method :qualifiers :specializers :lambda-list (lisp::generic-function lisp::type pcl::options) :function :definition-source (:most-specific-first) (:most-specific-first) (:most-specific-last) "Illegal options to a short method combination type.~%~
            The method combination type ~S accepts one option which~%~
            must be either :MOST-SPECIFIC-FIRST or :MOST-SPECIFIC-LAST." :type :options "has no qualifiers" "has more than one qualifier" :around "has an illegal qualifier" "The method ~S ~A.~%~
                    The method combination type ~S was defined with the~%~
                    short form of DEFINE-METHOD-COMBINATION and so requires~%~
                    all methods have either the single qualifier ~S or the~%~
                    single qualifier :AROUND." :most-specific-last pcl::call-method lisp::error "No ~S methods for the generic function ~S." pcl::make-method :arguments :generic-function (lisp::load lisp::eval) pcl::load-long-defcombin lisp::function (lisp::generic-function lisp::type pcl::options) pcl::long-method-combination :arguments-lambda-list pcl::*long-method-combination-functions* pcl::.generic-function. lisp::apply lisp::lambda (pcl::method-combination-options pcl::.method-combination.) (pcl::.generic-function. pcl::.method-combination. pcl::.applicable-methods.) (lisp::declare (lisp::ignorable pcl::.generic-function. pcl::.method-combination. pcl::.applicable-methods.)) lisp::block pcl::.long-method-combination-function. lisp::or lisp::if lisp::and lisp::equal pcl::.specializers. (lisp::not (lisp::null pcl::.specializers.)) lisp::return-from "More than one method of type ~S ~
                                      with the same specializers." lisp::setq lisp::push pcl::.method. lisp::when lisp::null "No ~S methods." :most-specific-first lisp::nreverse lisp::ecase (:most-specific-last) lisp::let lisp::dolist (pcl::.method. pcl::.applicable-methods.) ((pcl::.qualifiers. (pcl::method-qualifiers pcl::.method.)) (pcl::.specializers. (pcl::method-specializers pcl::.method.))) (lisp::declare (lisp::ignorable pcl::.qualifiers. pcl::.specializers.)) lisp::cond (:description :order :required) :description :order :required (lisp::null pcl::.qualifiers.) lisp::* pcl::.qualifiers. pcl::qualifier-check-runtime "In the method group specifier ~S,~%~
                   ~S isn't a valid qualifier pattern." "methods matching one of the patterns: ~{~S, ~} ~S" "methods matching the pattern: ~S" lisp::nil pcl::required #3=(lisp::let lisp::let*) (pcl::memq (lisp::first pcl::wrapped-body) (lisp::quote #3#)) :report lisp::&rest lisp::&allow-other-keys lisp::&aux lisp::&key (lisp::&allow-other-keys) (lisp::&rest pcl::.ignore.) pcl::inner-result. (pcl::gf-lambda-list (pcl::generic-function-lambda-list pcl::.generic-function.)) lisp::list (lisp::quote lisp::destructuring-bind) (lisp::quote pcl::frob-combined-method-args) (lisp::quote pcl::.gf-args.) (lisp::list (lisp::quote lisp::quote) pcl::gf-lambda-list) pcl::.ignore. (lisp::quote (lisp::declare (lisp::ignore pcl::.ignore.))) (lisp::quote lisp::setq) (lisp::quote pcl::.gf-args.) lisp::&optional pcl::expand-long-defcombin pcl::expand-short-defcombin pcl::method-combination-error pcl::load-defclass pcl::make-top-level-form pcl::load-truename pcl::find-class pcl::intern-eql-specializer pcl::get-method pcl::find-method-combination pcl::make-instance pcl::remove-method pcl::add-method pcl::method-combination-type pcl::short-combination-operator pcl::short-combination-identity-with-one-argument pcl::method-combination-options pcl::method-qualifiers pcl::make-long-method-combination-function pcl::extract-declarations pcl::wrap-method-group-specifier-bindings pcl::deal-with-arguments-option pcl::parse-method-group-specifier pcl::parse-qualifier-pattern pcl::make-default-method-group-description lisp::&whole conditions::simple-assertion-failure lisp::nil conditions::continue conditions::restart-case pcl::loop-finish conditions::assert-report pcl::invalid-method-error pcl::make-short-method-combination system::structure-subtype-p conditions::error pcl::call-no-next-method (system::%init . #((system::setvv 166 (system::mc lisp::nil 19)) (system::mm (lisp::quote pcl::define-method-combination) 0) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-effective-method) (lisp::quote ((lisp::generic-function lisp::generic-function) (lisp::method-combination lisp::method-combination) pcl::applicable-methods))) (system::mf (lisp::quote pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-METHOD :AROUND (GENERIC-FUNCTION METHOD-COMBINATION T))|) 1) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-effective-method) (lisp::quote #2#) (lisp::quote (lisp::generic-function lisp::method-combination lisp::t)) (lisp::quote (lisp::generic-function lisp::method-combination pcl::applicable-methods)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-METHOD :AROUND (GENERIC-FUNCTION METHOD-COMBINATION T))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::find-method-combination) (lisp::quote ((lisp::generic-function lisp::generic-function) (lisp::type (lisp::eql (lisp::quote pcl::standard))) pcl::options))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD FIND-METHOD-COMBINATION (GENERIC-FUNCTION (EQL STANDARD) T))|) 2 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::find-method-combination) (lisp::quote lisp::nil) (lisp::quote (lisp::generic-function (lisp::eql pcl::standard) lisp::t)) (lisp::quote (lisp::generic-function lisp::type pcl::options)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD FIND-METHOD-COMBINATION (GENERIC-FUNCTION (EQL STANDARD) T))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (system::mf (lisp::quote #4=#:|Defclass SHORT-METHOD-COMBINATION9981|) 3) (#4#) (system::mfsfun (lisp::quote pcl::expand-short-defcombin) 4 1) (system::mf (lisp::quote pcl::load-short-defcombin) 5) (system::mf (lisp::quote pcl::make-short-method-combination) 6) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-effective-method) (lisp::quote ((lisp::generic-function lisp::generic-function) (pcl::combin pcl::short-method-combination) pcl::applicable-methods))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-METHOD (GENERIC-FUNCTION SHORT-METHOD-COMBINATION T))|) 7 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-effective-method) (lisp::quote lisp::nil) (lisp::quote (lisp::generic-function pcl::short-method-combination lisp::t)) (lisp::quote (lisp::generic-function pcl::combin pcl::applicable-methods)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-METHOD (GENERIC-FUNCTION SHORT-METHOD-COMBINATION T))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (system::mfsfun (lisp::quote pcl::expand-long-defcombin) 8 1) (system::*make-special (lisp::quote pcl::*long-method-combination-functions*)) (lisp::or (lisp::boundp (lisp::quote pcl::*long-method-combination-functions*)) (lisp::setq pcl::*long-method-combination-functions* (lisp::make-hash-table :test (lisp::function lisp::eq)))) (system::mf (lisp::quote pcl::load-long-defcombin) 9) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-effective-method) (lisp::quote ((lisp::generic-function lisp::generic-function) (pcl::combin pcl::long-method-combination) pcl::applicable-methods))) (system::mf (lisp::quote pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-METHOD (GENERIC-FUNCTION LONG-METHOD-COMBINATION T))|) 10) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-effective-method) (lisp::quote lisp::nil) (lisp::quote (lisp::generic-function pcl::long-method-combination lisp::t)) (lisp::quote (lisp::generic-function pcl::combin pcl::applicable-methods)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-METHOD (GENERIC-FUNCTION LONG-METHOD-COMBINATION T))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (system::mf (lisp::quote pcl::make-long-method-combination-function) 11) (system::mfsfun (lisp::quote pcl::wrap-method-group-specifier-bindings) 12 3) (system::mf (lisp::quote pcl::parse-method-group-specifier) 13) (system::mfsfun (lisp::quote pcl::parse-qualifier-pattern) 14 2) (system::mfsfun (lisp::quote pcl::qualifier-check-runtime) 15 2) (system::mfsfun (lisp::quote pcl::make-default-method-group-description) 16 1) (system::setvv 116 lisp::lambda-list-keywords) (system::mfsfun (lisp::quote pcl::deal-with-arguments-option) 17 2) (system::mfsfun (lisp::quote pcl::frob-combined-method-args) 18 4) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-METHOD :AROUND (GENERIC-FUNCTION METHOD-COMBINATION T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::generic-function lisp::method-combination pcl::applicable-methods))) (system::debug (lisp::quote pcl::expand-short-defcombin) (lisp::quote (lisp::type pcl::documentation pcl::identity-with-one-arg pcl::operator))) (system::debug (lisp::quote pcl::load-short-defcombin) (lisp::quote (lisp::type pcl::operator pcl::ioa pcl::doc lisp::truename pcl::specializers pcl::old-method pcl::new-method))) (system::debug (lisp::quote pcl::make-short-method-combination) (lisp::quote (lisp::type pcl::options pcl::operator pcl::ioa lisp::method pcl::doc))) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-METHOD (GENERIC-FUNCTION SHORT-METHOD-COMBINATION T))|) (lisp::quote (lisp::type pcl::m))) (system::debug (lisp::quote pcl::load-long-defcombin) (lisp::quote (lisp::type pcl::doc lisp::function pcl::arguments-lambda-list pcl::specializers pcl::old-method pcl::new-method))) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-METHOD (GENERIC-FUNCTION LONG-METHOD-COMBINATION T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::generic-function pcl::combin pcl::applicable-methods))) (system::debug (lisp::quote pcl::make-long-method-combination-function) (lisp::quote (lisp::nil pcl::ll pcl::method-group-specifiers pcl::arguments-option pcl::gf-var pcl::body #:g10032 #:g10034))) (system::debug (lisp::quote pcl::wrap-method-group-specifier-bindings) (lisp::quote (pcl::method-group-specifier #:g10043))) (system::debug (lisp::quote pcl::parse-method-group-specifier) (lisp::quote (pcl::method-group-specifier #:g10051 #:g10053))) (system::debug (lisp::quote pcl::deal-with-arguments-option) (lisp::quote (#:g10068))) (system::debug (lisp::quote pcl::frob-combined-method-args) (lisp::quote (#:g10075 #:g10077))))))
)
