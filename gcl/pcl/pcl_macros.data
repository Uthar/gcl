       
#(#! 
(lisp::in-package :pcl)
#(lisp::member (:test (lisp::function lisp::eq)) lisp::assoc (:test (lisp::function lisp::eq)) lisp::rassoc (:test (lisp::function lisp::eq)) lisp::delete (:test (lisp::function lisp::eq)) lisp::position (:test (lisp::function lisp::eq)) lisp::not lisp::eq (lisp::car lisp::cadr lisp::caddr lisp::cadddr) lisp::cddddr (lisp::identity lisp::cdr lisp::cddr lisp::cdddr lisp::cddddr) #0=(lisp::and lisp::fixnum (lisp::integer 0 lisp::*)) lisp::if lisp::or lisp::symbolp lisp::numberp lisp::and lisp::listp lisp::car (lisp::quote #1=(lisp::quote lisp::function)) lisp::let (lisp::gensym) lisp::push lisp::let* pcl::wrapped-body lisp::list (lisp::quote lisp::let) lisp::mapcar (lisp::function lisp::list) lisp::reverse lisp::declare pcl::*keyword-package* lisp::string lisp::*package* #1# :test lisp::error "The value of ~A, ~S is not one of ~S." lisp::quote pcl::assq lisp::progn lisp::setf lisp::cons (lisp::progn pcl::.destructure-form.) pcl::*destructure-vars* (pcl::.destructure-form.) lisp::setq pcl::.destructure-form. (lisp::nil lisp::ignore) (lisp::nil lisp::ignore) (lisp::nil lisp::ignore) lisp::cdr lisp::pop pcl::head pcl::tail (lisp::last pcl::head) (lisp::values (lisp::function (lisp::lambda (pcl::value) (lisp::if (lisp::null pcl::head) (lisp::setq pcl::head (lisp::setq pcl::tail (lisp::list pcl::value))) (lisp::unless (pcl::memq pcl::value pcl::head) (lisp::setq pcl::tail (lisp::cdr (lisp::rplacd pcl::tail (lisp::list pcl::value)))))))) (lisp::function (lisp::lambda lisp::nil pcl::head))) pcl::.plist-tail. lisp::loop (lisp::when (lisp::null pcl::.plist-tail.) (lisp::return lisp::nil)) (lisp::pop pcl::.plist-tail.) (lisp::when (lisp::null pcl::.plist-tail.) (lisp::error "Malformed plist in doplist, odd number of elements.")) (lisp::pop pcl::.plist-tail.) pcl::.dolist-carefully. (lisp::when (lisp::null pcl::.dolist-carefully.) (lisp::return lisp::nil)) (lisp::consp pcl::.dolist-carefully.) (lisp::pop pcl::.dolist-carefully.) lisp::format "#<" " " pcl::printing-random-thing-internal ">" #\- #\Space system::define-compiler-macro lisp::cadr lisp::cddr (lisp::list* lisp::nil (lisp::function pcl::function-returning-nil) lisp::nil) pcl::*find-class* "~S is not a legal class name." pcl::*create-classes-from-internal-structure-definitions-p* "No class named: ~S." "~S is not a legal class name." pcl::*boot-state* pcl::complete pcl::braid pcl::make-instance-function "~S is not a legal class name." "~S is not a legal class name." iterate::gathering pcl::.gathering1. lisp::macrolet ((pcl::gather1 (pcl::x) (lisp::list (lisp::quote iterate::gather) pcl::x (lisp::quote pcl::.gathering1.)))) pcl::limit ((pcl::result (lisp::make-array pcl::limit)) (pcl::index 0)) (lisp::values (lisp::function (lisp::lambda (pcl::value) (lisp::if (lisp::= pcl::index pcl::limit) (lisp::error "vectorizing more elements than promised.") (lisp::progn (lisp::setf (lisp::svref pcl::result pcl::index) pcl::value) (lisp::incf pcl::index) pcl::value)))) (lisp::function (lisp::lambda lisp::nil pcl::result))) lisp::function lisp::lambda (pcl::finish) (lisp::endp pcl::tail) (lisp::funcall pcl::finish) lisp::prog1 (lisp::car pcl::tail) lisp::funcall (pcl::finish) (lisp::if (lisp::endp pcl::tail) (lisp::funcall pcl::finish) pcl::tail) lisp::apply lisp::eval-when (lisp::compile lisp::load lisp::eval) lisp::dolist pcl::fn-name #2=(pcl::do-standard-defsetf-1 pcl::fn-name) system::setf-method system::setf-update-fn system::setf-lambda lisp::get (lisp::quote pcl::definition-before-pcl) pcl::*redefined-functions* pcl::definition-before-pcl pcl::make-plist pcl::remtail lisp::concatenate pcl::string-append lisp::eql :pretty-name pcl::extract-declarations pcl::destructure pcl::destructure-internal :initial-value pcl::legal-class-name-p pcl::function-returning-nil pcl::structure-type-p pcl::find-structure-class pcl::find-class-from-cell pcl::find-class-cell pcl::find-class-predicate-from-cell pcl::class-predicate-name pcl::forward-referenced-class-p pcl::update-initialize-info-internal pcl::initialize-info pcl::find-class pcl::class-wrapper :size :by pcl::do-standard-defsetf-1 pcl::make-caxr pcl::make-cdxr (system::%init . #((lisp::proclaim (lisp::quote (lisp::declaration lisp::values pcl::arglist pcl::indentation lisp::class pcl::variable-rebinding pcl::pcl-fast-call pcl::method-name pcl::method-lambda-list))) (system::mm (lisp::quote pcl::memq) 0) (system::mm (lisp::quote pcl::assq) 1) (system::mm (lisp::quote pcl::rassq) 2) (system::mm (lisp::quote pcl::delq) 3) (system::mm (lisp::quote pcl::posq) 4) (system::mm (lisp::quote pcl::neq) 5) (system::mfsfun (lisp::quote pcl::make-caxr) 6 2) (system::mfsfun (lisp::quote pcl::make-cdxr) 7 2) (system::putprop (lisp::quote pcl::non-negative-fixnum) (lisp::quote (lisp::deftype pcl::non-negative-fixnum lisp::nil (lisp::quote #0#))) (lisp::quote system::deftype-form)) (system::mf (lisp::quote #3=#:g1905) 8) (system::putprop (lisp::quote pcl::non-negative-fixnum) (lisp::symbol-function (lisp::quote #3#)) (lisp::quote system::deftype-definition)) (system::putprop (lisp::quote pcl::non-negative-fixnum) lisp::nil (lisp::quote system::type-documentation)) (system::mfvfun (lisp::quote pcl::true) 9 16384) (system::mfvfun (lisp::quote pcl::false) 10 16384) (system::mfvfun (lisp::quote pcl::zero) 11 16384) (system::mfsfun (lisp::quote pcl::make-plist) 12 2) (system::mfsfun (lisp::quote pcl::remtail) 13 2) (system::putprop (lisp::quote pcl::once-only) (lisp::quote 1) #4=(lisp::quote system::pretty-print-format)) (system::mm (lisp::quote pcl::once-only) 14) (system::mf (lisp::quote pcl::extract-declarations) 15) (system::mfvfun (lisp::quote pcl::get-declaration) 16 770) (system::*make-special (lisp::quote pcl::*keyword-package*)) (lisp::or (lisp::boundp (lisp::quote pcl::*keyword-package*)) (lisp::setq pcl::*keyword-package* (lisp::find-package (lisp::quote lisp::keyword)))) (system::mf (lisp::quote pcl::make-keyword) 17) (system::mfvfun (lisp::quote pcl::string-append) 18 16384) (system::mf (lisp::quote pcl::symbol-append) 19) (system::mm (lisp::quote pcl::check-member) 20) (system::mm (lisp::quote pcl::alist-entry) 21) (system::putprop (lisp::quote pcl::pcl-destructuring-bind) (lisp::quote 2) #4#) (system::mm (lisp::quote pcl::pcl-destructuring-bind) 22) (system::mf (lisp::quote pcl::destructure) 23) (system::mfsfun (lisp::quote pcl::destructure-internal) 24 2) (system::mm (lisp::quote pcl::collecting-once) 25) (system::putprop (lisp::quote pcl::doplist) (lisp::quote 2) #4#) (system::mm (lisp::quote pcl::doplist) 26) (system::mm (lisp::quote pcl::if*) 27) (system::putprop (lisp::quote pcl::dolist-carefully) (lisp::quote 1) #4#) (system::mm (lisp::quote pcl::dolist-carefully) 28) (system::putprop (lisp::quote pcl::printing-random-thing) (lisp::quote 1) #4#) (system::mm (lisp::quote pcl::printing-random-thing) 29) (system::mfsfun (lisp::quote pcl::printing-random-thing-internal) 30 2) (system::mfvfun (lisp::quote pcl::capitalize-words) 31 513) (system::putprop (lisp::quote pcl::define-compiler-macro) (lisp::quote 2) #4#) (system::mm (lisp::quote pcl::define-compiler-macro) 32) (system::*make-special (lisp::quote pcl::*find-class*)) (lisp::or (lisp::boundp (lisp::quote pcl::*find-class*)) (lisp::setq pcl::*find-class* (lisp::make-hash-table :test (lisp::function lisp::eq)))) (system::mfsfun (lisp::quote pcl::make-constant-function) 33 1) (system::mfsfun (lisp::quote pcl::function-returning-nil) 34 1) (system::mfsfun (lisp::quote pcl::function-returning-t) 35 1) (system::mm (lisp::quote pcl::find-class-cell-class) 36) (system::mm (lisp::quote pcl::find-class-cell-predicate) 37) (system::mm (lisp::quote pcl::find-class-cell-make-instance-function-keys) 38) (system::mm (lisp::quote pcl::make-find-class-cell) 39) (system::mfvfun (lisp::quote pcl::find-class-cell) 40 513) (system::*make-special (lisp::quote pcl::*create-classes-from-internal-structure-definitions-p*)) (lisp::or (lisp::boundp (lisp::quote pcl::*create-classes-from-internal-structure-definitions-p*)) (lisp::setq pcl::*create-classes-from-internal-structure-definitions-p* lisp::t)) (system::mfvfun (lisp::quote pcl::find-class-from-cell) 41 770) (system::mfvfun (lisp::quote pcl::find-class-predicate-from-cell) 42 770) (system::mfsfun (lisp::quote pcl::legal-class-name-p) 43 1) (system::mfvfun (lisp::quote pcl::find-class) 44 769) (system::mfvfun (lisp::quote pcl::find-class-predicate) 45 769) (system::*make-special (lisp::quote pcl::*boot-state*)) (lisp::or (lisp::boundp (lisp::quote pcl::*boot-state*)) (lisp::setq pcl::*boot-state* lisp::nil)) (system::mf (lisp::quote pcl::g2035) 46) (system::putprop (lisp::quote pcl::find-class) (lisp::function pcl::g2035) #5=(lisp::quote system::setf-function)) (system::mf (lisp::quote pcl::g2044) 47) (system::putprop (lisp::quote pcl::find-class-predicate) (lisp::function pcl::g2044) #5#) (system::mf (lisp::quote pcl::find-wrapper) 48) (system::putprop (lisp::quote pcl::gathering1) (lisp::quote 1) #4#) (system::mm (lisp::quote pcl::gathering1) 49) (system::mm (lisp::quote pcl::vectorizing) 50) (system::mm (lisp::quote pcl::*list-elements) 51) (system::mm (lisp::quote pcl::*list-tails) 52) (system::mm (lisp::quote pcl::function-funcall) 53) (system::mm (lisp::quote pcl::function-apply) 54) (system::mfsfun (lisp::quote pcl::get-setf-function-name) 55 1) (system::mm (lisp::quote pcl::do-standard-defsetf) 56) (system::mfsfun (lisp::quote pcl::do-standard-defsetfs-for-defclass) 57 1) (system::mfsfun (lisp::quote pcl::do-standard-defsetf-1) 58 1) (system::mfsfun (lisp::quote pcl::setfboundp) 59 1) (lisp::block lisp::nil (lisp::let* ((#6=#:g2073 (lisp::quote (pcl::class-wrapper pcl::generic-function-name pcl::method-function-plist pcl::method-function-get pcl::plist-value pcl::object-plist pcl::gdefinition pcl::slot-value-using-class))) (pcl::fn-name (lisp::car #6#))) (lisp::tagbody #7=#:g2074 (lisp::if (lisp::endp #6#) (lisp::return (lisp::progn lisp::nil))) (lisp::tagbody #2#) (lisp::setq #6# (lisp::cdr #6#) pcl::fn-name (lisp::car #6#)) (lisp::go #7#)))) (system::putprop (lisp::quote pcl::slot-value) (lisp::quote pcl::set-slot-value) (lisp::quote system::setf-update-fn)) (lisp::remprop (lisp::quote pcl::slot-value) (lisp::quote system::setf-lambda)) (lisp::remprop (lisp::quote pcl::slot-value) (lisp::quote system::setf-method)) (system::putprop (lisp::quote pcl::slot-value) lisp::nil (lisp::quote system::setf-documentation)) (system::*make-special (lisp::quote pcl::*redefined-functions*)) (lisp::or (lisp::boundp (lisp::quote pcl::*redefined-functions*)) (lisp::setq pcl::*redefined-functions* lisp::nil)) (system::mm (lisp::quote pcl::original-definition) 60) (system::mfsfun (lisp::quote pcl::redefine-function) 61 2) (system::debug (lisp::quote pcl::extract-declarations) (lisp::quote (pcl::body pcl::environment #:g1918 lisp::declaration))) (system::debug (lisp::quote pcl::get-declaration) (lisp::quote (pcl::d pcl::declarations pcl::default))) (system::debug (lisp::quote pcl::make-keyword) (lisp::quote (lisp::symbol))) (system::debug (lisp::quote pcl::string-append) (lisp::quote (pcl::strings))) (system::debug (lisp::quote pcl::symbol-append) (lisp::quote (pcl::sym1 pcl::sym2 lisp::package))) (system::debug (lisp::quote pcl::destructure) (lisp::quote (pcl::pattern pcl::form pcl::*destructure-vars*))) (system::debug (lisp::quote pcl::destructure-internal) (lisp::quote (pcl::pending-pops #:g1976))) (system::debug (lisp::quote pcl::capitalize-words) (lisp::quote (lisp::string pcl::dashes-p))) (system::debug (lisp::quote pcl::make-constant-function) (lisp::quote (pcl::value))) (system::debug (lisp::quote pcl::find-class-cell) (lisp::quote (lisp::symbol pcl::dont-create-p))) (system::debug (lisp::quote pcl::find-class-from-cell) (lisp::quote (lisp::symbol pcl::cell pcl::errorp))) (system::debug (lisp::quote pcl::find-class-predicate-from-cell) (lisp::quote (lisp::symbol pcl::cell pcl::errorp))) (system::debug (lisp::quote pcl::find-class) (lisp::quote (lisp::symbol pcl::errorp))) (system::debug (lisp::quote pcl::find-class-predicate) (lisp::quote (lisp::symbol pcl::errorp))) (system::debug (lisp::quote pcl::g2035) (lisp::quote (pcl::new-value lisp::symbol #:g2041 pcl::keys+aok))) (system::debug (lisp::quote pcl::g2044) (lisp::quote (pcl::new-value lisp::symbol #:g2045))) (system::debug (lisp::quote pcl::find-wrapper) (lisp::quote (lisp::symbol))) (system::debug (lisp::quote pcl::do-standard-defsetfs-for-defclass) (lisp::quote (pcl::name))))))
)
