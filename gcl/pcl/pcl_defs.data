       
#(#! 
(lisp::in-package :pcl)
#((lisp::quote lisp::function) lisp::cond lisp::let system::traced system::trace-call pcl::class-prototype-specializer :object (lisp::class pcl::prototype pcl::class-eq lisp::eql) "~S is not a legal specializer type" pcl::*boot-state* pcl::complete "~s is neither a type nor a specializer" pcl::*the-class-t* "bad argument to type-class" lisp::member (lisp::not lisp::and lisp::or) "~s is not a type" pcl::early pcl::*in-precompute-effective-methods-p* lisp::deftype lisp::quote lisp::satisfies "~@[~A ~]TYPE-PREDICATE ~A ~A" pcl::*the-pcl-package* "~@[~A ~]TYPE-PREDICATE ~A" pcl::*built-in-class-symbols* "*THE-CLASS-~A*" pcl::*built-in-wrapper-symbols* "*THE-WRAPPER-OF-~A*" lisp::class lisp::progn pcl::defmethod (((pcl::x lisp::t)) lisp::nil) pcl::x "~A::~A class predicate" lisp::built-in-class pcl::slot-object pcl::slot-class (lisp::t) lisp::structure-object lisp::structure-class (pcl::slot-object) lisp::standard-object lisp::standard-class (pcl::slot-object) pcl::metaobject (lisp::standard-object) pcl::specializer (pcl::metaobject) :initfunction :name lisp::type :readers (pcl::specializer-type) :writers :initargs (:initform lisp::nil) pcl::definition-source-mixin (lisp::standard-object) pcl::source (pcl::definition-source) (:definition-source) (:initform (pcl::load-truename)) pcl::plist-mixin (lisp::standard-object) pcl::plist (pcl::object-plist) ((lisp::setf pcl::object-plist)) (:initform lisp::nil) (pcl::object-plist) pcl::documentation-mixin (pcl::plist-mixin) pcl::dependent-update-mixin (pcl::plist-mixin) (pcl::documentation-mixin pcl::dependent-update-mixin pcl::definition-source-mixin pcl::specializer) pcl::name (pcl::class-name) ((lisp::setf pcl::class-name)) (:name) (:initform lisp::nil) pcl::class-eq-specializer (pcl::class-eq-specializer) (:initform lisp::nil) pcl::direct-superclasses (pcl::class-direct-superclasses) (:initform lisp::nil) pcl::direct-subclasses (pcl::class-direct-subclasses) (:initform lisp::nil) pcl::direct-methods (:initform (lisp::cons lisp::nil lisp::nil)) pcl::predicate-name (pcl::class-predicate-name) (:initform lisp::nil) (pcl::class-name) pcl::pcl-class (lisp::class) pcl::class-precedence-list (pcl::class-precedence-list) pcl::can-precede-list (pcl::class-can-precede-list) (:initform lisp::nil) pcl::incompatible-superclass-list (pcl::class-incompatible-superclass-list) ((lisp::setf pcl::class-incompatible-superclass-list)) (:initform lisp::nil) pcl::wrapper (pcl::class-wrapper) (:initform lisp::nil) pcl::prototype (pcl::class-prototype) (:initform lisp::nil) (pcl::class-incompatible-superclass-list) (pcl::pcl-class) pcl::direct-slots (pcl::class-direct-slots) ((lisp::setf pcl::class-direct-slots)) (:initform lisp::nil) pcl::slots (pcl::class-slots) ((lisp::setf pcl::class-slots)) (:initform lisp::nil) pcl::initialize-info (pcl::class-initialize-info) ((lisp::setf pcl::class-initialize-info)) (:initform lisp::nil) (pcl::class-initialize-info pcl::class-slots pcl::class-direct-slots) pcl::std-class (pcl::slot-class) (pcl::std-class) pcl::funcallable-standard-class (pcl::std-class) pcl::forward-referenced-class (pcl::pcl-class) (pcl::pcl-class) (pcl::slot-class) pcl::defstruct-form (pcl::class-defstruct-form) ((lisp::setf pcl::class-defstruct-form)) (:initform lisp::nil) pcl::defstruct-constructor (pcl::class-defstruct-constructor) ((lisp::setf pcl::class-defstruct-constructor)) (:initform lisp::nil) pcl::from-defclass-p (:from-defclass-p) (:initform lisp::nil) (pcl::class-defstruct-constructor pcl::class-defstruct-form) pcl::specializer-with-object (pcl::specializer) pcl::exact-class-specializer (pcl::specializer) (pcl::exact-class-specializer pcl::specializer-with-object) lisp::object (pcl::specializer-object pcl::specializer-class) (:class) (pcl::specializer-with-object) (pcl::specializer-object pcl::specializer-class) (:class) pcl::eql-specializer (pcl::exact-class-specializer pcl::specializer-with-object) (pcl::eql-specializer-object pcl::specializer-object) (:object) pcl::*eql-specializer-table* "" pcl::slot-definition (pcl::metaobject) (pcl::slot-definition-name) ((lisp::setf pcl::slot-definition-name)) (:name) (:initform lisp::nil) pcl::initform (pcl::slot-definition-initform) ((lisp::setf pcl::slot-definition-initform)) (:initform) (:initform lisp::nil) pcl::initfunction (pcl::slot-definition-initfunction) ((lisp::setf pcl::slot-definition-initfunction)) (:initfunction) (:initform lisp::nil) pcl::readers (pcl::slot-definition-readers) ((lisp::setf pcl::slot-definition-readers)) (:readers) (:initform lisp::nil) pcl::writers (pcl::slot-definition-writers) ((lisp::setf pcl::slot-definition-writers)) (:writers) (:initform lisp::nil) pcl::initargs (pcl::slot-definition-initargs) ((lisp::setf pcl::slot-definition-initargs)) (:initargs) (:initform lisp::nil) (pcl::slot-definition-type) ((lisp::setf pcl::slot-definition-type)) (:type) (:initform lisp::t) pcl::documentation (:documentation) (:initform "") (pcl::slot-definition-class) ((lisp::setf pcl::slot-definition-class)) (:class) (:initform lisp::nil) (pcl::slot-definition-class pcl::slot-definition-type pcl::slot-definition-initargs pcl::slot-definition-writers pcl::slot-definition-readers pcl::slot-definition-initfunction pcl::slot-definition-initform pcl::slot-definition-name) :instance pcl::standard-slot-definition (pcl::slot-definition) pcl::allocation (pcl::slot-definition-allocation) ((lisp::setf pcl::slot-definition-allocation)) (:allocation) (:initform :instance) (pcl::slot-definition-allocation) pcl::structure-slot-definition (pcl::slot-definition) pcl::defstruct-accessor-symbol (pcl::slot-definition-defstruct-accessor-symbol) ((lisp::setf pcl::slot-definition-defstruct-accessor-symbol)) (:defstruct-accessor-symbol) (:initform lisp::nil) pcl::internal-reader-function (pcl::slot-definition-internal-reader-function) ((lisp::setf pcl::slot-definition-internal-reader-function)) (:internal-reader-function) (:initform lisp::nil) pcl::internal-writer-function (pcl::slot-definition-internal-writer-function) ((lisp::setf pcl::slot-definition-internal-writer-function)) (:internal-writer-function) (:initform lisp::nil) (pcl::slot-definition-internal-writer-function pcl::slot-definition-internal-reader-function pcl::slot-definition-defstruct-accessor-symbol) pcl::direct-slot-definition (pcl::slot-definition) pcl::effective-slot-definition (pcl::slot-definition) pcl::reader-function (pcl::slot-definition-reader-function) ((lisp::setf pcl::slot-definition-reader-function)) pcl::writer-function (pcl::slot-definition-writer-function) ((lisp::setf pcl::slot-definition-writer-function)) pcl::boundp-function (pcl::slot-definition-boundp-function) ((lisp::setf pcl::slot-definition-boundp-function)) pcl::accessor-flags (:initform 0) (pcl::slot-definition-boundp-function pcl::slot-definition-writer-function pcl::slot-definition-reader-function) pcl::standard-direct-slot-definition (pcl::standard-slot-definition pcl::direct-slot-definition) pcl::standard-effective-slot-definition (pcl::standard-slot-definition pcl::effective-slot-definition) pcl::location (pcl::slot-definition-location) ((lisp::setf pcl::slot-definition-location)) (:initform lisp::nil) (pcl::slot-definition-location) pcl::structure-direct-slot-definition (pcl::structure-slot-definition pcl::direct-slot-definition) pcl::structure-effective-slot-definition (pcl::structure-slot-definition pcl::effective-slot-definition) lisp::method (pcl::metaobject) lisp::standard-method (pcl::definition-source-mixin pcl::plist-mixin lisp::method) lisp::generic-function (pcl::method-generic-function) ((lisp::setf pcl::method-generic-function)) (:initform lisp::nil) pcl::specializers (pcl::method-specializers) (:specializers) (:initform lisp::nil) pcl::lambda-list (pcl::method-lambda-list) (:lambda-list) (:initform lisp::nil) lisp::function (:function) (:initform lisp::nil) pcl::fast-function (pcl::method-fast-function) (:fast-function) (:initform lisp::nil) (pcl::method-generic-function) pcl::standard-accessor-method (lisp::standard-method) pcl::slot-name (pcl::accessor-method-slot-name) (:slot-name) (:initform lisp::nil) (pcl::accessor-method-slot-definition) (:slot-definition) (:initform lisp::nil) pcl::standard-reader-method (pcl::standard-accessor-method) pcl::standard-writer-method (pcl::standard-accessor-method) pcl::standard-boundp-method (pcl::standard-accessor-method) (pcl::dependent-update-mixin pcl::definition-source-mixin pcl::documentation-mixin pcl::metaobject) pcl::*standard-method-combination* pcl::*the-class-standard-method* lisp::standard-generic-function (lisp::generic-function) (pcl::generic-function-name) ((lisp::setf pcl::generic-function-name)) (:name) (:initform lisp::nil) pcl::methods (pcl::generic-function-methods) ((lisp::setf pcl::generic-function-methods)) (:initform lisp::nil) pcl::method-class (pcl::generic-function-method-class) ((lisp::setf pcl::generic-function-method-class)) (:method-class) lisp::method-combination (pcl::generic-function-method-combination) ((lisp::setf pcl::generic-function-method-combination)) (:method-combination) pcl::arg-info (pcl::gf-arg-info) (:initform (pcl::make-arg-info)) pcl::dfun-state (pcl::gf-dfun-state) ((lisp::setf pcl::gf-dfun-state)) (:initform lisp::nil) pcl::pretty-arglist (pcl::gf-pretty-arglist) ((lisp::setf pcl::gf-pretty-arglist)) (:initform lisp::nil) :direct-default-initargs :method-class :method-combination (pcl::gf-pretty-arglist pcl::gf-dfun-state pcl::generic-function-method-combination pcl::generic-function-method-class pcl::generic-function-methods pcl::generic-function-name) (pcl::metaobject) pcl::standard-method-combination (pcl::definition-source-mixin lisp::method-combination) (pcl::method-combination-type) (:type) (pcl::method-combination-documentation) (:documentation) pcl::options (pcl::method-combination-options) (:options) lisp::fdefinition pcl::unencapsulated-fdefinition pcl::fdefine-carefully pcl::find-class pcl::ensure-class pcl::coerce-to-class pcl::make-instance pcl::class-eq lisp::eql pcl::intern-eql-specializer pcl::specializerp pcl::specializer-type pcl::type-from-specializer pcl::class-of pcl::make-type-predicate-name pcl::make-type-predicate pcl::gdefinition pcl::do-satisfies-deftype pcl::find-class-cell pcl::*normalize-type lisp::not lisp::and lisp::or pcl::convert-to-system-type pcl::class-name pcl::wrapper-eq pcl::specializer-applicable-using-type-p lisp::subtypep walker::variable-declaration pcl::object-plist pcl::load-defclass pcl::false lisp::nil lisp::nil lisp::nil pcl::true lisp::nil pcl::zero lisp::nil lisp::nil lisp::nil pcl::make-arg-info pcl::load-truename (system::%init . #((system::setvv 389 (system::mc lisp::nil 82)) (system::setvv 388 (system::mc lisp::nil 81)) (system::setvv 387 (system::mc lisp::nil 80)) (system::setvv 385 (system::mc lisp::nil 79)) (system::setvv 383 (system::mc lisp::nil 78)) (system::setvv 382 (system::mc lisp::nil 77)) (system::setvv 381 (system::mc lisp::nil 76)) (system::*make-special (lisp::quote pcl::*defclass-times*)) (lisp::or (lisp::boundp (lisp::quote pcl::*defclass-times*)) (lisp::setq pcl::*defclass-times* (lisp::quote (lisp::load lisp::eval)))) (system::*make-special (lisp::quote pcl::*defmethod-times*)) (lisp::or (lisp::boundp (lisp::quote pcl::*defmethod-times*)) (lisp::setq pcl::*defmethod-times* (lisp::quote (lisp::load lisp::eval)))) (system::*make-special (lisp::quote pcl::*defgeneric-times*)) (lisp::or (lisp::boundp (lisp::quote pcl::*defgeneric-times*)) (lisp::setq pcl::*defgeneric-times* (lisp::quote (lisp::load lisp::eval)))) (system::*make-special (lisp::quote pcl::*fegf-started-p*)) (lisp::or (lisp::boundp (lisp::quote pcl::*fegf-started-p*)) (lisp::setq pcl::*fegf-started-p* lisp::nil)) (lisp::if (lisp::eq pcl::*boot-state* (lisp::quote pcl::complete)) (lisp::progn (lisp::error "Trying to load (or compile) PCL in an environment in which it~%~
            has already been loaded.  This doesn't work, you will have to~%~
            get a fresh lisp (reboot) and then load PCL."))) (lisp::if pcl::*boot-state* (lisp::progn (lisp::cerror "Try loading (or compiling) PCL anyways." "Trying to load (or compile) PCL in an environment in which it~%~
             has already been partially loaded.  This may not work, you may~%~
             need to get a fresh lisp (reboot) and then load PCL."))) (system::mm (lisp::quote pcl::parse-gspec) 0) (system::mfsfun (lisp::quote pcl::unencapsulated-fdefinition) 1 1) (system::mfsfun (lisp::quote pcl::fdefine-carefully) 2 2) (system::mfsfun (lisp::quote pcl::gboundp) 3 1) (system::mfsfun (lisp::quote pcl::gmakunbound) 4 1) (system::mfsfun (lisp::quote pcl::gdefinition) 5 1) (system::mf (lisp::quote pcl::g2402) 6) (system::putprop (lisp::quote pcl::gdefinition) (lisp::function pcl::g2402) #0=(lisp::quote system::setf-function)) (lisp::proclaim (lisp::quote (lisp::special pcl::*the-class-t* pcl::*the-class-vector* pcl::*the-class-symbol* pcl::*the-class-string* pcl::*the-class-sequence* pcl::*the-class-rational* pcl::*the-class-ratio* pcl::*the-class-number* pcl::*the-class-null* pcl::*the-class-list* pcl::*the-class-integer* pcl::*the-class-float* pcl::*the-class-cons* pcl::*the-class-complex* pcl::*the-class-character* pcl::*the-class-bit-vector* pcl::*the-class-array* pcl::*the-class-slot-object* pcl::*the-class-standard-object* pcl::*the-class-structure-object* pcl::*the-class-class* pcl::*the-class-generic-function* pcl::*the-class-built-in-class* pcl::*the-class-slot-class* pcl::*the-class-structure-class* pcl::*the-class-standard-class* pcl::*the-class-funcallable-standard-class* pcl::*the-class-method* pcl::*the-class-standard-method* pcl::*the-class-standard-reader-method* pcl::*the-class-standard-writer-method* pcl::*the-class-standard-boundp-method* pcl::*the-class-standard-generic-function* pcl::*the-class-standard-effective-slot-definition* pcl::*the-eslotd-standard-class-slots* pcl::*the-eslotd-funcallable-standard-class-slots*))) (lisp::proclaim (lisp::quote (lisp::special pcl::*the-wrapper-of-t* pcl::*the-wrapper-of-vector* pcl::*the-wrapper-of-symbol* pcl::*the-wrapper-of-string* pcl::*the-wrapper-of-sequence* pcl::*the-wrapper-of-rational* pcl::*the-wrapper-of-ratio* pcl::*the-wrapper-of-number* pcl::*the-wrapper-of-null* pcl::*the-wrapper-of-list* pcl::*the-wrapper-of-integer* pcl::*the-wrapper-of-float* pcl::*the-wrapper-of-cons* pcl::*the-wrapper-of-complex* pcl::*the-wrapper-of-character* pcl::*the-wrapper-of-bit-vector* pcl::*the-wrapper-of-array*))) (system::mf (lisp::quote pcl::coerce-to-class) 7) (system::mf (lisp::quote pcl::specializer-from-type) 8) (system::mf (lisp::quote pcl::type-from-specializer) 9) (system::mfsfun (lisp::quote pcl::type-class) 10 1) (system::mf (lisp::quote pcl::class-eq-type) 11) (system::mfsfun (lisp::quote pcl::inform-type-system-about-std-class) 12 1) (system::mfsfun (lisp::quote pcl::make-type-predicate) 13 1) (system::mfsfun (lisp::quote pcl::class-predicate) 14 1) (system::mfsfun (lisp::quote pcl::make-class-eq-predicate) 15 1) (system::mfsfun (lisp::quote pcl::make-eql-predicate) 16 1) (system::putprop (lisp::quote lisp::eql) (lisp::quote (lisp::deftype lisp::eql (pcl::type-object) (lisp::list (lisp::quote lisp::member) pcl::type-object))) (lisp::quote system::deftype-form)) (system::mf (lisp::quote #1=#:g2410) 17) (system::putprop (lisp::quote lisp::eql) (lisp::symbol-function (lisp::quote #1#)) (lisp::quote system::deftype-definition)) (system::putprop (lisp::quote lisp::eql) lisp::nil (lisp::quote system::type-documentation)) (system::mf (lisp::quote pcl::*normalize-type) 18) (system::mf (lisp::quote pcl::convert-to-system-type) 19) (system::mf (lisp::quote pcl::*subtypep) 20) (system::mfsfun (lisp::quote pcl::do-satisfies-deftype) 21 2) (system::mfvfun (lisp::quote pcl::make-type-predicate-name) 22 513) (system::*make-special (lisp::quote pcl::*built-in-class-symbols*)) (lisp::or (lisp::boundp (lisp::quote pcl::*built-in-class-symbols*)) (lisp::setq pcl::*built-in-class-symbols* lisp::nil)) (system::*make-special (lisp::quote pcl::*built-in-wrapper-symbols*)) (lisp::or (lisp::boundp (lisp::quote pcl::*built-in-wrapper-symbols*)) (lisp::setq pcl::*built-in-wrapper-symbols* lisp::nil)) (system::mfsfun (lisp::quote pcl::get-built-in-class-symbol) 23 1) (system::mfsfun (lisp::quote pcl::get-built-in-wrapper-symbol) 24 1) (lisp::let* ((#2=#:g2418 (lisp::quote lisp::class))) (lisp::setq walker::*variable-declarations* (lisp::adjoin #2# walker::*variable-declarations*))) (lisp::let* ((#3=#:g2419 (lisp::quote pcl::variable-rebinding))) (lisp::setq walker::*variable-declarations* (lisp::adjoin #3# walker::*variable-declarations*))) (system::mfsfun (lisp::quote pcl::variable-class) 25 2) (system::*make-special (lisp::quote pcl::*name->class->slotd-table*)) (lisp::or (lisp::boundp (lisp::quote pcl::*name->class->slotd-table*)) (lisp::setq pcl::*name->class->slotd-table* (lisp::make-hash-table))) (system::*make-special (lisp::quote pcl::*next-methods*)) (lisp::or (lisp::boundp (lisp::quote pcl::*next-methods*)) (lisp::setq pcl::*next-methods* lisp::nil)) (system::*make-special (lisp::quote pcl::*not-an-eql-specializer*)) (lisp::or (lisp::boundp (lisp::quote pcl::*not-an-eql-specializer*)) (lisp::setq pcl::*not-an-eql-specializer* (lisp::quote (pcl::not-an-eql-specializer)))) (system::*make-special (lisp::quote pcl::*umi-gfs*)) (system::*make-special (lisp::quote pcl::*umi-complete-classes*)) (system::*make-special (lisp::quote pcl::*umi-reorder*)) (system::*make-special (lisp::quote pcl::*invalidate-discriminating-function-force-p*)) (lisp::or (lisp::boundp (lisp::quote pcl::*invalidate-discriminating-function-force-p*)) (lisp::setq pcl::*invalidate-discriminating-function-force-p* lisp::nil)) (system::*make-special (lisp::quote pcl::*invalid-dfuns-on-stack*)) (lisp::or (lisp::boundp (lisp::quote pcl::*invalid-dfuns-on-stack*)) (lisp::setq pcl::*invalid-dfuns-on-stack* lisp::nil)) (system::*make-special (lisp::quote pcl::*standard-method-combination*)) (system::*make-special (lisp::quote pcl::*slotd-unsupplied*)) (lisp::or (lisp::boundp (lisp::quote pcl::*slotd-unsupplied*)) (lisp::setq pcl::*slotd-unsupplied* (lisp::list (lisp::quote pcl::*slotd-unsupplied*)))) (system::mm (lisp::quote pcl::define-gf-predicate) 26) (system::mf (lisp::quote pcl::make-class-predicate-name) 27) (system::mfsfun (lisp::quote pcl::plist-value) 28 2) (system::mf (lisp::quote pcl::g2422) 29) (system::putprop (lisp::quote pcl::plist-value) (lisp::function pcl::g2422) #0#) (system::*make-special (lisp::quote pcl::*built-in-classes*)) (lisp::or (lisp::boundp (lisp::quote pcl::*built-in-classes*)) (lisp::setq pcl::*built-in-classes* (lisp::quote ((lisp::number (lisp::t) (lisp::complex lisp::float lisp::rational) (lisp::t)) (lisp::complex (lisp::number) lisp::nil (lisp::number lisp::t) #C(1 1)) (lisp::float (lisp::real) lisp::nil (lisp::real lisp::number lisp::t) 1.0F0) (lisp::real (lisp::number) (lisp::rational lisp::float) (lisp::number lisp::t)) (lisp::rational (lisp::real) (lisp::integer lisp::ratio) (lisp::real lisp::number lisp::t)) (lisp::integer (lisp::rational) lisp::nil (lisp::rational lisp::real lisp::number lisp::t) 1) (lisp::ratio (lisp::rational) lisp::nil (lisp::rational lisp::real lisp::number lisp::t) 1/2) (lisp::sequence (lisp::t) (lisp::list lisp::vector) (lisp::t)) (lisp::list (lisp::sequence) (lisp::cons lisp::null) (lisp::sequence lisp::t)) (lisp::cons (lisp::list) lisp::nil (lisp::list lisp::sequence lisp::t) (lisp::nil)) (lisp::array (lisp::t) (lisp::vector) (lisp::t) #2A((lisp::nil))) (lisp::vector (lisp::array lisp::sequence) (lisp::string lisp::bit-vector) (lisp::array lisp::sequence lisp::t) #()) (lisp::string (lisp::vector) lisp::nil (lisp::vector lisp::array lisp::sequence lisp::t) "") (lisp::bit-vector (lisp::vector) lisp::nil (lisp::vector lisp::array lisp::sequence lisp::t) #*1) (lisp::character (lisp::t) lisp::nil (lisp::t) #\c) (lisp::symbol (lisp::t) (lisp::null) (lisp::t) lisp::symbol) (lisp::null (lisp::symbol lisp::list) lisp::nil (lisp::symbol lisp::list lisp::sequence lisp::t) lisp::nil))))) (system::mf (lisp::quote #4=#:|Defclass T2430|) 30) (#4#) (system::mf (lisp::quote #5=#:|Defclass SLOT-OBJECT2430|) 31) (#5#) (system::mf (lisp::quote #6=#:|Defclass STRUCTURE-OBJECT2430|) 32) (#6#) (system::define-structure (lisp::quote lisp::structure-object) (lisp::quote pcl::structure-object-) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote pcl::copy-structure-object) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote (pcl::|STRUCTURE-OBJECT class constructor|)) (lisp::quote 0) (lisp::quote pcl::structure-object-p) (lisp::quote lisp::nil)) (system::mfvfun-key (lisp::quote pcl::|STRUCTURE-OBJECT class constructor|) 33 16384 34) (system::mf (lisp::quote #7=#:|Defclass STANDARD-OBJECT2430|) 35) (#7#) (system::mf (lisp::quote #8=#:|Defclass METAOBJECT2430|) 36) (#8#) (system::mf (lisp::quote #9=#:|Defclass SPECIALIZER2430|) 37) (#9#) (system::mf (lisp::quote #10=#:|Defclass DEFINITION-SOURCE-MIXIN2431|) 38) (#10#) (system::mf (lisp::quote #11=#:|Defclass PLIST-MIXIN2431|) 39) (#11#) (system::mf (lisp::quote #12=#:|Defclass DOCUMENTATION-MIXIN2431|) 40) (#12#) (system::mf (lisp::quote #13=#:|Defclass DEPENDENT-UPDATE-MIXIN2431|) 41) (#13#) (system::mf (lisp::quote #14=#:|Defclass CLASS2432|) 42) (#14#) (system::mf (lisp::quote #15=#:|Defclass PCL-CLASS2432|) 43) (#15#) (system::mf (lisp::quote #16=#:|Defclass SLOT-CLASS2432|) 44) (#16#) (system::mf (lisp::quote #17=#:|Defclass STD-CLASS2432|) 45) (#17#) (system::mf (lisp::quote #18=#:|Defclass STANDARD-CLASS2432|) 46) (#18#) (system::mf (lisp::quote #19=#:|Defclass FUNCALLABLE-STANDARD-CLASS2432|) 47) (#19#) (system::mf (lisp::quote #20=#:|Defclass FORWARD-REFERENCED-CLASS2432|) 48) (#20#) (system::mf (lisp::quote #21=#:|Defclass BUILT-IN-CLASS2432|) 49) (#21#) (system::mf (lisp::quote #22=#:|Defclass STRUCTURE-CLASS2432|) 50) (#22#) (system::mf (lisp::quote #23=#:|Defclass SPECIALIZER-WITH-OBJECT2432|) 51) (#23#) (system::mf (lisp::quote #24=#:|Defclass EXACT-CLASS-SPECIALIZER2432|) 52) (#24#) (system::mf (lisp::quote #25=#:|Defclass CLASS-EQ-SPECIALIZER2432|) 53) (#25#) (system::mf (lisp::quote #26=#:|Defclass CLASS-PROTOTYPE-SPECIALIZER2432|) 54) (#26#) (system::mf (lisp::quote #27=#:|Defclass EQL-SPECIALIZER2432|) 55) (#27#) (system::*make-special (lisp::quote pcl::*eql-specializer-table*)) (lisp::or (lisp::boundp (lisp::quote pcl::*eql-specializer-table*)) (lisp::setq pcl::*eql-specializer-table* (lisp::make-hash-table :test (lisp::quote lisp::eql)))) (system::mfsfun (lisp::quote pcl::intern-eql-specializer) 56 1) (system::mf (lisp::quote #28=#:|Defclass SLOT-DEFINITION2437|) 57) (#28#) (system::mf (lisp::quote #29=#:|Defclass STANDARD-SLOT-DEFINITION2438|) 58) (#29#) (system::mf (lisp::quote #30=#:|Defclass STRUCTURE-SLOT-DEFINITION2438|) 59) (#30#) (system::mf (lisp::quote #31=#:|Defclass DIRECT-SLOT-DEFINITION2438|) 60) (#31#) (system::mf (lisp::quote #32=#:|Defclass EFFECTIVE-SLOT-DEFINITION2438|) 61) (#32#) (system::mf (lisp::quote #33=#:|Defclass STANDARD-DIRECT-SLOT-DEFINITION2438|) 62) (#33#) (system::mf (lisp::quote #34=#:|Defclass STANDARD-EFFECTIVE-SLOT-DEFINITION2438|) 63) (#34#) (system::mf (lisp::quote #35=#:|Defclass STRUCTURE-DIRECT-SLOT-DEFINITION2438|) 64) (#35#) (system::mf (lisp::quote #36=#:|Defclass STRUCTURE-EFFECTIVE-SLOT-DEFINITION2438|) 65) (#36#) (system::mf (lisp::quote #37=#:|Defclass METHOD2438|) 66) (#37#) (system::mf (lisp::quote #38=#:|Defclass STANDARD-METHOD2438|) 67) (#38#) (system::mf (lisp::quote #39=#:|Defclass STANDARD-ACCESSOR-METHOD2438|) 68) (#39#) (system::mf (lisp::quote #40=#:|Defclass STANDARD-READER-METHOD2438|) 69) (#40#) (system::mf (lisp::quote #41=#:|Defclass STANDARD-WRITER-METHOD2438|) 70) (#41#) (system::mf (lisp::quote #42=#:|Defclass STANDARD-BOUNDP-METHOD2438|) 71) (#42#) (system::mf (lisp::quote #43=#:|Defclass GENERIC-FUNCTION2438|) 72) (#43#) (system::mf (lisp::quote #44=#:|Defclass STANDARD-GENERIC-FUNCTION2441|) 73) (#44#) (system::mf (lisp::quote #45=#:|Defclass METHOD-COMBINATION2441|) 74) (#45#) (system::mf (lisp::quote #46=#:|Defclass STANDARD-METHOD-COMBINATION2441|) 75) (#46#) (system::*make-special (lisp::quote pcl::*early-class-predicates*)) (lisp::setq pcl::*early-class-predicates* (lisp::quote ((pcl::specializer pcl::specializerp) (pcl::exact-class-specializer pcl::exact-class-specializer-p) (pcl::class-eq-specializer pcl::class-eq-specializer-p) (pcl::eql-specializer pcl::eql-specializer-p) (lisp::class pcl::classp) (pcl::slot-class pcl::slot-class-p) (lisp::standard-class pcl::standard-class-p) (pcl::funcallable-standard-class pcl::funcallable-standard-class-p) (lisp::structure-class pcl::structure-class-p) (pcl::forward-referenced-class pcl::forward-referenced-class-p) (lisp::method pcl::method-p) (lisp::standard-method pcl::standard-method-p) (pcl::standard-accessor-method pcl::standard-accessor-method-p) (pcl::standard-reader-method pcl::standard-reader-method-p) (pcl::standard-writer-method pcl::standard-writer-method-p) (pcl::standard-boundp-method pcl::standard-boundp-method-p) (lisp::generic-function pcl::generic-function-p) (lisp::standard-generic-function pcl::standard-generic-function-p) (lisp::method-combination pcl::method-combination-p)))) (system::debug (lisp::quote pcl::g2402) (lisp::quote (pcl::new-value pcl::spec))) (system::debug (lisp::quote pcl::coerce-to-class) (lisp::quote (lisp::class pcl::make-forward-referenced-class-p))) (system::debug (lisp::quote pcl::specializer-from-type) (lisp::quote (lisp::type))) (system::debug (lisp::quote pcl::type-from-specializer) (lisp::quote (pcl::specl))) (system::debug (lisp::quote pcl::class-eq-type) (lisp::quote (lisp::class))) (system::debug (lisp::quote pcl::inform-type-system-about-std-class) (lisp::quote (#:g2406))) (system::debug (lisp::quote pcl::make-type-predicate) (lisp::quote (pcl::cell))) (system::debug (lisp::quote pcl::class-predicate) (lisp::quote (lisp::class))) (system::debug (lisp::quote pcl::make-class-eq-predicate) (lisp::quote (lisp::class))) (system::debug (lisp::quote pcl::make-eql-predicate) (lisp::quote (pcl::eql-object))) (system::debug (lisp::quote #1#) (lisp::quote (pcl::type-object))) (system::debug (lisp::quote pcl::*normalize-type) (lisp::quote (lisp::type))) (system::debug (lisp::quote pcl::convert-to-system-type) (lisp::quote (lisp::type))) (system::debug (lisp::quote pcl::*subtypep) (lisp::quote (pcl::type1 pcl::type2))) (system::debug (lisp::quote pcl::make-type-predicate-name) (lisp::quote (pcl::name pcl::kind))) (system::debug (lisp::quote pcl::get-built-in-class-symbol) (lisp::quote (#:g2414))) (system::debug (lisp::quote pcl::get-built-in-wrapper-symbol) (lisp::quote (#:g2417))) (system::debug (lisp::quote pcl::make-class-predicate-name) (lisp::quote (pcl::name))) (system::debug (lisp::quote pcl::g2422) (lisp::quote (pcl::new-value lisp::object pcl::name))) (system::debug (lisp::quote pcl::intern-eql-specializer) (lisp::quote (#:g2435))))))
)
