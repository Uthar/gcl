       
#(#! 
(lisp::in-package :pcl)
#(pcl::std-instance-wrapper pcl::std-instance-slots pcl::allocate-standard-instance lisp::nil pcl::std-instance pcl::*funcallable-instance-marker* "What kind of instance is this?" lisp::nil "What kind of instance is this?" pcl::slot-value pcl::*slot-unbound* lisp::setf pcl::slot-boundp pcl::slot-makunbound "unbound" lisp::nil "What kind of instance is this?" "The slot ~s has neither :instance nor :class allocation, ~@
                           so it can't be read by the default ~s method." pcl::slot-value-using-class lisp::nil lisp::nil "What kind of instance is this?" "The slot ~s has neither :instance nor :class allocation, ~@
                           so it can't be written by the default ~s method." (lisp::setf pcl::slot-value-using-class) lisp::nil lisp::nil "What kind of instance is this?" "The slot ~s has neither :instance nor :class allocation, ~@
                           so it can't be read by the default ~s method." pcl::slot-boundp-using-class lisp::nil lisp::nil "What kind of instance is this?" "The slot ~s has neither :instance nor :class allocation, ~@
                           so it can't be written by the default ~s method." pcl::slot-makunbound-using-class lisp::nil "Structure slots can't be unbound" "When attempting to ~A,~%the slot ~S is missing from the object ~S." "read the slot's value (slot-value)" "set the slot's value to ~S (setf of slot-value)" "test to see if slot is bound (slot-boundp)" "make the slot unbound (slot-makunbound)" conditions::case-failure :name conditions::ecase :datum :expected-type (lisp::member . #0=(pcl::slot-value lisp::setf pcl::slot-boundp pcl::slot-makunbound)) :possibilities #0# (lisp::member . #1=(pcl::slot-value lisp::setf pcl::slot-boundp pcl::slot-makunbound)) #1# "The slot ~S is unbound in the object ~S." conditions::etypecase (lisp::or . #2=(lisp::fixnum lisp::cons)) #2# "Can't allocate an instance of class ~S" pcl::cclosure-env-nthcdr pcl::%cclosure-env-nthcdr pcl::slot-missing pcl::slot-unbound pcl::class-wrapper pcl::class-prototype pcl::get-class-slot-value-1 pcl::set-class-slot-value-1 pcl::class-slots pcl::slot-definition-name pcl::class-of pcl::find-slot-definition pcl::slot-definition-location pcl::check-wrapper-validity pcl::slot-definition-internal-reader-function pcl::slot-definition-internal-writer-function conditions::error pcl::wrapper-of pcl::class-finalized-p pcl::finalize-inheritance pcl::class-defstruct-constructor pcl::class-name (system::%init . #((pcl::proclaim-defgeneric (lisp::quote pcl::wrapper-fetcher) (lisp::quote ((lisp::class lisp::standard-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD WRAPPER-FETCHER (STANDARD-CLASS))|) 0 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::wrapper-fetcher) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD WRAPPER-FETCHER (STANDARD-CLASS))|) (lisp::quote (:plist (:arg-info (1) :constant-value pcl::std-instance-wrapper)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::slots-fetcher) (lisp::quote ((lisp::class lisp::standard-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SLOTS-FETCHER (STANDARD-CLASS))|) 1 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slots-fetcher) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOTS-FETCHER (STANDARD-CLASS))|) (lisp::quote (:plist (:arg-info (1) :constant-value pcl::std-instance-slots)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::raw-instance-allocator) (lisp::quote ((lisp::class lisp::standard-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD RAW-INSTANCE-ALLOCATOR (STANDARD-CLASS))|) 2 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::raw-instance-allocator) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD RAW-INSTANCE-ALLOCATOR (STANDARD-CLASS))|) (lisp::quote (:plist (:arg-info (1) :constant-value pcl::allocate-standard-instance)))) (lisp::quote lisp::nil)) (system::setvv 3 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::set-wrapper) 3 2) (system::setvv 7 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::swap-wrappers-and-slots) 4 2) (system::mf (lisp::quote pcl::get-class-slot-value-1) 5) (system::mf (lisp::quote pcl::set-class-slot-value-1) 6) (pcl::proclaim-defgeneric (lisp::quote pcl::class-slot-value) (lisp::quote ((lisp::class pcl::std-class) pcl::slot-name))) (system::mf (lisp::quote pcl::|(FAST-METHOD CLASS-SLOT-VALUE (STD-CLASS T))|) 7) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-slot-value) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class lisp::t)) (lisp::quote (lisp::class pcl::slot-name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-SLOT-VALUE (STD-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote #3=(lisp::setf pcl::class-slot-value)) (lisp::quote (pcl::nv (lisp::class pcl::std-class) pcl::slot-name))) (system::mf (lisp::quote pcl::|(FAST-METHOD (SETF CLASS-SLOT-VALUE) (T STD-CLASS T))|) 8) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote #3#) (lisp::quote lisp::nil) (lisp::quote (lisp::t pcl::std-class lisp::t)) (lisp::quote (pcl::nv lisp::class pcl::slot-name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD (SETF CLASS-SLOT-VALUE) (T STD-CLASS T))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (system::mfsfun (lisp::quote pcl::find-slot-definition) 9 2) (system::mf (lisp::quote pcl::slot-value) 10) (lisp::let* ((#4=#:g6340 (lisp::quote pcl::slot-value-normal)) (#5=#:g6341 (lisp::function pcl::slot-value))) (lisp::funcall (lisp::function (lisp::setf pcl::gdefinition)) #5# #4#)) (system::putprop (lisp::quote pcl::slot-value) (lisp::caddr (system::defmacro* (lisp::quote pcl::slot-value) (lisp::quote (pcl::object-form pcl::slot-name-form)) (lisp::quote ((lisp::if (lisp::and (lisp::constantp pcl::slot-name-form) (lisp::let ((pcl::slot-name (lisp::eval pcl::slot-name-form))) (lisp::and (lisp::symbolp pcl::slot-name) (lisp::symbol-package pcl::slot-name)))) (lisp::list (lisp::quote pcl::accessor-slot-value) pcl::object-form pcl::slot-name-form) (lisp::list (lisp::quote pcl::slot-value-normal) pcl::object-form pcl::slot-name-form)))))) #6=(lisp::quote compiler::compiler-macro)) (system::mf (lisp::quote pcl::set-slot-value) 11) (lisp::let* ((#7=#:g6346 (lisp::quote pcl::set-slot-value-normal)) (#8=#:g6347 (lisp::function pcl::set-slot-value))) (lisp::funcall (lisp::function (lisp::setf pcl::gdefinition)) #8# #7#)) (system::putprop (lisp::quote pcl::set-slot-value) (lisp::caddr (system::defmacro* (lisp::quote pcl::set-slot-value) (lisp::quote (pcl::object-form pcl::slot-name-form pcl::new-value-form)) (lisp::quote ((lisp::if (lisp::and (lisp::constantp pcl::slot-name-form) (lisp::let ((pcl::slot-name (lisp::eval pcl::slot-name-form))) (lisp::and (lisp::symbolp pcl::slot-name) (lisp::symbol-package pcl::slot-name)))) (lisp::list (lisp::quote pcl::accessor-set-slot-value) pcl::object-form pcl::slot-name-form pcl::new-value-form) (lisp::list (lisp::quote pcl::set-slot-value-normal) pcl::object-form pcl::slot-name-form pcl::new-value-form)))))) #6#) (system::*make-constant (lisp::quote pcl::*optimize-slot-boundp*) lisp::nil) (system::mf (lisp::quote pcl::slot-boundp) 12) (lisp::let* ((#9=#:g6348 (lisp::quote pcl::slot-boundp-normal)) (#10=#:g6349 (lisp::function pcl::slot-boundp))) (lisp::funcall (lisp::function (lisp::setf pcl::gdefinition)) #10# #9#)) (system::putprop (lisp::quote pcl::slot-boundp) (lisp::caddr (system::defmacro* (lisp::quote pcl::slot-boundp) (lisp::quote (pcl::object-form pcl::slot-name-form)) (lisp::quote ((lisp::if (lisp::and (lisp::constantp pcl::slot-name-form) (lisp::let ((pcl::slot-name (lisp::eval pcl::slot-name-form))) (lisp::and (lisp::symbolp pcl::slot-name) (lisp::symbol-package pcl::slot-name)))) (lisp::list (lisp::quote pcl::accessor-slot-boundp) pcl::object-form pcl::slot-name-form) (lisp::list (lisp::quote pcl::slot-boundp-normal) pcl::object-form pcl::slot-name-form)))))) #6#) (system::mf (lisp::quote pcl::slot-makunbound) 13) (system::mfsfun (lisp::quote pcl::slot-exists-p) 14 2) (system::mf (lisp::quote pcl::slot-value-or-default) 15) (system::mfsfun (lisp::quote pcl::standard-instance-access) 16 2) (system::mfsfun (lisp::quote pcl::funcallable-standard-instance-access) 17 2) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-value-using-class) (lisp::quote ((lisp::class pcl::std-class) (lisp::object lisp::standard-object) (pcl::slotd pcl::standard-effective-slot-definition)))) (system::setvv 15 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 19 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD SLOT-VALUE-USING-CLASS (STD-CLASS STANDARD-OBJECT STANDARD-EFFECTIVE-SLOT-DEFINITION))|) 18) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slot-value-using-class) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class lisp::standard-object pcl::standard-effective-slot-definition)) (lisp::quote (lisp::class lisp::object pcl::slotd)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOT-VALUE-USING-CLASS (STD-CLASS STANDARD-OBJECT STANDARD-EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote #11=(lisp::setf pcl::slot-value-using-class)) (lisp::quote (pcl::new-value (lisp::class pcl::std-class) (lisp::object lisp::standard-object) (pcl::slotd pcl::standard-effective-slot-definition)))) (system::setvv 20 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 24 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD (SETF SLOT-VALUE-USING-CLASS) (T STD-CLASS STANDARD-OBJECT STANDARD-EFFECTIVE-SLOT-DEFINITION))|) 19 6) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote #11#) (lisp::quote lisp::nil) (lisp::quote (lisp::t pcl::std-class lisp::standard-object pcl::standard-effective-slot-definition)) (lisp::quote (pcl::new-value lisp::class lisp::object pcl::slotd)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD (SETF SLOT-VALUE-USING-CLASS) (T STD-CLASS STANDARD-OBJECT STANDARD-EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (:plist (:arg-info (4))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-boundp-using-class) (lisp::quote ((lisp::class pcl::std-class) (lisp::object lisp::standard-object) (pcl::slotd pcl::standard-effective-slot-definition)))) (system::setvv 25 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 29 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SLOT-BOUNDP-USING-CLASS (STD-CLASS STANDARD-OBJECT STANDARD-EFFECTIVE-SLOT-DEFINITION))|) 20 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slot-boundp-using-class) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class lisp::standard-object pcl::standard-effective-slot-definition)) (lisp::quote (lisp::class lisp::object pcl::slotd)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOT-BOUNDP-USING-CLASS (STD-CLASS STANDARD-OBJECT STANDARD-EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-makunbound-using-class) (lisp::quote ((lisp::class pcl::std-class) (lisp::object lisp::standard-object) (pcl::slotd pcl::standard-effective-slot-definition)))) (system::setvv 30 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 34 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SLOT-MAKUNBOUND-USING-CLASS (STD-CLASS STANDARD-OBJECT STANDARD-EFFECTIVE-SLOT-DEFINITION))|) 21 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slot-makunbound-using-class) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class lisp::standard-object pcl::standard-effective-slot-definition)) (lisp::quote (lisp::class lisp::object pcl::slotd)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOT-MAKUNBOUND-USING-CLASS (STD-CLASS STANDARD-OBJECT STANDARD-EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-value-using-class) (lisp::quote ((lisp::class lisp::structure-class) (lisp::object lisp::structure-object) (pcl::slotd pcl::structure-effective-slot-definition)))) (system::mf (lisp::quote pcl::|(FAST-METHOD SLOT-VALUE-USING-CLASS (STRUCTURE-CLASS STRUCTURE-OBJECT STRUCTURE-EFFECTIVE-SLOT-DEFINITION))|) 22) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slot-value-using-class) (lisp::quote lisp::nil) (lisp::quote (lisp::structure-class lisp::structure-object pcl::structure-effective-slot-definition)) (lisp::quote (lisp::class lisp::object pcl::slotd)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOT-VALUE-USING-CLASS (STRUCTURE-CLASS STRUCTURE-OBJECT STRUCTURE-EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote #12=(lisp::setf pcl::slot-value-using-class)) (lisp::quote (pcl::new-value (lisp::class lisp::structure-class) (lisp::object lisp::structure-object) (pcl::slotd pcl::structure-effective-slot-definition)))) (system::mf (lisp::quote pcl::|(FAST-METHOD (SETF SLOT-VALUE-USING-CLASS) (T STRUCTURE-CLASS STRUCTURE-OBJECT STRUCTURE-EFFECTIVE-SLOT-DEFINITION))|) 23) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote #12#) (lisp::quote lisp::nil) (lisp::quote (lisp::t lisp::structure-class lisp::structure-object pcl::structure-effective-slot-definition)) (lisp::quote (pcl::new-value lisp::class lisp::object pcl::slotd)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD (SETF SLOT-VALUE-USING-CLASS) (T STRUCTURE-CLASS STRUCTURE-OBJECT STRUCTURE-EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (:plist (:arg-info (4))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-boundp-using-class) (lisp::quote ((lisp::class lisp::structure-class) (lisp::object lisp::structure-object) (pcl::slotd pcl::structure-effective-slot-definition)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SLOT-BOUNDP-USING-CLASS (STRUCTURE-CLASS STRUCTURE-OBJECT STRUCTURE-EFFECTIVE-SLOT-DEFINITION))|) 24 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slot-boundp-using-class) (lisp::quote lisp::nil) (lisp::quote (lisp::structure-class lisp::structure-object pcl::structure-effective-slot-definition)) (lisp::quote (lisp::class lisp::object pcl::slotd)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOT-BOUNDP-USING-CLASS (STRUCTURE-CLASS STRUCTURE-OBJECT STRUCTURE-EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (:plist (:arg-info (3) :constant-value lisp::t)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-makunbound-using-class) (lisp::quote ((lisp::class lisp::structure-class) (lisp::object lisp::structure-object) (pcl::slotd pcl::structure-effective-slot-definition)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SLOT-MAKUNBOUND-USING-CLASS (STRUCTURE-CLASS STRUCTURE-OBJECT STRUCTURE-EFFECTIVE-SLOT-DEFINITION))|) 25 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slot-makunbound-using-class) (lisp::quote lisp::nil) (lisp::quote (lisp::structure-class lisp::structure-object pcl::structure-effective-slot-definition)) (lisp::quote (lisp::class lisp::object pcl::slotd)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOT-MAKUNBOUND-USING-CLASS (STRUCTURE-CLASS STRUCTURE-OBJECT STRUCTURE-EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-missing) (lisp::quote ((lisp::class lisp::t) pcl::instance pcl::slot-name pcl::operation lisp::&optional pcl::new-value))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SLOT-MISSING (T T T T))|) 26 7) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slot-missing) (lisp::quote lisp::nil) (lisp::quote (lisp::t lisp::t lisp::t lisp::t)) (lisp::quote (lisp::class pcl::instance pcl::slot-name pcl::operation lisp::&optional pcl::new-value)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOT-MISSING (T T T T))|) (lisp::quote (:plist (:arg-info (4 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-unbound) (lisp::quote ((lisp::class lisp::t) pcl::instance pcl::slot-name))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SLOT-UNBOUND (T T T))|) 27 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slot-unbound) (lisp::quote lisp::nil) (lisp::quote (lisp::t lisp::t lisp::t)) (lisp::quote (lisp::class pcl::instance pcl::slot-name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOT-UNBOUND (T T T))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (system::mf (lisp::quote pcl::slot-unbound-internal) 28) (pcl::proclaim-defgeneric (lisp::quote pcl::allocate-instance) (lisp::quote ((lisp::class lisp::standard-class) lisp::&rest pcl::initargs))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD ALLOCATE-INSTANCE (STANDARD-CLASS))|) 29 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::allocate-instance) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-class)) (lisp::quote (lisp::class lisp::&rest pcl::initargs)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ALLOCATE-INSTANCE (STANDARD-CLASS))|) (lisp::quote (:plist (:arg-info (1 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::allocate-instance) (lisp::quote ((lisp::class lisp::structure-class) lisp::&rest pcl::initargs))) (system::mf (lisp::quote pcl::|(FAST-METHOD ALLOCATE-INSTANCE (STRUCTURE-CLASS))|) 30) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::allocate-instance) (lisp::quote lisp::nil) (lisp::quote (lisp::structure-class)) (lisp::quote (lisp::class lisp::&rest pcl::initargs)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ALLOCATE-INSTANCE (STRUCTURE-CLASS))|) (lisp::quote (:plist (:arg-info (1 . lisp::t))))) (lisp::quote lisp::nil)) (system::debug (lisp::quote pcl::set-wrapper) (lisp::quote (#:g6299))) (system::debug (lisp::quote pcl::swap-wrappers-and-slots) (lisp::quote (#:g6308 #:g6309))) (system::debug (lisp::quote pcl::get-class-slot-value-1) (lisp::quote (lisp::object pcl::wrapper pcl::slot-name))) (system::debug (lisp::quote pcl::set-class-slot-value-1) (lisp::quote (pcl::new-value lisp::object pcl::wrapper pcl::slot-name))) (system::debug (lisp::quote pcl::|(FAST-METHOD CLASS-SLOT-VALUE (STD-CLASS T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class pcl::slot-name))) (system::debug (lisp::quote pcl::|(FAST-METHOD (SETF CLASS-SLOT-VALUE) (T STD-CLASS T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::nv lisp::class pcl::slot-name))) (system::debug (lisp::quote pcl::find-slot-definition) (lisp::quote (#:g6338 pcl::slot))) (system::debug (lisp::quote pcl::slot-value) (lisp::quote (lisp::object pcl::slot-name lisp::class pcl::slot-definition))) (system::debug (lisp::quote pcl::set-slot-value) (lisp::quote (lisp::object pcl::slot-name pcl::new-value lisp::class pcl::slot-definition))) (system::debug (lisp::quote pcl::slot-boundp) (lisp::quote (lisp::object pcl::slot-name lisp::class pcl::slot-definition))) (system::debug (lisp::quote pcl::slot-makunbound) (lisp::quote (lisp::object pcl::slot-name lisp::class pcl::slot-definition))) (system::debug (lisp::quote pcl::slot-value-or-default) (lisp::quote (lisp::object pcl::slot-name pcl::default))) (system::debug (lisp::quote pcl::|(FAST-METHOD SLOT-VALUE-USING-CLASS (STD-CLASS STANDARD-OBJECT STANDARD-EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class lisp::object pcl::slotd pcl::location pcl::value))) (system::debug (lisp::quote pcl::|(FAST-METHOD SLOT-BOUNDP-USING-CLASS (STD-CLASS STANDARD-OBJECT STANDARD-EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (pcl::location pcl::value))) (system::debug (lisp::quote pcl::|(FAST-METHOD SLOT-VALUE-USING-CLASS (STRUCTURE-CLASS STRUCTURE-OBJECT STRUCTURE-EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class lisp::object pcl::slotd lisp::function pcl::value))) (system::debug (lisp::quote pcl::|(FAST-METHOD (SETF SLOT-VALUE-USING-CLASS) (T STRUCTURE-CLASS STRUCTURE-OBJECT STRUCTURE-EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::new-value lisp::nil lisp::object pcl::slotd))) (system::debug (lisp::quote pcl::|(FAST-METHOD SLOT-MISSING (T T T T))|) (lisp::quote (pcl::new-value))) (system::debug (lisp::quote pcl::slot-unbound-internal) (lisp::quote (pcl::instance lisp::position))) (system::debug (lisp::quote pcl::|(FAST-METHOD ALLOCATE-INSTANCE (STRUCTURE-CLASS))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class pcl::.rest-arg.))))))
)
