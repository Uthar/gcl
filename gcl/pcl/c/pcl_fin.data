       
#(#! 
(lisp::in-package :pcl)
#(lisp::quote lisp::nil :test "Unknown funcallable-instance data: ~S." lisp::error "Unknown funcallable-instance data: ~S." lisp::position (pcl::funcallable-instance-data :test (lisp::function lisp::eq)) "Attempt to funcall a funcallable-instance without first~%~
          setting its funcallable-instance-function." lisp::car pcl::cclosure-env-nthcdr pcl::funcallable-instance-closure-size1 :initial-element pcl::*funcallable-instance-marker* "~S is not a funcallable-instance" "~S is not a function." pcl::funcallable-instance-data-position lisp::- pcl::funcallable-instance-closure-size pcl::%cclosure-env-nthcdr pcl::funcallable-instance-p pcl::wrapper-class pcl::funcallable-instance-data-1 (lisp::quote pcl::wrapper) (lisp::quote pcl::wrapper) (lisp::quote pcl::slots) lisp::eq lisp::warn pcl::allocate-funcallable-instance-2 pcl::%set-cclosure-env system::turbo-closure pcl::cclosurep pcl::%cclosure-env pcl::%set-cclosure pcl::set-funcallable-instance-function pcl::make-trampoline pcl::called-fin-without-function pcl::dummy-function (system::%init . #((system::*make-constant (lisp::quote pcl::funcallable-instance-data) (lisp::quote (pcl::wrapper pcl::slots))) (system::putprop (lisp::quote pcl::funcallable-instance-data) "These are the 'data-slots' which funcallable instances have so that
   the meta-class funcallable-standard-class can store class, and static
   slots in them." (lisp::quote system::variable-documentation)) (system::setvv 1 pcl::funcallable-instance-data) (system::mm (lisp::quote pcl::funcallable-instance-data-position) 0) (lisp::proclaim (lisp::quote (lisp::notinline pcl::called-fin-without-function))) (system::mfvfun (lisp::quote pcl::called-fin-without-function) 1 16384) (system::*make-special (lisp::quote pcl::*funcallable-instance-marker*)) (lisp::or (lisp::boundp (lisp::quote pcl::*funcallable-instance-marker*)) (lisp::setq pcl::*funcallable-instance-marker* (lisp::list "Funcallable Instance Marker"))) (system::*make-constant (lisp::quote pcl::funcallable-instance-closure-size) 15) (system::*make-constant (lisp::quote pcl::funcallable-instance-closure-size1) (lisp::1- pcl::funcallable-instance-closure-size)) (system::*make-constant (lisp::quote pcl::funcallable-instance-available-size) (lisp::- pcl::funcallable-instance-closure-size1 (lisp::length pcl::funcallable-instance-data))) (system::mm (lisp::quote pcl::funcallable-instance-marker) 2) (system::mfsfun (lisp::quote pcl::allocate-funcallable-instance-1) 3 0) (system::mfsfun (lisp::quote pcl::allocate-funcallable-instance-2) 4 0) (system::mfsfun (lisp::quote pcl::funcallable-instance-p) 5 1) (system::putprop (lisp::quote pcl::funcallable-instance-p) (lisp::caddr (system::defmacro* (lisp::quote pcl::funcallable-instance-p) (lisp::quote (pcl::x)) (lisp::quote ((lisp::list (lisp::quote lisp::eq) (lisp::quote pcl::*funcallable-instance-marker*) (lisp::list (lisp::quote pcl::funcallable-instance-marker) pcl::x)))))) (lisp::quote compiler::compiler-macro)) (system::mfsfun (lisp::quote pcl::set-funcallable-instance-function) 6 2) (system::mm (lisp::quote pcl::funcallable-instance-data-1) 7) (system::mf (lisp::quote pcl::make-trampoline) 8) (system::mm (lisp::quote pcl::fsc-instance-p) 9) (system::mm (lisp::quote pcl::fsc-instance-class) 10) (system::mm (lisp::quote pcl::fsc-instance-wrapper) 11) (system::mm (lisp::quote pcl::fsc-instance-slots) 12) (system::debug (lisp::quote pcl::allocate-funcallable-instance-1) (lisp::quote (#:g2380))) (system::debug (lisp::quote pcl::allocate-funcallable-instance-2) (lisp::quote (pcl::what-a-dumb-closure-variable))))))
)
