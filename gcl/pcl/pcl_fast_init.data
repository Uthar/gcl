       
#(#! 
(lisp::in-package :pcl)
#(pcl::*the-class-t* pcl::*the-class-slot-object* :allow-other-keys pcl::*make-instance-function-keys* lisp::quote pcl::expanding-make-instance lisp::progn pcl::get-make-instance-functions :eval pcl::make-instance pcl::expanding-make-instance-top-level lisp::defun :test pcl::make-instance-function lisp::*package* pcl::*the-pcl-package* lisp::*print-length* lisp::*print-level* lisp::*print-circle* lisp::*print-case* :upcase lisp::*print-pretty* "MAKE-INSTANCE ~S ~S ~S" "~A-~A" "~A-CACHED-~A" lisp::defmacro (pcl::info) lisp::list (lisp::quote lisp::let) (lisp::quote pcl::value) pcl::info (lisp::quote lisp::if) (lisp::quote #0=(lisp::eq pcl::value (lisp::quote :unknown))) (lisp::quote lisp::progn) (lisp::quote lisp::quote) (lisp::quote pcl::value) "CACHED-~A" pcl::initialize-info-cached-slots "~A-CACHED-~A" pcl::initialize-info lisp::defstruct pcl::key pcl::wrapper :unknown pcl::reset-initialize-info-internal (pcl::info) lisp::list* (lisp::quote lisp::progn) lisp::mapcar (lisp::function (lisp::lambda (pcl::cname) (lisp::list (lisp::quote lisp::setf) (lisp::list pcl::cname pcl::info) (lisp::quote #1=(lisp::quote :unknown))))) pcl::initialize-info-bound-slots (pcl::info) lisp::let ((pcl::slots lisp::nil)) lisp::unless lisp::eq (lisp::quote :unknown) lisp::push pcl::slots (pcl::slots) pcl::define-cached-reader pcl::update-initialize-info-internal lisp::setf #1# (pcl::initialize-info-cached-valid-p pcl::initialize-info-cached-ri-valid-p pcl::initialize-info-cached-initargs-form-list pcl::initialize-info-cached-combined-initargs-form-list pcl::initialize-info-cached-new-keys pcl::initialize-info-cached-default-initargs-function pcl::initialize-info-cached-shared-initialize-t-function pcl::initialize-info-cached-shared-initialize-nil-function pcl::initialize-info-cached-constants pcl::initialize-info-cached-combined-initialize-function pcl::initialize-info-cached-make-instance-function pcl::initialize-info-cached-make-instance-function-symbol) pcl::valid-p pcl::ri-valid-p pcl::initargs-form-list pcl::combined-initargs-form-list pcl::new-keys pcl::default-initargs-function pcl::shared-initialize-t-function pcl::shared-initialize-nil-function pcl::constants pcl::combined-initialize-function pcl::make-instance-function-symbol pcl::value pcl::initialize-info-cached-valid-p lisp::if #0# pcl::initialize-info-cached-ri-valid-p pcl::initialize-info-cached-initargs-form-list pcl::initialize-info-cached-combined-initargs-form-list pcl::initialize-info-cached-new-keys pcl::initialize-info-cached-default-initargs-function pcl::initialize-info-cached-shared-initialize-t-function pcl::initialize-info-cached-shared-initialize-nil-function pcl::initialize-info-cached-constants pcl::initialize-info-cached-combined-initialize-function pcl::initialize-info-cached-make-instance-function pcl::initialize-info-cached-make-instance-function-symbol pcl::*revert-initialize-info-p* (pcl::make-instance-function) pcl::*initialize-info-cache-class* pcl::*initialize-info-cache-initargs* pcl::*initialize-info-cache-info* pcl::allocate-instance pcl::initialize-instance pcl::shared-initialize pcl::reinitialize-instance :invalid pcl::*boot-state* pcl::complete lisp::class pcl::default-initargs pcl::*the-class-slot-class* :before :after pcl::slot-object pcl::.function. (lisp::and (lisp::consp pcl::.function.) (lisp::eq (lisp::car pcl::.function.) (lisp::quote pcl::call-initialize-instance-simple))) pcl::initialize-instance-simple (lisp::cadr pcl::.function.) (lisp::caddr pcl::.function.) lisp::funcall (lisp::the lisp::function pcl::.function.) lisp::copy-seq ((pcl::instance (pcl::%%allocate-instance--class))) (pcl::std-instance-wrapper pcl::instance) (pcl::std-instance-slots pcl::instance) pcl::copy-slots pcl::instance ((pcl::current-class (lisp::if pcl::class-cell (pcl::find-class-from-cell pcl::class-key pcl::class-cell) pcl::class-symbol))) (lisp::or (lisp::not (lisp::eq pcl::current-class pcl::class-symbol)) (pcl::invalid-wrapper-p pcl::wrapper)) pcl::make-instance-function-trap pcl::current-class "error in make-instance-function-simple" pcl::allocate-standard-instance--macro pcl::call-method pcl::std-instance pcl::call-initialize-instance-simple pcl::fast-method-call pcl::method-call pcl::fn (pcl::method-call lisp::function) (pcl::method-call lisp::function) (pcl::method-call lisp::function) (pcl::method-call lisp::function) pcl::class-eq (lisp::t lisp::t) pcl::*the-wrapper-of-t* (pcl::method-call lisp::function) (pcl::method-call lisp::function) (pcl::method-call lisp::function) (pcl::method-call lisp::function) pcl::push-initarg pcl::update-initialize-info-cache ((pcl::finish-pushing-initargs)) lisp::structure pcl::standard pcl::funcallable "error in make-shared-initialize-form-list" :initial-element pcl::*slot-unbound* 2147483647 :key pcl::pop-initargs pcl::instance-set pcl::const pcl::skip-when-instance-boundp pcl::*class-pv-table-table* pcl::pv-table :slot-name-lists pcl::*compile-make-instance-functions-p* pcl::*compiled-initialize-instance-simple-functions* pcl::*initialize-instance-simple-alist* pcl::*note-iis-entry-p* pcl::precompile-initialize-instance-simple (lisp::load) pcl::load-precompiled-iis-entry lisp::function lisp::nil pcl::*funcallable-instance-marker* pcl::..slot-unbound.. (lisp::push pcl::value pcl::initargs) pcl::initargs lisp::setq lisp::the pcl::initargs-tail 1 (lisp::cdr) 3 (lisp::cdddr) lisp::nthcdr (pcl::initargs-tail) (lisp::setq pcl::value (lisp::pop pcl::initargs-tail)) pcl::slot-value-using-class pcl::*inline-iis-instance-locations-p* pcl::%instance-ref lisp::cdr pcl::instance-write-internal pcl::pv :instance :class :default pcl::slot-boundp-using-class lisp::not pcl::instance-boundp-internal (lisp::when (lisp::consp pcl::initargs) (lisp::setq pcl::initargs (lisp::cons (lisp::car pcl::initargs) (lisp::cdr pcl::initargs)))) (lisp::setq pcl::*initialize-info-cache-initargs* pcl::initargs) ((lisp::setq pcl::initargs-tail pcl::initargs)) lisp::svref pcl::cvector (pcl::initargs-tail pcl::pv pcl::slots pcl::wrapper lisp::class pcl::value) ((pcl::initargs-tail pcl::initargs) (pcl::pv (lisp::car pcl::pv-cell)) (pcl::slots lisp::nil) (pcl::wrapper lisp::nil) lisp::class pcl::value) (lisp::cond ((pcl::std-instance-p pcl::instance) (lisp::setq pcl::slots (pcl::std-instance-slots pcl::instance)) (lisp::setq pcl::wrapper (pcl::std-instance-wrapper pcl::instance))) ((pcl::fsc-instance-p pcl::instance) (lisp::setq pcl::slots (pcl::fsc-instance-slots pcl::instance)) (lisp::setq pcl::wrapper (pcl::fsc-instance-wrapper pcl::instance))) (lisp::t (lisp::setq pcl::wrapper (pcl::wrapper-of pcl::instance)))) (lisp::setq lisp::class (pcl::wrapper-class pcl::wrapper)) :fill-pointer :adjustable lisp::simple-vector lisp::lambda (pcl::pv-cell pcl::cvector) lisp::declare lisp::type (pcl::instance pcl::initargs) (lisp::declare (lisp::optimize (lisp::speed 3) (lisp::safety 0))) pcl::iis-body pcl::find-class pcl::class-precedence-list pcl::reset-class-initialize-info pcl::map-all-classes pcl::constant-symbol-p lisp::nil walker::walk-form pcl::find-class-cell lisp::equal lisp::find pcl::forward-referenced-class-p pcl::classp pcl::class-name :cached-make-instance-function-symbol :cached-make-instance-function :cached-combined-initialize-function :cached-constants :cached-shared-initialize-nil-function :cached-shared-initialize-t-function :cached-default-initargs-function :cached-new-keys :cached-combined-initargs-form-list :cached-initargs-form-list :cached-ri-valid-p :cached-valid-p :wrapper pcl::class-wrapper pcl::reset-class-initialize-info-1 pcl::class-initialize-info pcl::reset-initialize-info pcl::|SETF PCL CLASS-INITIALIZE-INFO| pcl::make-initialize-info pcl::make-default-initargs-form-list pcl::initialize-instance-simple-function pcl::class-prototype pcl::make-shared-initialize-form-list pcl::get-make-instance-function pcl::|SETF PCL GDEFINITION| pcl::make-instance-1 pcl::class-finalized-p pcl::finalize-inheritance pcl::gdefinition pcl::compute-applicable-methods pcl::find-standard-ii-method pcl::method-specializers lisp::every pcl::get-make-instance-function-internal pcl::check-initargs-1 pcl::complicated-instance-creation-method lisp::some pcl::make-instance-function-complex pcl::make-instance-function-simple pcl::method-qualifiers pcl::structure-class-p pcl::allocate-structure-instance pcl::standard-class-p pcl::allocate-standard-instance pcl::funcallable-standard-class-p pcl::allocate-funcallable-instance lisp::remove pcl::make-effective-method-function pcl::get-simple-initialization-function pcl::get-complex-initialization-functions pcl::get-secondary-dispatch-function pcl::class-default-initargs pcl::class-slots pcl::slot-definition-initargs pcl::add-forms lisp::make-array pcl::slot-definition-name lisp::position lisp::< lisp::stable-sort pcl::slot-definition-initform pcl::slot-definition-initfunction pcl::slot-definition-location pcl::intern-pv-table pcl::pv-table-lookup pcl::get-pv-cell-for-class pcl::form-list-to-lisp lisp::union pcl::compile-lambda pcl::make-top-level-form pcl::update-make-instance-function-table pcl::cclosure-env-nthcdr pcl::%cclosure-env-nthcdr pcl::class-of pcl::|SETF PCL SLOT-VALUE-USING-CLASS| pcl::finish-pushing-initargs lisp::vector-push-extend pcl::first-form-to-lisp lisp::coerce pcl::add-to-cvector pcl::find-class-from-cell system::structure-subtype-p system::typecase-error-string pcl::%%allocate-instance--class pcl::no-applicable-method pcl::check-initargs-values pcl::expand-make-instance-form (system::%init . #((system::setvv 222 (system::mc lisp::nil 59)) (system::*make-special (lisp::quote pcl::*compile-make-instance-functions-p*)) (lisp::or (lisp::boundp (lisp::quote pcl::*compile-make-instance-functions-p*)) (lisp::setq pcl::*compile-make-instance-functions-p* lisp::nil)) (system::mf (lisp::quote pcl::update-make-instance-function-table) 0) (system::mfsfun (lisp::quote pcl::constant-symbol-p) 1 1) (system::*make-special (lisp::quote pcl::*make-instance-function-keys*)) (lisp::or (lisp::boundp (lisp::quote pcl::*make-instance-function-keys*)) (lisp::setq pcl::*make-instance-function-keys* lisp::nil)) (system::mfsfun (lisp::quote pcl::expand-make-instance-form) 2 1) (system::mm (lisp::quote pcl::expanding-make-instance-top-level) 3) (system::mm (lisp::quote pcl::expanding-make-instance) 4) (system::mm (lisp::quote pcl::defconstructor) 5) (system::mfsfun (lisp::quote pcl::get-make-instance-functions) 6 1) (system::mfsfun (lisp::quote pcl::make-instance-function-symbol) 7 1) (system::mf (lisp::quote pcl::make-instance-1) 8) (system::mm (lisp::quote pcl::define-cached-reader) 9) (system::*make-special (lisp::quote pcl::initialize-info-cached-slots)) (lisp::setq pcl::initialize-info-cached-slots (lisp::quote (pcl::valid-p pcl::ri-valid-p pcl::initargs-form-list pcl::combined-initargs-form-list pcl::new-keys pcl::default-initargs-function pcl::shared-initialize-t-function pcl::shared-initialize-nil-function pcl::constants pcl::combined-initialize-function pcl::make-instance-function pcl::make-instance-function-symbol))) (system::mm (lisp::quote pcl::define-initialize-info) 10) (system::define-structure (lisp::quote pcl::initialize-info) (lisp::quote pcl::initialize-info-) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote ((pcl::key lisp::nil lisp::t lisp::nil 0) (pcl::wrapper lisp::nil lisp::t lisp::nil 1) (pcl::cached-valid-p :unknown lisp::t lisp::nil 2) (pcl::cached-ri-valid-p :unknown lisp::t lisp::nil 3) (pcl::cached-initargs-form-list :unknown lisp::t lisp::nil 4) (pcl::cached-combined-initargs-form-list :unknown lisp::t lisp::nil 5) (pcl::cached-new-keys :unknown lisp::t lisp::nil 6) (pcl::cached-default-initargs-function :unknown lisp::t lisp::nil 7) (pcl::cached-shared-initialize-t-function :unknown lisp::t lisp::nil 8) (pcl::cached-shared-initialize-nil-function :unknown lisp::t lisp::nil 9) (pcl::cached-constants :unknown lisp::t lisp::nil 10) (pcl::cached-combined-initialize-function :unknown lisp::t lisp::nil 11) (pcl::cached-make-instance-function :unknown lisp::t lisp::nil 12) (pcl::cached-make-instance-function-symbol :unknown lisp::t lisp::nil 13))) (lisp::quote pcl::copy-initialize-info) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote lisp::nil) (lisp::quote (pcl::make-initialize-info)) (lisp::quote 14) (lisp::quote pcl::initialize-info-p) (lisp::quote lisp::nil)) (system::mfvfun-key (lisp::quote pcl::make-initialize-info) 11 16384 12) (system::mm (lisp::quote pcl::reset-initialize-info-internal) 13) (system::mfsfun (lisp::quote pcl::initialize-info-bound-slots) 14 1) (system::mm (lisp::quote pcl::initialize-info-valid-p) 15) (system::mm (lisp::quote pcl::initialize-info-ri-valid-p) 16) (system::mm (lisp::quote pcl::initialize-info-initargs-form-list) 17) (system::mm (lisp::quote pcl::initialize-info-combined-initargs-form-list) 18) (system::mm (lisp::quote pcl::initialize-info-new-keys) 19) (system::mm (lisp::quote pcl::initialize-info-default-initargs-function) 20) (system::mm (lisp::quote pcl::initialize-info-shared-initialize-t-function) 21) (system::mm (lisp::quote pcl::initialize-info-shared-initialize-nil-function) 22) (system::mm (lisp::quote pcl::initialize-info-constants) 23) (system::mm (lisp::quote pcl::initialize-info-combined-initialize-function) 24) (system::mm (lisp::quote pcl::initialize-info-make-instance-function) 25) (system::mm (lisp::quote pcl::initialize-info-make-instance-function-symbol) 26) (system::*make-special (lisp::quote pcl::*initialize-info-cache-class*)) (lisp::or (lisp::boundp (lisp::quote pcl::*initialize-info-cache-class*)) (lisp::setq pcl::*initialize-info-cache-class* lisp::nil)) (system::*make-special (lisp::quote pcl::*initialize-info-cache-initargs*)) (lisp::or (lisp::boundp (lisp::quote pcl::*initialize-info-cache-initargs*)) (lisp::setq pcl::*initialize-info-cache-initargs* lisp::nil)) (system::*make-special (lisp::quote pcl::*initialize-info-cache-info*)) (lisp::or (lisp::boundp (lisp::quote pcl::*initialize-info-cache-info*)) (lisp::setq pcl::*initialize-info-cache-info* lisp::nil)) (system::*make-special (lisp::quote pcl::*revert-initialize-info-p*)) (lisp::or (lisp::boundp (lisp::quote pcl::*revert-initialize-info-p*)) (lisp::setq pcl::*revert-initialize-info-p* lisp::nil)) (system::mfsfun (lisp::quote pcl::reset-initialize-info) 27 1) (system::mfsfun (lisp::quote pcl::reset-class-initialize-info) 28 1) (system::mfsfun (lisp::quote pcl::reset-class-initialize-info-1) 29 1) (system::mfvfun (lisp::quote pcl::initialize-info) 30 1026) (system::mfsfun (lisp::quote pcl::update-initialize-info-internal) 31 2) (system::mfsfun (lisp::quote pcl::get-make-instance-function) 32 1) (system::mfsfun (lisp::quote pcl::get-make-instance-function-internal) 33 5) (system::mfsfun (lisp::quote pcl::complicated-instance-creation-method) 34 1) (system::mfsfun (lisp::quote pcl::find-standard-ii-method) 35 2) (system::mm (lisp::quote pcl::call-initialize-function) 36) (system::mm (lisp::quote pcl::copy-slots) 37) (system::mm (lisp::quote pcl::allocate-standard-instance--macro) 38) (system::putprop (lisp::quote pcl::with-make-instance-function-valid-p-check) (lisp::quote 1) #2=(lisp::quote system::pretty-print-format)) (system::mm (lisp::quote pcl::with-make-instance-function-valid-p-check) 39) (system::mf (lisp::quote pcl::make-instance-function-trap) 40) (system::mfsfun (lisp::quote pcl::make-instance-function-simple) 41 5) (system::mfsfun (lisp::quote pcl::make-instance-function-complex) 42 5) (system::mf (lisp::quote pcl::get-simple-initialization-function) 43) (system::mf (lisp::quote pcl::get-complex-initialization-functions) 44) (system::mfsfun (lisp::quote pcl::add-forms) 45 2) (system::mf (lisp::quote pcl::make-default-initargs-form-list) 46) (system::mf (lisp::quote pcl::make-shared-initialize-form-list) 47) (system::*make-special (lisp::quote pcl::*class-pv-table-table*)) (lisp::or (lisp::boundp (lisp::quote pcl::*class-pv-table-table*)) (lisp::setq pcl::*class-pv-table-table* (lisp::make-hash-table :test (lisp::quote lisp::eq)))) (system::mfsfun (lisp::quote pcl::get-pv-cell-for-class) 48 1) (system::*make-special (lisp::quote pcl::*initialize-instance-simple-alist*)) (lisp::or (lisp::boundp (lisp::quote pcl::*initialize-instance-simple-alist*)) (lisp::setq pcl::*initialize-instance-simple-alist* lisp::nil)) (system::*make-special (lisp::quote pcl::*note-iis-entry-p*)) (lisp::or (lisp::boundp (lisp::quote pcl::*note-iis-entry-p*)) (lisp::setq pcl::*note-iis-entry-p* lisp::nil)) (system::*make-special (lisp::quote pcl::*compiled-initialize-instance-simple-functions*)) (lisp::or (lisp::boundp (lisp::quote pcl::*compiled-initialize-instance-simple-functions*)) (lisp::setq pcl::*compiled-initialize-instance-simple-functions* (lisp::make-hash-table :test (lisp::function lisp::equal)))) (system::mf (lisp::quote pcl::initialize-instance-simple-function) 49) (system::mfsfun (lisp::quote pcl::load-precompiled-iis-entry) 50 4) (system::mm (lisp::quote pcl::precompile-iis-functions) 51) (system::mf (lisp::quote pcl::compile-iis-functions) 52) (system::setvv 171 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::initialize-instance-simple) 53 4) (system::mfsfun (lisp::quote pcl::add-to-cvector) 54 2) (system::*make-special (lisp::quote pcl::*inline-iis-instance-locations-p*)) (lisp::or (lisp::boundp (lisp::quote pcl::*inline-iis-instance-locations-p*)) (lisp::setq pcl::*inline-iis-instance-locations-p* lisp::t)) (system::mfsfun (lisp::quote pcl::first-form-to-lisp) 55 3) (system::putprop (lisp::quote pcl::iis-body) (lisp::quote 0) #2#) (system::mm (lisp::quote pcl::iis-body) 56) (system::mf (lisp::quote pcl::form-list-to-lisp) 57) (system::mfsfun (lisp::quote pcl::get-make-instance-function-symbol) 58 1) (system::debug (lisp::quote pcl::update-make-instance-function-table) (lisp::quote (lisp::class))) (system::debug (lisp::quote pcl::expand-make-instance-form) (lisp::quote (lisp::class pcl::keys pcl::key pcl::sym))) (system::debug (lisp::quote pcl::get-make-instance-functions) (lisp::quote (pcl::key pcl::cell pcl::make-instance-function-keys pcl::mif-key #:g5213))) (system::debug (lisp::quote pcl::make-instance-function-symbol) (lisp::quote (lisp::class lisp::symbolp pcl::class-name pcl::keys pcl::allow-other-keys-p))) (system::debug (lisp::quote pcl::make-instance-1) (lisp::quote (lisp::class pcl::initargs))) (system::debug (lisp::quote pcl::make-initialize-info) (lisp::quote (pcl::key pcl::wrapper pcl::cached-valid-p pcl::cached-ri-valid-p pcl::cached-initargs-form-list pcl::cached-combined-initargs-form-list pcl::cached-new-keys pcl::cached-default-initargs-function pcl::cached-shared-initialize-t-function pcl::cached-shared-initialize-nil-function pcl::cached-constants pcl::cached-combined-initialize-function pcl::cached-make-instance-function pcl::cached-make-instance-function-symbol))) (system::debug (lisp::quote pcl::reset-initialize-info) (lisp::quote (pcl::slot))) (system::debug (lisp::quote pcl::reset-class-initialize-info-1) (lisp::quote (pcl::a))) (system::debug (lisp::quote pcl::initialize-info) (lisp::quote (lisp::class pcl::initargs pcl::plist-p pcl::allow-other-keys-arg))) (system::debug (lisp::quote pcl::update-initialize-info-internal) (lisp::quote (pcl::key lisp::class pcl::keys pcl::allow-other-keys-arg lisp::function lisp::symbol))) (system::debug (lisp::quote pcl::get-make-instance-function) (lisp::quote (lisp::class pcl::keys pcl::initargs pcl::class-and-initargs pcl::make-instance pcl::make-instance-methods pcl::std-mi-meth pcl::class+initargs pcl::default-initargs pcl::default-initargs-methods pcl::proto pcl::initialize-instance-methods pcl::shared-initialize-methods))) (system::debug (lisp::quote pcl::get-make-instance-function-internal) (lisp::quote (pcl::keys pcl::allow-other-keys-p pcl::allocate-instance-methods))) (system::debug (lisp::quote pcl::find-standard-ii-method) (lisp::quote (pcl::m))) (system::debug (lisp::quote pcl::make-instance-function-trap) (lisp::quote (pcl::class-symbol pcl::initargs pcl::info pcl::fn))) (system::debug (lisp::quote pcl::make-instance-function-simple) (lisp::quote (pcl::class-key pcl::class-cell pcl::wrapper pcl::lwrapper pcl::allocate-function pcl::allocate-macro pcl::std-si-meth pcl::shared-initfns pcl::std-ii-meth pcl::initialize-initfns pcl::initialize-function pcl::constants))) (system::debug (lisp::quote pcl::make-instance-function-complex) (lisp::quote (lisp::class pcl::initargs-function pcl::initialize-function pcl::class-key pcl::class-cell pcl::wrapper pcl::shared-initialize pcl::initialize-instance))) (system::debug (lisp::quote pcl::get-simple-initialization-function) (lisp::quote (lisp::class pcl::keys pcl::allow-other-keys-arg))) (system::debug (lisp::quote pcl::get-complex-initialization-functions) (lisp::quote (lisp::class pcl::keys pcl::allow-other-keys-arg pcl::separate-p pcl::info pcl::default-initargs-function))) (system::debug (lisp::quote pcl::add-forms) (lisp::quote (#:g5328))) (system::debug (lisp::quote pcl::make-default-initargs-form-list) (lisp::quote (lisp::class pcl::keys pcl::separate-p pcl::key #:g5334 pcl::slot lisp::function))) (system::debug (lisp::quote pcl::make-shared-initialize-form-list) (lisp::quote (lisp::class pcl::keys pcl::si-slot-names pcl::simple-p pcl::initialize-form-list lisp::type pcl::wrapper pcl::constants pcl::slots pcl::slot-names pcl::slots-key pcl::slots pcl::slot+index #:g5341 pcl::key pcl::pv-offset pcl::initfunction pcl::location pcl::pv-offset pcl::forms))) (system::debug (lisp::quote pcl::get-pv-cell-for-class) (lisp::quote (pcl::slot-names pcl::slot-name-lists pcl::pv-table))) (system::debug (lisp::quote pcl::initialize-instance-simple-function) (lisp::quote (pcl::use pcl::info lisp::class pcl::form-list pcl::pv-cell pcl::key pcl::sf-key #:g5359))) (system::debug (lisp::quote pcl::load-precompiled-iis-entry) (lisp::quote (pcl::use))) (system::debug (lisp::quote pcl::compile-iis-functions) (lisp::quote (pcl::after-p))) (system::debug (lisp::quote pcl::initialize-instance-simple) (lisp::quote (#:g5399))) (system::debug (lisp::quote pcl::first-form-to-lisp) (lisp::quote (pcl::cvector #:g5435 pcl::location pcl::default))) (system::debug (lisp::quote pcl::form-list-to-lisp) (lisp::quote (pcl::pv-cell pcl::form-list pcl::forms pcl::cvector pcl::pv pcl::body pcl::cvector-type))))))
)
