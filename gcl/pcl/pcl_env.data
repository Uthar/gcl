       
#(#! 
(lisp::in-package :pcl)
#(pcl::describe-object #0=(lisp::object lisp::stream) lisp::*standard-output* lisp::describe pcl::definition-before-pcl "~%~S is an instance of class ~S:" "~% The following slots have :INSTANCE allocation:" "~% The following slots have :CLASS allocation:" "~% The following slots have allocation as shown:" "~% ~A ~S ~VT  ~S" "~% ~A~VT  ~S" "~A is a generic function.~%" "Its arguments are:~%  ~S~%" "Its methods are:" "~2%    ~{~S ~}~:S =>~%" pcl::*describe-metaobjects-as-objects-p* pcl::fast-method-call lisp::nil pcl::std-instance pcl::*funcallable-instance-marker* pcl::method-call conditions::case-failure :name conditions::etypecase :datum :expected-type (lisp::or . #1=(pcl::method-call lisp::function)) :possibilities #1# lisp::nil (lisp::or . #2=(pcl::method-call lisp::function)) #2# ((pcl::describe-object lisp::nil (lisp::standard-generic-function lisp::t))) "~&~S is a class, it is an instance of ~S.~%" "Its proper name is ~S.~%" "Its name is ~S, but this is not a proper name.~%" "It has no name (the name is NIL).~%" "The direct superclasses are: ~:S, and the direct~%~
           subclasses are: ~:S.  The class precedence list is:~%~S~%~
           There are ~D methods specialized for this class." lisp::nil (lisp::or . #3=(pcl::method-call lisp::function)) #3# lisp::nil (lisp::or . #4=(pcl::method-call lisp::function)) #4# ((pcl::describe-object lisp::nil (lisp::class lisp::t))) "~&~S is a ~S.~%" "You can also call it~@[ ~{~S~^, ~} or~] ~S.~%" :package-error "Cannot coerce ~S to a package~%" :inherited "It has ~D internal and ~D external symbols (~D total).~%" "It uses the packages ~{~S~^, ~}.~%" "It is used by the packages ~{~S~^, ~}.~%" pcl::traced-method lisp::standard-class (lisp::method) lisp::method :readers :writers :initargs (:method) lisp::function (pcl::method-function) (:function) :initfunction lisp::generic-function (pcl::method-generic-function) ((lisp::setf pcl::method-generic-function)) (:initform lisp::nil) (pcl::method-generic-function) lisp::nil pcl::..slot-unbound.. lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil :method :function pcl::*traced-methods* "~S is not a traced method?" slot-accessor-name::|LISP METHOD slot READER| lisp::untrace lisp::trace pcl::undefmethod-1 lisp::quote pcl::load-defgeneric pcl::describe-package pcl::class-of pcl::slots-to-inspect pcl::slot-definition-name pcl::slot-definition-allocation :instance :class pcl::slot-value-or-default pcl::class-slots pcl::generic-function-pretty-arglist pcl::generic-function-methods pcl::method-qualifiers pcl::unparse-specializers pcl::method-fast-function pcl::method-function pcl::class-name pcl::find-class pcl::class-direct-superclasses pcl::class-direct-subclasses pcl::class-precedence-list pcl::specializer-direct-methods lisp::specific-error system::package-size pcl::false pcl::load-defclass pcl::cclosure-env-nthcdr pcl::%cclosure-env-nthcdr pcl::method-lambda-list pcl::method-specializers pcl::accessor-method-slot-name pcl::parse-method-or-spec pcl::trace-method-internal pcl::make-instance pcl::remove-method pcl::add-method pcl::method-generic-function pcl::%fboundp pcl::no-slot lisp::remove system::structure-subtype-p conditions::error pcl::call-no-next-method (system::%init . #((pcl::proclaim-defgeneric (lisp::quote pcl::describe-object) (lisp::quote #0#)) (system::mf (lisp::quote #5=#:|(DEFGENERIC DESCRIBE-OBJECT)10274|) 0) (#5#) (lisp::function pcl::describe-object) (system::mf (lisp::quote pcl::pcl-describe) 1) (pcl::proclaim-defgeneric (lisp::quote pcl::describe-object) (lisp::quote (lisp::object lisp::stream))) (system::mf (lisp::quote pcl::|(FAST-METHOD DESCRIBE-OBJECT (T T))|) 2) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::describe-object) (lisp::quote lisp::nil) (lisp::quote (lisp::t lisp::t)) (lisp::quote (lisp::object lisp::stream)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD DESCRIBE-OBJECT (T T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::redefine-function (lisp::quote lisp::describe) (lisp::quote pcl::pcl-describe)) (pcl::proclaim-defgeneric (lisp::quote pcl::describe-object) (lisp::quote ((lisp::object pcl::slot-object) lisp::stream))) (system::mf (lisp::quote pcl::|(FAST-METHOD DESCRIBE-OBJECT (SLOT-OBJECT T))|) 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::describe-object) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-object lisp::t)) (lisp::quote (lisp::object lisp::stream)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD DESCRIBE-OBJECT (SLOT-OBJECT T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::slots-to-inspect) (lisp::quote ((lisp::class pcl::slot-class) (lisp::object pcl::slot-object)))) (system::mf (lisp::quote pcl::|(FAST-METHOD SLOTS-TO-INSPECT (SLOT-CLASS SLOT-OBJECT))|) 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slots-to-inspect) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class pcl::slot-object)) (lisp::quote (lisp::class lisp::object)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOTS-TO-INSPECT (SLOT-CLASS SLOT-OBJECT))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (system::*make-special (lisp::quote pcl::*describe-metaobjects-as-objects-p*)) (lisp::or (lisp::boundp (lisp::quote pcl::*describe-metaobjects-as-objects-p*)) (lisp::setq pcl::*describe-metaobjects-as-objects-p* lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::describe-object) (lisp::quote ((pcl::fun lisp::standard-generic-function) lisp::stream))) (system::setvv 17 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 29 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD DESCRIBE-OBJECT (STANDARD-GENERIC-FUNCTION T))|) 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::describe-object) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-generic-function lisp::t)) (lisp::quote (pcl::fun lisp::stream)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD DESCRIBE-OBJECT (STANDARD-GENERIC-FUNCTION T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::describe-object) (lisp::quote ((lisp::class lisp::class) lisp::stream))) (system::setvv 38 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 41 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD DESCRIBE-OBJECT (CLASS T))|) 6) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::describe-object) (lisp::quote lisp::nil) (lisp::quote (lisp::class lisp::t)) (lisp::quote (lisp::class lisp::stream)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD DESCRIBE-OBJECT (CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (system::mfsfun (lisp::quote pcl::describe-package) 7 2) (system::mf (lisp::quote #6=#:|Defclass TRACED-METHOD10451|) 8) (#6#) (pcl::proclaim-defgeneric (lisp::quote pcl::method-lambda-list) (lisp::quote ((pcl::m pcl::traced-method)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (lisp::method)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 70 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 72 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD METHOD-LAMBDA-LIST (TRACED-METHOD))|) 9) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::method-lambda-list) (lisp::quote lisp::nil) (lisp::quote (pcl::traced-method)) (lisp::quote (pcl::m)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD METHOD-LAMBDA-LIST (TRACED-METHOD))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil lisp::method)) :pv-table-symbol #7=#:|pv-table|)))) (lisp::quote #7#)) (pcl::proclaim-defgeneric (lisp::quote pcl::method-specializers) (lisp::quote ((pcl::m pcl::traced-method)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (lisp::method)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 73 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 74 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD METHOD-SPECIALIZERS (TRACED-METHOD))|) 10) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::method-specializers) (lisp::quote lisp::nil) (lisp::quote (pcl::traced-method)) (lisp::quote (pcl::m)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD METHOD-SPECIALIZERS (TRACED-METHOD))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil lisp::method)) :pv-table-symbol #8=#:|pv-table|)))) (lisp::quote #8#)) (pcl::proclaim-defgeneric (lisp::quote pcl::method-qualifiers) (lisp::quote ((pcl::m pcl::traced-method)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (lisp::method)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 75 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 76 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD METHOD-QUALIFIERS (TRACED-METHOD))|) 11) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::method-qualifiers) (lisp::quote lisp::nil) (lisp::quote (pcl::traced-method)) (lisp::quote (pcl::m)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD METHOD-QUALIFIERS (TRACED-METHOD))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil lisp::method)) :pv-table-symbol #9=#:|pv-table|)))) (lisp::quote #9#)) (pcl::proclaim-defgeneric (lisp::quote pcl::accessor-method-slot-name) (lisp::quote ((pcl::m pcl::traced-method)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (lisp::method)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 77 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 78 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD ACCESSOR-METHOD-SLOT-NAME (TRACED-METHOD))|) 12) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::accessor-method-slot-name) (lisp::quote lisp::nil) (lisp::quote (pcl::traced-method)) (lisp::quote (pcl::m)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ACCESSOR-METHOD-SLOT-NAME (TRACED-METHOD))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil lisp::method)) :pv-table-symbol #10=#:|pv-table|)))) (lisp::quote #10#)) (system::*make-special (lisp::quote pcl::*traced-methods*)) (lisp::or (lisp::boundp (lisp::quote pcl::*traced-methods*)) (lisp::setq pcl::*traced-methods* lisp::nil)) (system::mfvfun (lisp::quote pcl::trace-method) 13 16385) (system::mf (lisp::quote pcl::untrace-method) 14) (system::mfsfun (lisp::quote pcl::trace-method-internal) 15 3) (system::mm (lisp::quote pcl::undefmethod) 16) (system::mfsfun (lisp::quote pcl::undefmethod-1) 17 1) (lisp::let* ((#11=#:g10532 :pcl)) (lisp::setq lisp::*features* (lisp::adjoin #11# lisp::*features*))) (lisp::let* ((#12=#:g10533 :portable-commonloops)) (lisp::setq lisp::*features* (lisp::adjoin #12# lisp::*features*))) (lisp::let* ((#13=#:g10534 :pcl-structures)) (lisp::setq lisp::*features* (lisp::adjoin #13# lisp::*features*))) (system::debug (lisp::quote pcl::pcl-describe) (lisp::quote (lisp::object))) (system::debug (lisp::quote pcl::|(FAST-METHOD DESCRIBE-OBJECT (T T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::object lisp::stream))) (system::debug (lisp::quote pcl::|(FAST-METHOD DESCRIBE-OBJECT (SLOT-OBJECT T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::object lisp::stream lisp::class pcl::slotds pcl::max-slot-name-length pcl::slotd pcl::slotd))) (system::debug (lisp::quote pcl::|(FAST-METHOD SLOTS-TO-INSPECT (SLOT-CLASS SLOT-OBJECT))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class))) (system::debug (lisp::quote pcl::|(FAST-METHOD DESCRIBE-OBJECT (STANDARD-GENERIC-FUNCTION T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::fun lisp::stream #:g10385 pcl::meth))) (system::debug (lisp::quote pcl::|(FAST-METHOD DESCRIBE-OBJECT (CLASS T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class lisp::stream))) (system::debug (lisp::quote pcl::describe-package) (lisp::quote (#:g10446 #:g10438))) (system::debug (lisp::quote pcl::|(FAST-METHOD METHOD-LAMBDA-LIST (TRACED-METHOD))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::m))) (system::debug (lisp::quote pcl::|(FAST-METHOD METHOD-SPECIALIZERS (TRACED-METHOD))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::m))) (system::debug (lisp::quote pcl::|(FAST-METHOD METHOD-QUALIFIERS (TRACED-METHOD))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::m))) (system::debug (lisp::quote pcl::|(FAST-METHOD ACCESSOR-METHOD-SLOT-NAME (TRACED-METHOD))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::m))) (system::debug (lisp::quote pcl::trace-method) (lisp::quote (pcl::tfunction pcl::options))) (system::debug (lisp::quote pcl::untrace-method) (lisp::quote (pcl::spec pcl::m))))))
)
