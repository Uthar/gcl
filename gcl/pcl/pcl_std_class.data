       
#(#! 
(lisp::in-package :pcl)
#(lisp::nil pcl::std-instance pcl::*funcallable-instance-marker* pcl::..slot-unbound.. pcl::all lisp::nil lisp::nil pcl::*name->class->slotd-table* :test lisp::eq :size (pcl::reader pcl::writer lisp::boundp) pcl::slot-value-using-class (lisp::setf pcl::slot-value-using-class) pcl::slot-boundp-using-class lisp::nil pcl::*boot-state* pcl::complete pcl::*pv-table-cache-update-info* :instance :documentation pcl::documentation "Can't change the documentation of ~S." lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil pcl::direct-default-initargs pcl::default-initargs pcl::constructors pcl::class-slot-cells lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil lisp::nil pcl::*eql-specializer-methods* pcl::*class-eq-specializer-methods* pcl::*eql-specializer-table* lisp::nil pcl::class-eq lisp::nil lisp::eql :metaclass :direct-superclasses :direct-slots :definition-source pcl::defclass :name pcl::function-returning-nil pcl::*the-class-standard-class* "~S is not a class or a legal class name." pcl::forward-referenced-class :direct-default-initargs :predicate-name lisp::nil pcl::*the-class-standard-object* "The class ~S was specified as a~%super-class of the class ~S;~%~
                    but the meta-classes ~S and~%~S are incompatible.~%
                    Define a method for ~S to avoid this error." pcl::validate-superclass pcl::*slot-unbound* lisp::nil lisp::class pcl::class-eq-specializer :class lisp::nil lisp::structure-object pcl::*the-class-structure-object* "~s structure class ~a" :defstruct-accessor-symbol "~s structure class " "~a constructor" lisp::defstruct :include (:print-function pcl::print-std-instance) (:predicate lisp::nil) :conc-name :constructor "~A~A reader" "~A~A writer" lisp::defun (pcl::obj) lisp::declare lisp::type pcl::obj (pcl::nv pcl::obj) lisp::setf pcl::nv lisp::progn pcl::declare-structure lisp::quote (lisp::nil lisp::nil) pcl::structure-direct-slot-definition pcl::add lisp::remove pcl::r pcl::w slot-accessor-name::|PCL CLASS-PRECEDENCE-LIST slot WRITER| pcl::class-precedence-list pcl::can-precede-list :key slot-accessor-name::|PCL SLOTS slot WRITER| pcl::slots slot-accessor-name::|PCL WRAPPER slot WRITER| pcl::wrapper pcl::*the-class-slot-class* pcl::*the-class-standard-effective-slot-definition* :from-end pcl::standard-direct-slot-definition pcl::fast-method-call lisp::nil pcl::method-call pcl::.next-method-call. (pcl::method-call lisp::function) "No next method." lisp::nil lisp::nil (pcl::method-call lisp::function) pcl::standard-effective-slot-definition pcl::structure-effective-slot-definition lisp::and :initform :initfunction :initargs :allocation :type :internal-reader-function :internal-writer-function lisp::nil (pcl::method-call lisp::function) pcl::standard-reader-method lisp::object "automatically generated reader method" pcl::standard-writer-method pcl::new-value pcl::*the-class-t* "automatically generated writer method" pcl::standard-boundp-method "automatically generated boundp method" :flush lisp::nil :obsolete lisp::nil pcl::*in-obsolete-instance-trap* pcl::*the-wrapper-of-structure-object* "The structure ~S is obsolete." lisp::nil "What kind of instance is this?" lisp::nil lisp::let* ((lisp::class (pcl::class-of pcl::instance)) (pcl::copy (pcl::allocate-instance lisp::class))) lisp::if pcl::std-instance-p pcl::std-instance-slots pcl::fsc-instance-slots pcl::copy lisp::nil "What kind of instance is this?" lisp::nil lisp::nil lisp::nil "Can't change the class of ~S to ~S~@
            because it isn't already an instance with metaclass~%~S." lisp::standard-class "Can't change the class of ~S to ~S~@
            because it isn't already an instance with metaclass~%~S." pcl::funcallable-standard-class "Attempt to initialize or reinitialize a built in class." pcl::dependents pcl::reader pcl::slot-definition-reader-function pcl::writer pcl::slot-definition-writer-function lisp::boundp pcl::slot-definition-boundp-function pcl::|SETF PCL SLOT-DEFINITION-READER-FUNCTION| pcl::|SETF PCL SLOT-DEFINITION-WRITER-FUNCTION| pcl::|SETF PCL SLOT-DEFINITION-BOUNDP-FUNCTION| pcl::cclosure-env-nthcdr pcl::%cclosure-env-nthcdr slot-accessor-name::|PCL ACCESSOR-FLAGS slot READER| slot-accessor-name::|PCL ACCESSOR-FLAGS slot WRITER| slot-accessor-name::|PCL NAME slot READER| slot-accessor-name::|LISP CLASS slot READER| pcl::gdefinition pcl::compute-slot-accessor-info pcl::initialize-internal-slot-gfs pcl::find-slot-definition pcl::slot-accessor-std-p pcl::get-accessor-method-function pcl::get-optimized-std-accessor-method-function system::turbo-closure pcl::|SETF PCL SLOT-ACCESSOR-STD-P| pcl::|SETF PCL SLOT-ACCESSOR-FUNCTION| pcl::get-key-arg1 pcl::|SETF PCL PLIST-VALUE| lisp::documentation pcl::plist-value slot-accessor-name::|PCL DOCUMENTATION slot READER| slot-accessor-name::|PCL DOCUMENTATION slot WRITER| slot-accessor-name::|PCL WRAPPER slot READER| slot-accessor-name::|PCL PROTOTYPE slot READER| pcl::allocate-instance slot-accessor-name::|PCL PROTOTYPE slot WRITER| slot-accessor-name::|PCL DEFSTRUCT-CONSTRUCTOR slot READER| pcl::allocate-standard-instance slot-accessor-name::|PCL DIRECT-SUBCLASSES slot READER| slot-accessor-name::|PCL DIRECT-SUBCLASSES slot WRITER| slot-accessor-name::|PCL DIRECT-METHODS slot READER| pcl::method-generic-function pcl::specializer-object pcl::specializer-method-table pcl::map-all-classes pcl::map-specializers pcl::specializer-class slot-accessor-name::|LISP TYPE slot WRITER| pcl::do-standard-defsetfs-for-defclass pcl::load-truename pcl::ensure-class pcl::ensure-class-using-class pcl::find-class pcl::ensure-class-values pcl::class-prototype pcl::inform-type-system-about-class pcl::make-instance pcl::|SETF PCL FIND-CLASS| pcl::class-of pcl::change-class pcl::reinitialize-instance pcl::forward-referenced-class-p slot-accessor-name::|PCL DIRECT-SUPERCLASSES slot WRITER| slot-accessor-name::|PCL DIRECT-SUPERCLASSES slot READER| pcl::make-direct-slotd slot-accessor-name::|PCL DIRECT-SLOTS slot WRITER| slot-accessor-name::|PCL DIRECT-SLOTS slot READER| pcl::slot-definition-allocation pcl::slot-definition-initfunction pcl::slot-definition-name slot-accessor-name::|PCL PREDICATE-NAME slot WRITER| slot-accessor-name::|PCL PREDICATE-NAME slot READER| pcl::class-name pcl::make-class-predicate-name pcl::add-direct-subclasses pcl::update-class pcl::make-class-predicate pcl::add-slot-accessors pcl::get-key-arg pcl::|MAKE-INSTANCE CLASS-EQ-SPECIALIZER (:CLASS) NIL| slot-accessor-name::|PCL CLASS-EQ-SPECIALIZER slot WRITER| pcl::remove-direct-subclasses pcl::class-direct-superclasses pcl::remove-slot-accessors pcl::class-direct-slots pcl::map-dependents slot-accessor-name::|PCL FROM-DEFCLASS-P slot READER| pcl::structure-type-p pcl::slot-definition-defstruct-accessor-symbol pcl::gboundp slot-accessor-name::|PCL INTERNAL-READER-FUNCTION slot WRITER| slot-accessor-name::|PCL INTERNAL-WRITER-FUNCTION slot WRITER| slot-accessor-name::|PCL DEFSTRUCT-FORM slot WRITER| slot-accessor-name::|PCL DEFSTRUCT-CONSTRUCTOR slot WRITER| pcl::compute-class-precedence-list pcl::compute-slots pcl::make-wrapper pcl::update-pv-table-cache-info pcl::fix-slot-accessors pcl::slot-definition-readers pcl::slot-definition-writers pcl::class-direct-subclasses pcl::add-direct-subclass lisp::set-difference pcl::remove-direct-subclass pcl::class-has-a-forward-referenced-superclass-p lisp::some pcl::class-finalized-p pcl::update-cpl pcl::update-slots pcl::update-gfs-of-class pcl::update-inits pcl::compute-default-initargs pcl::update-make-instance-function-table pcl::force-cache-flushes pcl::%fboundp pcl::no-slot pcl::update-class-can-precede-p pcl::slot-value-normal pcl::set-slot-value-normal pcl::class-can-precede-list pcl::classp lisp::< pcl::slot-definition-location lisp::sort pcl::compute-class-slots pcl::class-wrapper pcl::make-instances-obsolete pcl::slot-boundp-normal pcl::class-direct-default-initargs lisp::car lisp::delete-duplicates pcl::direct-slot-definition-class pcl::compute-effective-slot-definition system::structure-subtype-p pcl::slot-unbound-internal system::typecase-error-string pcl::compute-layout lisp::position pcl::|SETF PCL SLOT-DEFINITION-LOCATION| pcl::initialize-internal-slot-functions slot-accessor-name::|PCL CLASS-PRECEDENCE-LIST slot READER| pcl::compute-effective-slot-definition-initargs pcl::effective-slot-definition-class pcl::slot-definition-initform pcl::slot-definition-initargs pcl::slot-definition-type pcl::*subtypep pcl::slot-definition-internal-reader-function pcl::slot-definition-internal-writer-function pcl::add-method pcl::make-a-method pcl::make-reader-method-function pcl::make-writer-method-function pcl::make-boundp-method-function pcl::get-method pcl::remove-method pcl::make-std-reader-method-function pcl::make-std-writer-method-function pcl::make-std-boundp-method-function pcl::inform-type-system-about-std-class pcl::invalidate-wrapper pcl::set-wrapper pcl::swap-wrappers-and-slots pcl::update-instance-for-redefined-class pcl::update-instance-for-different-class pcl::change-class-internal lisp::delete pcl::update-gf-dfun pcl::specializer-direct-generic-functions pcl::class-slots pcl::ensure-generic-function pcl::add-reader-method pcl::remove-reader-method pcl::add-writer-method pcl::remove-writer-method pcl::update-dependent pcl::legal-class-name-p pcl::intern-eql-specializer (system::%init . #((pcl::proclaim-defgeneric (lisp::quote pcl::slot-accessor-function) (lisp::quote ((pcl::slotd pcl::effective-slot-definition) lisp::type))) (system::mf (lisp::quote pcl::|(FAST-METHOD SLOT-ACCESSOR-FUNCTION (EFFECTIVE-SLOT-DEFINITION T))|) 0) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slot-accessor-function) (lisp::quote lisp::nil) (lisp::quote (pcl::effective-slot-definition lisp::t)) (lisp::quote (pcl::slotd lisp::type)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOT-ACCESSOR-FUNCTION (EFFECTIVE-SLOT-DEFINITION T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote #0=(lisp::setf pcl::slot-accessor-function)) (lisp::quote (lisp::function (pcl::slotd pcl::effective-slot-definition) lisp::type))) (system::mf (lisp::quote pcl::|(FAST-METHOD (SETF SLOT-ACCESSOR-FUNCTION) (T EFFECTIVE-SLOT-DEFINITION T))|) 1) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote #0#) (lisp::quote lisp::nil) (lisp::quote (lisp::t pcl::effective-slot-definition lisp::t)) (lisp::quote (lisp::function pcl::slotd lisp::type)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD (SETF SLOT-ACCESSOR-FUNCTION) (T EFFECTIVE-SLOT-DEFINITION T))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (system::*make-constant (lisp::quote pcl::*slotd-reader-function-std-p*) 1) (system::*make-constant (lisp::quote pcl::*slotd-writer-function-std-p*) 2) (system::*make-constant (lisp::quote pcl::*slotd-boundp-function-std-p*) 4) (system::*make-constant (lisp::quote pcl::*slotd-all-function-std-p*) 7) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-accessor-std-p) (lisp::quote ((pcl::slotd pcl::effective-slot-definition) lisp::type))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::accessor-flags)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 0 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SLOT-ACCESSOR-STD-P (EFFECTIVE-SLOT-DEFINITION T))|) 2 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slot-accessor-std-p) (lisp::quote lisp::nil) (lisp::quote (pcl::effective-slot-definition lisp::t)) (lisp::quote (pcl::slotd lisp::type)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOT-ACCESSOR-STD-P (EFFECTIVE-SLOT-DEFINITION T))|) (lisp::quote (:plist (:arg-info (2) :slot-name-lists ((lisp::nil pcl::accessor-flags) lisp::nil) :pv-table-symbol #1=#:|pv-table|)))) (lisp::quote #1#)) (pcl::proclaim-defgeneric (lisp::quote #2=(lisp::setf pcl::slot-accessor-std-p)) (lisp::quote (pcl::value (pcl::slotd pcl::effective-slot-definition) lisp::type))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::accessor-flags)) (lisp::quote (pcl::accessor-flags)) (lisp::quote lisp::nil)) (system::setvv 5 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD (SETF SLOT-ACCESSOR-STD-P) (T EFFECTIVE-SLOT-DEFINITION T))|) 3 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote #2#) (lisp::quote lisp::nil) (lisp::quote (lisp::t pcl::effective-slot-definition lisp::t)) (lisp::quote (pcl::value pcl::slotd lisp::type)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD (SETF SLOT-ACCESSOR-STD-P) (T EFFECTIVE-SLOT-DEFINITION T))|) (lisp::quote (:plist (:arg-info (3) :slot-name-lists (lisp::nil (lisp::nil pcl::accessor-flags) lisp::nil) :pv-table-symbol #3=#:|pv-table|)))) (lisp::quote #3#)) (pcl::proclaim-defgeneric (lisp::quote pcl::initialize-internal-slot-functions) (lisp::quote ((pcl::slotd pcl::effective-slot-definition)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (lisp::class pcl::name)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 6 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD INITIALIZE-INTERNAL-SLOT-FUNCTIONS (EFFECTIVE-SLOT-DEFINITION))|) 4 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::initialize-internal-slot-functions) (lisp::quote lisp::nil) (lisp::quote (pcl::effective-slot-definition)) (lisp::quote (pcl::slotd)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD INITIALIZE-INTERNAL-SLOT-FUNCTIONS (EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil lisp::class pcl::name)) :pv-table-symbol #4=#:|pv-table|)))) (lisp::quote #4#)) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-slot-accessor-info) (lisp::quote ((pcl::slotd pcl::effective-slot-definition) lisp::type pcl::gf))) (pcl::initialize-internal-slot-gfs* (lisp::quote (lisp::class pcl::name)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 15 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD COMPUTE-SLOT-ACCESSOR-INFO (EFFECTIVE-SLOT-DEFINITION T T))|) 5 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-slot-accessor-info) (lisp::quote lisp::nil) (lisp::quote (pcl::effective-slot-definition lisp::t lisp::t)) (lisp::quote (pcl::slotd lisp::type pcl::gf)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-SLOT-ACCESSOR-INFO (EFFECTIVE-SLOT-DEFINITION T T))|) (lisp::quote (:plist (:arg-info (3) :slot-name-lists ((lisp::nil lisp::class pcl::name) lisp::nil lisp::nil) :pv-table-symbol #5=#:|pv-table|)))) (lisp::quote #5#)) (pcl::proclaim-defgeneric (lisp::quote pcl::slot-definition-allocation) (lisp::quote ((pcl::slotd pcl::structure-slot-definition)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SLOT-DEFINITION-ALLOCATION (STRUCTURE-SLOT-DEFINITION))|) 6 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::slot-definition-allocation) (lisp::quote lisp::nil) (lisp::quote (pcl::structure-slot-definition)) (lisp::quote (pcl::slotd)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SLOT-DEFINITION-ALLOCATION (STRUCTURE-SLOT-DEFINITION))|) (lisp::quote (:plist (:arg-info (1) :constant-value :instance)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((lisp::object pcl::documentation-mixin) pcl::slot-names lisp::&key #6=(pcl::documentation lisp::nil pcl::documentation-p)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (DOCUMENTATION-MIXIN T))|) 7 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:after)) (lisp::quote (pcl::documentation-mixin lisp::t)) (lisp::quote (lisp::object pcl::slot-names lisp::&key #6#)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (DOCUMENTATION-MIXIN T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::documentation) (lisp::quote (lisp::object lisp::&optional pcl::doc-type))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD DOCUMENTATION (T))|) 8 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::documentation) (lisp::quote lisp::nil) (lisp::quote (lisp::t)) (lisp::quote (lisp::object lisp::&optional pcl::doc-type)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD DOCUMENTATION (T))|) (lisp::quote (:plist (:arg-info (1 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote #7=(lisp::setf pcl::documentation)) (lisp::quote (pcl::new-value lisp::object lisp::&optional pcl::doc-type))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD (SETF DOCUMENTATION) (T T))|) 9 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote #7#) (lisp::quote lisp::nil) (lisp::quote (lisp::t lisp::t)) (lisp::quote (pcl::new-value lisp::object lisp::&optional pcl::doc-type)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD (SETF DOCUMENTATION) (T T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::documentation) (lisp::quote ((lisp::object pcl::documentation-mixin) lisp::&optional pcl::doc-type))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD DOCUMENTATION (DOCUMENTATION-MIXIN))|) 10 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::documentation) (lisp::quote lisp::nil) (lisp::quote (pcl::documentation-mixin)) (lisp::quote (lisp::object lisp::&optional pcl::doc-type)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD DOCUMENTATION (DOCUMENTATION-MIXIN))|) (lisp::quote (:plist (:arg-info (1 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote #8=(lisp::setf pcl::documentation)) (lisp::quote (pcl::new-value (lisp::object pcl::documentation-mixin) lisp::&optional pcl::doc-type))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD (SETF DOCUMENTATION) (T DOCUMENTATION-MIXIN))|) 11 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote #8#) (lisp::quote lisp::nil) (lisp::quote (lisp::t pcl::documentation-mixin)) (lisp::quote (pcl::new-value lisp::object lisp::&optional pcl::doc-type)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD (SETF DOCUMENTATION) (T DOCUMENTATION-MIXIN))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::documentation) (lisp::quote ((pcl::slotd pcl::standard-slot-definition) lisp::&optional pcl::doc-type))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::documentation)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 23 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD DOCUMENTATION (STANDARD-SLOT-DEFINITION))|) 12) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::documentation) (lisp::quote lisp::nil) (lisp::quote (pcl::standard-slot-definition)) (lisp::quote (pcl::slotd lisp::&optional pcl::doc-type)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD DOCUMENTATION (STANDARD-SLOT-DEFINITION))|) (lisp::quote (:plist (:arg-info (1 . lisp::t) :slot-name-lists ((lisp::nil pcl::documentation)) :pv-table-symbol #9=#:|pv-table|)))) (lisp::quote #9#)) (pcl::proclaim-defgeneric (lisp::quote #10=(lisp::setf pcl::documentation)) (lisp::quote (pcl::new-value (pcl::slotd pcl::standard-slot-definition) lisp::&optional pcl::doc-type))) (pcl::initialize-internal-slot-gfs* (lisp::quote lisp::nil) (lisp::quote (pcl::documentation)) (lisp::quote lisp::nil)) (system::setvv 24 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD (SETF DOCUMENTATION) (T STANDARD-SLOT-DEFINITION))|) 13) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote #10#) (lisp::quote lisp::nil) (lisp::quote (lisp::t pcl::standard-slot-definition)) (lisp::quote (pcl::new-value pcl::slotd lisp::&optional pcl::doc-type)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD (SETF DOCUMENTATION) (T STANDARD-SLOT-DEFINITION))|) (lisp::quote (:plist (:arg-info (2 . lisp::t) :slot-name-lists (lisp::nil (lisp::nil pcl::documentation)) :pv-table-symbol #11=#:|pv-table|)))) (lisp::quote #11#)) (pcl::proclaim-defgeneric (lisp::quote pcl::class-finalized-p) (lisp::quote ((lisp::class pcl::pcl-class)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::wrapper)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 25 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD CLASS-FINALIZED-P (PCL-CLASS))|) 14 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-finalized-p) (lisp::quote lisp::nil) (lisp::quote (pcl::pcl-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-FINALIZED-P (PCL-CLASS))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil pcl::wrapper)) :pv-table-symbol #12=#:|pv-table|)))) (lisp::quote #12#)) (pcl::proclaim-defgeneric (lisp::quote pcl::class-prototype) (lisp::quote ((lisp::class pcl::std-class)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::prototype)) (lisp::quote (pcl::prototype)) (lisp::quote lisp::nil)) (system::setvv 26 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD CLASS-PROTOTYPE (STD-CLASS))|) 15) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-prototype) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-PROTOTYPE (STD-CLASS))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil pcl::prototype)) :pv-table-symbol #13=#:|pv-table|)))) (lisp::quote #13#)) (pcl::proclaim-defgeneric (lisp::quote pcl::class-prototype) (lisp::quote ((lisp::class lisp::structure-class)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::wrapper pcl::defstruct-constructor pcl::prototype)) (lisp::quote (pcl::prototype)) (lisp::quote lisp::nil)) (system::setvv 27 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD CLASS-PROTOTYPE (STRUCTURE-CLASS))|) 16) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-prototype) (lisp::quote lisp::nil) (lisp::quote (lisp::structure-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-PROTOTYPE (STRUCTURE-CLASS))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil pcl::defstruct-constructor pcl::prototype pcl::wrapper)) :pv-table-symbol #14=#:|pv-table|)))) (lisp::quote #14#)) (pcl::proclaim-defgeneric (lisp::quote pcl::class-direct-default-initargs) (lisp::quote ((lisp::class pcl::slot-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD CLASS-DIRECT-DEFAULT-INITARGS (SLOT-CLASS))|) 17 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-direct-default-initargs) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-DIRECT-DEFAULT-INITARGS (SLOT-CLASS))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::class-default-initargs) (lisp::quote ((lisp::class pcl::slot-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD CLASS-DEFAULT-INITARGS (SLOT-CLASS))|) 18 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-default-initargs) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-DEFAULT-INITARGS (SLOT-CLASS))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::class-constructors) (lisp::quote ((lisp::class pcl::slot-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD CLASS-CONSTRUCTORS (SLOT-CLASS))|) 19 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-constructors) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-CONSTRUCTORS (SLOT-CLASS))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::class-slot-cells) (lisp::quote ((lisp::class pcl::std-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD CLASS-SLOT-CELLS (STD-CLASS))|) 20 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-slot-cells) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-SLOT-CELLS (STD-CLASS))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::add-direct-subclass) (lisp::quote ((lisp::class lisp::class) (pcl::subclass lisp::class)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::direct-subclasses)) (lisp::quote (pcl::direct-subclasses)) (lisp::quote lisp::nil)) (system::setvv 32 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD ADD-DIRECT-SUBCLASS (CLASS CLASS))|) 21 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::add-direct-subclass) (lisp::quote lisp::nil) (lisp::quote (lisp::class lisp::class)) (lisp::quote (lisp::class pcl::subclass)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ADD-DIRECT-SUBCLASS (CLASS CLASS))|) (lisp::quote (:plist (:arg-info (2) :slot-name-lists ((lisp::nil pcl::direct-subclasses) lisp::nil) :pv-table-symbol #15=#:|pv-table|)))) (lisp::quote #15#)) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-direct-subclass) (lisp::quote ((lisp::class lisp::class) (pcl::subclass lisp::class)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::direct-subclasses)) (lisp::quote (pcl::direct-subclasses)) (lisp::quote lisp::nil)) (system::setvv 33 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD REMOVE-DIRECT-SUBCLASS (CLASS CLASS))|) 22 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::remove-direct-subclass) (lisp::quote lisp::nil) (lisp::quote (lisp::class lisp::class)) (lisp::quote (lisp::class pcl::subclass)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD REMOVE-DIRECT-SUBCLASS (CLASS CLASS))|) (lisp::quote (:plist (:arg-info (2) :slot-name-lists ((lisp::nil pcl::direct-subclasses) lisp::nil) :pv-table-symbol #16=#:|pv-table|)))) (lisp::quote #16#)) (pcl::proclaim-defgeneric (lisp::quote pcl::add-direct-method) (lisp::quote ((pcl::specializer lisp::class) (lisp::method lisp::method)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::direct-methods pcl::direct-methods pcl::direct-methods)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 34 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD ADD-DIRECT-METHOD (CLASS METHOD))|) 23 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::add-direct-method) (lisp::quote lisp::nil) (lisp::quote (lisp::class lisp::method)) (lisp::quote (pcl::specializer lisp::method)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ADD-DIRECT-METHOD (CLASS METHOD))|) (lisp::quote (:plist (:arg-info (2) :slot-name-lists ((lisp::nil pcl::direct-methods) lisp::nil) :pv-table-symbol #17=#:|pv-table|)))) (lisp::quote #17#)) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-direct-method) (lisp::quote ((pcl::specializer lisp::class) (lisp::method lisp::method)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::direct-methods pcl::direct-methods pcl::direct-methods)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 35 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD REMOVE-DIRECT-METHOD (CLASS METHOD))|) 24 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::remove-direct-method) (lisp::quote lisp::nil) (lisp::quote (lisp::class lisp::method)) (lisp::quote (pcl::specializer lisp::method)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD REMOVE-DIRECT-METHOD (CLASS METHOD))|) (lisp::quote (:plist (:arg-info (2) :slot-name-lists ((lisp::nil pcl::direct-methods) lisp::nil) :pv-table-symbol #18=#:|pv-table|)))) (lisp::quote #18#)) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-direct-methods) (lisp::quote ((pcl::specializer lisp::class)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::direct-methods)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 36 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SPECIALIZER-DIRECT-METHODS (CLASS))|) 25 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::specializer-direct-methods) (lisp::quote lisp::nil) (lisp::quote (lisp::class)) (lisp::quote (pcl::specializer)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SPECIALIZER-DIRECT-METHODS (CLASS))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil pcl::direct-methods)) :pv-table-symbol #19=#:|pv-table|)))) (lisp::quote #19#)) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-direct-generic-functions) (lisp::quote ((pcl::specializer lisp::class)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::direct-methods pcl::direct-methods pcl::direct-methods)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 37 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SPECIALIZER-DIRECT-GENERIC-FUNCTIONS (CLASS))|) 26 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::specializer-direct-generic-functions) (lisp::quote lisp::nil) (lisp::quote (lisp::class)) (lisp::quote (pcl::specializer)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SPECIALIZER-DIRECT-GENERIC-FUNCTIONS (CLASS))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil pcl::direct-methods)) :pv-table-symbol #20=#:|pv-table|)))) (lisp::quote #20#)) (system::*make-special (lisp::quote pcl::*eql-specializer-methods*)) (lisp::or (lisp::boundp (lisp::quote pcl::*eql-specializer-methods*)) (lisp::setq pcl::*eql-specializer-methods* (lisp::make-hash-table :test (lisp::function lisp::eql)))) (system::*make-special (lisp::quote pcl::*class-eq-specializer-methods*)) (lisp::or (lisp::boundp (lisp::quote pcl::*class-eq-specializer-methods*)) (lisp::setq pcl::*class-eq-specializer-methods* (lisp::make-hash-table :test (lisp::function lisp::eq)))) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-method-table) (lisp::quote ((pcl::specializer pcl::eql-specializer)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SPECIALIZER-METHOD-TABLE (EQL-SPECIALIZER))|) 27 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::specializer-method-table) (lisp::quote lisp::nil) (lisp::quote (pcl::eql-specializer)) (lisp::quote (pcl::specializer)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SPECIALIZER-METHOD-TABLE (EQL-SPECIALIZER))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-method-table) (lisp::quote ((pcl::specializer pcl::class-eq-specializer)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SPECIALIZER-METHOD-TABLE (CLASS-EQ-SPECIALIZER))|) 28 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::specializer-method-table) (lisp::quote lisp::nil) (lisp::quote (pcl::class-eq-specializer)) (lisp::quote (pcl::specializer)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SPECIALIZER-METHOD-TABLE (CLASS-EQ-SPECIALIZER))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::add-direct-method) (lisp::quote ((pcl::specializer pcl::specializer-with-object) (lisp::method lisp::method)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD ADD-DIRECT-METHOD (SPECIALIZER-WITH-OBJECT METHOD))|) 29 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::add-direct-method) (lisp::quote lisp::nil) (lisp::quote (pcl::specializer-with-object lisp::method)) (lisp::quote (pcl::specializer lisp::method)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ADD-DIRECT-METHOD (SPECIALIZER-WITH-OBJECT METHOD))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-direct-method) (lisp::quote ((pcl::specializer pcl::specializer-with-object) (lisp::method lisp::method)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD REMOVE-DIRECT-METHOD (SPECIALIZER-WITH-OBJECT METHOD))|) 30 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::remove-direct-method) (lisp::quote lisp::nil) (lisp::quote (pcl::specializer-with-object lisp::method)) (lisp::quote (pcl::specializer lisp::method)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD REMOVE-DIRECT-METHOD (SPECIALIZER-WITH-OBJECT METHOD))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-direct-methods) (lisp::quote ((pcl::specializer pcl::specializer-with-object)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SPECIALIZER-DIRECT-METHODS (SPECIALIZER-WITH-OBJECT))|) 31 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::specializer-direct-methods) (lisp::quote lisp::nil) (lisp::quote (pcl::specializer-with-object)) (lisp::quote (pcl::specializer)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SPECIALIZER-DIRECT-METHODS (SPECIALIZER-WITH-OBJECT))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::specializer-direct-generic-functions) (lisp::quote ((pcl::specializer pcl::specializer-with-object)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SPECIALIZER-DIRECT-GENERIC-FUNCTIONS (SPECIALIZER-WITH-OBJECT))|) 32 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::specializer-direct-generic-functions) (lisp::quote lisp::nil) (lisp::quote (pcl::specializer-with-object)) (lisp::quote (pcl::specializer)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SPECIALIZER-DIRECT-GENERIC-FUNCTIONS (SPECIALIZER-WITH-OBJECT))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (system::mfsfun (lisp::quote pcl::map-specializers) 33 1) (system::mfsfun (lisp::quote pcl::map-all-generic-functions) 34 1) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((pcl::specl pcl::class-eq-specializer) pcl::slot-names lisp::&key))) (pcl::initialize-internal-slot-gfs* (lisp::quote lisp::nil) (lisp::quote (lisp::type)) (lisp::quote lisp::nil)) (system::setvv 41 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (CLASS-EQ-SPECIALIZER T))|) 35) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:after)) (lisp::quote (pcl::class-eq-specializer lisp::t)) (lisp::quote (pcl::specl pcl::slot-names lisp::&key)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (CLASS-EQ-SPECIALIZER T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t) :slot-name-lists ((lisp::nil lisp::type) lisp::nil) :pv-table-symbol #21=#:|pv-table|)))) (lisp::quote #21#)) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((pcl::specl pcl::eql-specializer) pcl::slot-names lisp::&key))) (pcl::initialize-internal-slot-gfs* (lisp::quote lisp::nil) (lisp::quote (lisp::type)) (lisp::quote lisp::nil)) (system::setvv 43 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (EQL-SPECIALIZER T))|) 36) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:after)) (lisp::quote (pcl::eql-specializer lisp::t)) (lisp::quote (pcl::specl pcl::slot-names lisp::&key)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (EQL-SPECIALIZER T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t) :slot-name-lists ((lisp::nil lisp::type) lisp::nil) :pv-table-symbol #22=#:|pv-table|)))) (lisp::quote #22#)) (system::mfsfun (lisp::quote pcl::real-load-defclass) 37 6) (lisp::let ((#23=#:g6903 (lisp::quote pcl::load-defclass))) (pcl::|SETF PCL GDEFINITION| (lisp::function pcl::real-load-defclass) #23#)) (system::mf (lisp::quote pcl::ensure-class) 38) (pcl::proclaim-defgeneric (lisp::quote pcl::ensure-class-using-class) (lisp::quote (pcl::name (lisp::class lisp::null) lisp::&rest pcl::args lisp::&key))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD ENSURE-CLASS-USING-CLASS (T NULL))|) 39 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::ensure-class-using-class) (lisp::quote lisp::nil) (lisp::quote (lisp::t lisp::null)) (lisp::quote (pcl::name lisp::class lisp::&rest pcl::args lisp::&key)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ENSURE-CLASS-USING-CLASS (T NULL))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::ensure-class-using-class) (lisp::quote (pcl::name (lisp::class pcl::pcl-class) lisp::&rest pcl::args lisp::&key))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD ENSURE-CLASS-USING-CLASS (T PCL-CLASS))|) 40 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::ensure-class-using-class) (lisp::quote lisp::nil) (lisp::quote (lisp::t pcl::pcl-class)) (lisp::quote (pcl::name lisp::class lisp::&rest pcl::args lisp::&key)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ENSURE-CLASS-USING-CLASS (T PCL-CLASS))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::class-predicate-name) (lisp::quote ((lisp::class lisp::t)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD CLASS-PREDICATE-NAME (T))|) 41 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-predicate-name) (lisp::quote lisp::nil) (lisp::quote (lisp::t)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-PREDICATE-NAME (T))|) (lisp::quote (:plist (:arg-info (1) :constant-value pcl::function-returning-nil)))) (lisp::quote lisp::nil)) (system::mf (lisp::quote pcl::ensure-class-values) 42) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((lisp::class pcl::std-class) pcl::slot-names lisp::&key #24=(pcl::direct-superclasses lisp::nil pcl::direct-superclasses-p) #25=(pcl::direct-slots lisp::nil pcl::direct-slots-p) #26=(pcl::direct-default-initargs lisp::nil pcl::direct-default-initargs-p) #27=(pcl::predicate-name lisp::nil pcl::predicate-name-p)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::predicate-name pcl::direct-slots pcl::direct-superclasses)) (lisp::quote (pcl::predicate-name pcl::predicate-name pcl::direct-slots pcl::direct-superclasses)) (lisp::quote lisp::nil)) (system::setvv 57 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STD-CLASS T))|) 43 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:after)) (lisp::quote (pcl::std-class lisp::t)) (lisp::quote (lisp::class pcl::slot-names lisp::&key #24# #25# #26# #27#)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STD-CLASS T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t) :slot-name-lists ((lisp::nil pcl::direct-slots pcl::direct-superclasses pcl::predicate-name) lisp::nil) :pv-table-symbol #28=#:|pv-table|)))) (lisp::quote #28#)) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((lisp::class lisp::class) pcl::slot-names lisp::&key pcl::name))) (pcl::get-make-instance-functions (lisp::quote ((pcl::class-eq-specializer (:class) lisp::nil)))) (pcl::initialize-internal-slot-gfs* (lisp::quote lisp::nil) (lisp::quote (pcl::class-eq-specializer lisp::type)) (lisp::quote lisp::nil)) (system::setvv 62 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mf (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (CLASS T))|) 44) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:before)) (lisp::quote (lisp::class lisp::t)) (lisp::quote (lisp::class pcl::slot-names lisp::&key pcl::name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (CLASS T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t) :slot-name-lists ((lisp::nil lisp::type pcl::class-eq-specializer) lisp::nil) :pv-table-symbol #29=#:|pv-table|)))) (lisp::quote #29#)) (pcl::proclaim-defgeneric (lisp::quote pcl::reinitialize-instance) (lisp::quote ((lisp::class pcl::slot-class) lisp::&key))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD REINITIALIZE-INSTANCE :BEFORE (SLOT-CLASS))|) 45 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::reinitialize-instance) (lisp::quote (:before)) (lisp::quote (pcl::slot-class)) (lisp::quote (lisp::class lisp::&key)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD REINITIALIZE-INSTANCE :BEFORE (SLOT-CLASS))|) (lisp::quote (:plist (:arg-info (1 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::reinitialize-instance) (lisp::quote ((lisp::class pcl::slot-class) lisp::&rest pcl::initargs lisp::&key))) (system::mf (lisp::quote pcl::|(FAST-METHOD REINITIALIZE-INSTANCE :AFTER (SLOT-CLASS))|) 46) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::reinitialize-instance) (lisp::quote (:after)) (lisp::quote (pcl::slot-class)) (lisp::quote (lisp::class lisp::&rest pcl::initargs lisp::&key)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD REINITIALIZE-INSTANCE :AFTER (SLOT-CLASS))|) (lisp::quote (:plist (:arg-info (1 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((lisp::class lisp::structure-class) pcl::slot-names lisp::&key #30=(pcl::direct-superclasses lisp::nil pcl::direct-superclasses-p) #31=(pcl::direct-slots lisp::nil pcl::direct-slots-p) pcl::direct-default-initargs #32=(pcl::predicate-name lisp::nil pcl::predicate-name-p)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::predicate-name pcl::wrapper pcl::direct-superclasses pcl::direct-slots pcl::from-defclass-p pcl::direct-superclasses)) (lisp::quote (pcl::predicate-name pcl::predicate-name pcl::wrapper pcl::slots pcl::class-precedence-list pcl::defstruct-constructor pcl::defstruct-form pcl::internal-writer-function pcl::internal-reader-function pcl::direct-slots pcl::direct-superclasses)) (lisp::quote lisp::nil)) (system::setvv 66 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STRUCTURE-CLASS T))|) 47 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:after)) (lisp::quote (lisp::structure-class lisp::t)) (lisp::quote (lisp::class pcl::slot-names lisp::&key #30# #31# pcl::direct-default-initargs #32#)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STRUCTURE-CLASS T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t) :slot-name-lists ((lisp::nil pcl::class-precedence-list pcl::defstruct-constructor pcl::defstruct-form pcl::direct-slots pcl::direct-superclasses pcl::from-defclass-p pcl::predicate-name pcl::slots pcl::wrapper) lisp::nil) :pv-table-symbol #33=#:|pv-table|)))) (lisp::quote #33#)) (pcl::proclaim-defgeneric (lisp::quote pcl::direct-slot-definition-class) (lisp::quote ((lisp::class lisp::structure-class) pcl::initargs))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD DIRECT-SLOT-DEFINITION-CLASS (STRUCTURE-CLASS T))|) 48 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::direct-slot-definition-class) (lisp::quote lisp::nil) (lisp::quote (lisp::structure-class lisp::t)) (lisp::quote (lisp::class pcl::initargs)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD DIRECT-SLOT-DEFINITION-CLASS (STRUCTURE-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::finalize-inheritance) (lisp::quote ((lisp::class lisp::structure-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD FINALIZE-INHERITANCE (STRUCTURE-CLASS))|) 49 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::finalize-inheritance) (lisp::quote lisp::nil) (lisp::quote (lisp::structure-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD FINALIZE-INHERITANCE (STRUCTURE-CLASS))|) (lisp::quote (:plist (:arg-info (1) :constant-value lisp::nil)))) (lisp::quote lisp::nil)) (system::mfsfun (lisp::quote pcl::add-slot-accessors) 50 2) (system::mfsfun (lisp::quote pcl::remove-slot-accessors) 51 2) (system::mfsfun (lisp::quote pcl::fix-slot-accessors) 52 3) (system::mfsfun (lisp::quote pcl::add-direct-subclasses) 53 2) (system::mfsfun (lisp::quote pcl::remove-direct-subclasses) 54 2) (pcl::proclaim-defgeneric (lisp::quote pcl::finalize-inheritance) (lisp::quote ((lisp::class pcl::std-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD FINALIZE-INHERITANCE (STD-CLASS))|) 55 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::finalize-inheritance) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD FINALIZE-INHERITANCE (STD-CLASS))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (system::mfsfun (lisp::quote pcl::class-has-a-forward-referenced-superclass-p) 56 1) (system::mfsfun (lisp::quote pcl::update-class) 57 2) (system::mfsfun (lisp::quote pcl::update-cpl) 58 2) (system::mfsfun (lisp::quote pcl::update-class-can-precede-p) 59 1) (system::mfsfun (lisp::quote pcl::class-can-precede-p) 60 2) (system::mfsfun (lisp::quote pcl::update-slots) 61 2) (system::mfsfun (lisp::quote pcl::compute-class-slots) 62 1) (system::mfsfun (lisp::quote pcl::compute-layout) 63 2) (system::mfsfun (lisp::quote pcl::update-gfs-of-class) 64 1) (system::mfsfun (lisp::quote pcl::update-inits) 65 2) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-default-initargs) (lisp::quote ((lisp::class pcl::slot-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD COMPUTE-DEFAULT-INITARGS (SLOT-CLASS))|) 66 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-default-initargs) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-DEFAULT-INITARGS (SLOT-CLASS))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::direct-slot-definition-class) (lisp::quote ((lisp::class pcl::std-class) pcl::initargs))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD DIRECT-SLOT-DEFINITION-CLASS (STD-CLASS T))|) 67 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::direct-slot-definition-class) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class lisp::t)) (lisp::quote (lisp::class pcl::initargs)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD DIRECT-SLOT-DEFINITION-CLASS (STD-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (system::mf (lisp::quote pcl::make-direct-slotd) 68) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-slots) (lisp::quote ((lisp::class pcl::std-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD COMPUTE-SLOTS (STD-CLASS))|) 69 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-slots) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-SLOTS (STD-CLASS))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-slots) (lisp::quote ((lisp::class pcl::std-class)))) (system::setvv 111 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD COMPUTE-SLOTS :AROUND (STD-CLASS))|) 70 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-slots) (lisp::quote (:around)) (lisp::quote (pcl::std-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-SLOTS :AROUND (STD-CLASS))|) (lisp::quote (:plist (:arg-info (1) :needs-next-methods-p lisp::t)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-slots) (lisp::quote ((lisp::class lisp::structure-class)))) (pcl::initialize-internal-slot-gfs* (lisp::quote (pcl::class-precedence-list)) (lisp::quote lisp::nil) (lisp::quote lisp::nil)) (system::setvv 116 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD COMPUTE-SLOTS (STRUCTURE-CLASS))|) 71 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-slots) (lisp::quote lisp::nil) (lisp::quote (lisp::structure-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-SLOTS (STRUCTURE-CLASS))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil pcl::class-precedence-list)) :pv-table-symbol #34=#:|pv-table|)))) (lisp::quote #34#)) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-slots) (lisp::quote ((lisp::class lisp::structure-class)))) (system::setvv 117 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD COMPUTE-SLOTS :AROUND (STRUCTURE-CLASS))|) 72 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-slots) (lisp::quote (:around)) (lisp::quote (lisp::structure-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-SLOTS :AROUND (STRUCTURE-CLASS))|) (lisp::quote (:plist (:arg-info (1) :needs-next-methods-p lisp::t)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-effective-slot-definition) (lisp::quote ((lisp::class pcl::slot-class) pcl::dslotds))) (system::mf (lisp::quote pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION (SLOT-CLASS T))|) 73) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-effective-slot-definition) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t)) (lisp::quote (lisp::class pcl::dslotds)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION (SLOT-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::effective-slot-definition-class) (lisp::quote ((lisp::class pcl::std-class) pcl::initargs))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD EFFECTIVE-SLOT-DEFINITION-CLASS (STD-CLASS T))|) 74 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::effective-slot-definition-class) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class lisp::t)) (lisp::quote (lisp::class pcl::initargs)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD EFFECTIVE-SLOT-DEFINITION-CLASS (STD-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::effective-slot-definition-class) (lisp::quote ((lisp::class lisp::structure-class) pcl::initargs))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD EFFECTIVE-SLOT-DEFINITION-CLASS (STRUCTURE-CLASS T))|) 75 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::effective-slot-definition-class) (lisp::quote lisp::nil) (lisp::quote (lisp::structure-class lisp::t)) (lisp::quote (lisp::class pcl::initargs)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD EFFECTIVE-SLOT-DEFINITION-CLASS (STRUCTURE-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-effective-slot-definition-initargs) (lisp::quote ((lisp::class pcl::slot-class) pcl::direct-slotds))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS (SLOT-CLASS T))|) 76 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-effective-slot-definition-initargs) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t)) (lisp::quote (lisp::class pcl::direct-slotds)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS (SLOT-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::compute-effective-slot-definition-initargs) (lisp::quote ((lisp::class lisp::structure-class) pcl::direct-slotds))) (system::setvv 129 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS :AROUND (STRUCTURE-CLASS T))|) 77 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compute-effective-slot-definition-initargs) (lisp::quote (:around)) (lisp::quote (lisp::structure-class lisp::t)) (lisp::quote (lisp::class pcl::direct-slotds)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS :AROUND (STRUCTURE-CLASS T))|) (lisp::quote (:plist (:arg-info (2) :needs-next-methods-p lisp::t)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::reader-method-class) (lisp::quote ((lisp::class pcl::slot-class) pcl::direct-slot lisp::&rest pcl::initargs))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD READER-METHOD-CLASS (SLOT-CLASS T))|) 78 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::reader-method-class) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t)) (lisp::quote (lisp::class pcl::direct-slot lisp::&rest pcl::initargs)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD READER-METHOD-CLASS (SLOT-CLASS T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::add-reader-method) (lisp::quote ((lisp::class pcl::slot-class) lisp::generic-function pcl::slot-name))) (system::mf (lisp::quote pcl::|(FAST-METHOD ADD-READER-METHOD (SLOT-CLASS T T))|) 79) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::add-reader-method) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t lisp::t)) (lisp::quote (lisp::class lisp::generic-function pcl::slot-name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ADD-READER-METHOD (SLOT-CLASS T T))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::writer-method-class) (lisp::quote ((lisp::class pcl::slot-class) pcl::direct-slot lisp::&rest pcl::initargs))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD WRITER-METHOD-CLASS (SLOT-CLASS T))|) 80 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::writer-method-class) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t)) (lisp::quote (lisp::class pcl::direct-slot lisp::&rest pcl::initargs)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD WRITER-METHOD-CLASS (SLOT-CLASS T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::add-writer-method) (lisp::quote ((lisp::class pcl::slot-class) lisp::generic-function pcl::slot-name))) (system::mf (lisp::quote pcl::|(FAST-METHOD ADD-WRITER-METHOD (SLOT-CLASS T T))|) 81) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::add-writer-method) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t lisp::t)) (lisp::quote (lisp::class lisp::generic-function pcl::slot-name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ADD-WRITER-METHOD (SLOT-CLASS T T))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::add-boundp-method) (lisp::quote ((lisp::class pcl::slot-class) lisp::generic-function pcl::slot-name))) (system::mf (lisp::quote pcl::|(FAST-METHOD ADD-BOUNDP-METHOD (SLOT-CLASS T T))|) 82) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::add-boundp-method) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t lisp::t)) (lisp::quote (lisp::class lisp::generic-function pcl::slot-name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ADD-BOUNDP-METHOD (SLOT-CLASS T T))|) (lisp::quote (:plist (:arg-info (3))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-reader-method) (lisp::quote ((lisp::class pcl::slot-class) lisp::generic-function))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD REMOVE-READER-METHOD (SLOT-CLASS T))|) 83 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::remove-reader-method) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t)) (lisp::quote (lisp::class lisp::generic-function)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD REMOVE-READER-METHOD (SLOT-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-writer-method) (lisp::quote ((lisp::class pcl::slot-class) lisp::generic-function))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD REMOVE-WRITER-METHOD (SLOT-CLASS T))|) 84 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::remove-writer-method) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t)) (lisp::quote (lisp::class lisp::generic-function)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD REMOVE-WRITER-METHOD (SLOT-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-boundp-method) (lisp::quote ((lisp::class pcl::slot-class) lisp::generic-function))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD REMOVE-BOUNDP-METHOD (SLOT-CLASS T))|) 85 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::remove-boundp-method) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t)) (lisp::quote (lisp::class lisp::generic-function)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD REMOVE-BOUNDP-METHOD (SLOT-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::make-reader-method-function) (lisp::quote ((lisp::class pcl::slot-class) pcl::slot-name))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD MAKE-READER-METHOD-FUNCTION (SLOT-CLASS T))|) 86 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::make-reader-method-function) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t)) (lisp::quote (lisp::class pcl::slot-name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD MAKE-READER-METHOD-FUNCTION (SLOT-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::make-writer-method-function) (lisp::quote ((lisp::class pcl::slot-class) pcl::slot-name))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD MAKE-WRITER-METHOD-FUNCTION (SLOT-CLASS T))|) 87 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::make-writer-method-function) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t)) (lisp::quote (lisp::class pcl::slot-name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD MAKE-WRITER-METHOD-FUNCTION (SLOT-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::make-boundp-method-function) (lisp::quote ((lisp::class pcl::slot-class) pcl::slot-name))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD MAKE-BOUNDP-METHOD-FUNCTION (SLOT-CLASS T))|) 88 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::make-boundp-method-function) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class lisp::t)) (lisp::quote (lisp::class pcl::slot-name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD MAKE-BOUNDP-METHOD-FUNCTION (SLOT-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::inform-type-system-about-class) (lisp::quote ((lisp::class pcl::std-class) pcl::name))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD INFORM-TYPE-SYSTEM-ABOUT-CLASS (STD-CLASS T))|) 89 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::inform-type-system-about-class) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class lisp::t)) (lisp::quote (lisp::class pcl::name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD INFORM-TYPE-SYSTEM-ABOUT-CLASS (STD-CLASS T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::compatible-meta-class-change-p) (lisp::quote (lisp::class pcl::proto-new-class))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD COMPATIBLE-META-CLASS-CHANGE-P (T T))|) 90 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::compatible-meta-class-change-p) (lisp::quote lisp::nil) (lisp::quote (lisp::t lisp::t)) (lisp::quote (lisp::class pcl::proto-new-class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD COMPATIBLE-META-CLASS-CHANGE-P (T T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::validate-superclass) (lisp::quote ((lisp::class lisp::class) (pcl::new-super lisp::class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD VALIDATE-SUPERCLASS (CLASS CLASS))|) 91 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::validate-superclass) (lisp::quote lisp::nil) (lisp::quote (lisp::class lisp::class)) (lisp::quote (lisp::class pcl::new-super)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD VALIDATE-SUPERCLASS (CLASS CLASS))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (system::mfsfun (lisp::quote pcl::force-cache-flushes) 92 1) (system::mfsfun (lisp::quote pcl::flush-cache-trap) 93 3) (pcl::proclaim-defgeneric (lisp::quote pcl::make-instances-obsolete) (lisp::quote ((lisp::class pcl::std-class)))) (pcl::initialize-internal-slot-gfs* (lisp::quote lisp::nil) (lisp::quote (pcl::wrapper)) (lisp::quote lisp::nil)) (system::setvv 141 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD MAKE-INSTANCES-OBSOLETE (STD-CLASS))|) 94 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::make-instances-obsolete) (lisp::quote lisp::nil) (lisp::quote (pcl::std-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD MAKE-INSTANCES-OBSOLETE (STD-CLASS))|) (lisp::quote (:plist (:arg-info (1) :slot-name-lists ((lisp::nil pcl::wrapper)) :pv-table-symbol #35=#:|pv-table|)))) (lisp::quote #35#)) (pcl::proclaim-defgeneric (lisp::quote pcl::make-instances-obsolete) (lisp::quote ((lisp::class lisp::symbol)))) (system::mf (lisp::quote pcl::|(FAST-METHOD MAKE-INSTANCES-OBSOLETE (SYMBOL))|) 95) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::make-instances-obsolete) (lisp::quote lisp::nil) (lisp::quote (lisp::symbol)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD MAKE-INSTANCES-OBSOLETE (SYMBOL))|) (lisp::quote (:plist (:arg-info (1))))) (lisp::quote lisp::nil)) (system::*make-special (lisp::quote pcl::*in-obsolete-instance-trap*)) (lisp::or (lisp::boundp (lisp::quote pcl::*in-obsolete-instance-trap*)) (lisp::setq pcl::*in-obsolete-instance-trap* lisp::nil)) (system::*make-special (lisp::quote pcl::*the-wrapper-of-structure-object*)) (lisp::or (lisp::boundp (lisp::quote pcl::*the-wrapper-of-structure-object*)) (lisp::setq pcl::*the-wrapper-of-structure-object* (pcl::class-wrapper (pcl::find-class (lisp::quote lisp::structure-object))))) (system::setvv 143 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 147 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 149 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::obsolete-instance-trap) 96 3) (system::mm (lisp::quote pcl::copy-instance-internal) 97) (system::setvv 157 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 159 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::setvv 160 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::change-class-internal) 98 2) (pcl::proclaim-defgeneric (lisp::quote pcl::change-class) (lisp::quote ((pcl::instance lisp::standard-object) (pcl::new-class lisp::standard-class)))) (system::setvv 161 (compiler::name-to-sd (lisp::quote pcl::std-instance))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD CHANGE-CLASS (STANDARD-OBJECT STANDARD-CLASS))|) 99 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::change-class) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-object lisp::standard-class)) (lisp::quote (pcl::instance pcl::new-class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CHANGE-CLASS (STANDARD-OBJECT STANDARD-CLASS))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::change-class) (lisp::quote ((pcl::instance lisp::standard-object) (pcl::new-class pcl::funcallable-standard-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD CHANGE-CLASS (STANDARD-OBJECT FUNCALLABLE-STANDARD-CLASS))|) 100 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::change-class) (lisp::quote lisp::nil) (lisp::quote (lisp::standard-object pcl::funcallable-standard-class)) (lisp::quote (pcl::instance pcl::new-class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CHANGE-CLASS (STANDARD-OBJECT FUNCALLABLE-STANDARD-CLASS))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::change-class) (lisp::quote ((pcl::instance lisp::t) (pcl::new-class-name lisp::symbol)))) (system::mf (lisp::quote pcl::|(FAST-METHOD CHANGE-CLASS (T SYMBOL))|) 101) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::change-class) (lisp::quote lisp::nil) (lisp::quote (lisp::t lisp::symbol)) (lisp::quote (pcl::instance pcl::new-class-name)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CHANGE-CLASS (T SYMBOL))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::shared-initialize) (lisp::quote ((lisp::class lisp::built-in-class) pcl::slot-names lisp::&rest pcl::initargs))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (BUILT-IN-CLASS T))|) 102 5) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::shared-initialize) (lisp::quote (:before)) (lisp::quote (lisp::built-in-class lisp::t)) (lisp::quote (lisp::class pcl::slot-names lisp::&rest pcl::initargs)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (BUILT-IN-CLASS T))|) (lisp::quote (:plist (:arg-info (2 . lisp::t))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::class-direct-slots) (lisp::quote ((lisp::class lisp::built-in-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD CLASS-DIRECT-SLOTS (BUILT-IN-CLASS))|) 103 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-direct-slots) (lisp::quote lisp::nil) (lisp::quote (lisp::built-in-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-DIRECT-SLOTS (BUILT-IN-CLASS))|) (lisp::quote (:plist (:arg-info (1) :constant-value lisp::nil)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::class-slots) (lisp::quote ((lisp::class lisp::built-in-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD CLASS-SLOTS (BUILT-IN-CLASS))|) 104 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-slots) (lisp::quote lisp::nil) (lisp::quote (lisp::built-in-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-SLOTS (BUILT-IN-CLASS))|) (lisp::quote (:plist (:arg-info (1) :constant-value lisp::nil)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::class-direct-default-initargs) (lisp::quote ((lisp::class lisp::built-in-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD CLASS-DIRECT-DEFAULT-INITARGS (BUILT-IN-CLASS))|) 105 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-direct-default-initargs) (lisp::quote lisp::nil) (lisp::quote (lisp::built-in-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-DIRECT-DEFAULT-INITARGS (BUILT-IN-CLASS))|) (lisp::quote (:plist (:arg-info (1) :constant-value lisp::nil)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::class-default-initargs) (lisp::quote ((lisp::class lisp::built-in-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD CLASS-DEFAULT-INITARGS (BUILT-IN-CLASS))|) 106 3) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::class-default-initargs) (lisp::quote lisp::nil) (lisp::quote (lisp::built-in-class)) (lisp::quote (lisp::class)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD CLASS-DEFAULT-INITARGS (BUILT-IN-CLASS))|) (lisp::quote (:plist (:arg-info (1) :constant-value lisp::nil)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::validate-superclass) (lisp::quote ((pcl::c lisp::class) (pcl::s lisp::built-in-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD VALIDATE-SUPERCLASS (CLASS BUILT-IN-CLASS))|) 107 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::validate-superclass) (lisp::quote lisp::nil) (lisp::quote (lisp::class lisp::built-in-class)) (lisp::quote (pcl::c pcl::s)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD VALIDATE-SUPERCLASS (CLASS BUILT-IN-CLASS))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::validate-superclass) (lisp::quote ((pcl::c pcl::slot-class) (pcl::f pcl::forward-referenced-class)))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD VALIDATE-SUPERCLASS (SLOT-CLASS FORWARD-REFERENCED-CLASS))|) 108 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::validate-superclass) (lisp::quote lisp::nil) (lisp::quote (pcl::slot-class pcl::forward-referenced-class)) (lisp::quote (pcl::c pcl::f)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD VALIDATE-SUPERCLASS (SLOT-CLASS FORWARD-REFERENCED-CLASS))|) (lisp::quote (:plist (:arg-info (2) :constant-value lisp::t)))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::add-dependent) (lisp::quote ((pcl::metaobject pcl::dependent-update-mixin) pcl::dependent))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD ADD-DEPENDENT (DEPENDENT-UPDATE-MIXIN T))|) 109 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::add-dependent) (lisp::quote lisp::nil) (lisp::quote (pcl::dependent-update-mixin lisp::t)) (lisp::quote (pcl::metaobject pcl::dependent)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD ADD-DEPENDENT (DEPENDENT-UPDATE-MIXIN T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::remove-dependent) (lisp::quote ((pcl::metaobject pcl::dependent-update-mixin) pcl::dependent))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD REMOVE-DEPENDENT (DEPENDENT-UPDATE-MIXIN T))|) 110 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::remove-dependent) (lisp::quote lisp::nil) (lisp::quote (pcl::dependent-update-mixin lisp::t)) (lisp::quote (pcl::metaobject pcl::dependent)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD REMOVE-DEPENDENT (DEPENDENT-UPDATE-MIXIN T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (pcl::proclaim-defgeneric (lisp::quote pcl::map-dependents) (lisp::quote ((pcl::metaobject pcl::dependent-update-mixin) lisp::function))) (system::mfsfun (lisp::quote pcl::|(FAST-METHOD MAP-DEPENDENTS (DEPENDENT-UPDATE-MIXIN T))|) 111 4) (pcl::load-defmethod (lisp::quote lisp::standard-method) (lisp::quote pcl::map-dependents) (lisp::quote lisp::nil) (lisp::quote (pcl::dependent-update-mixin lisp::t)) (lisp::quote (pcl::metaobject lisp::function)) (lisp::list* :fast-function (lisp::function pcl::|(FAST-METHOD MAP-DEPENDENTS (DEPENDENT-UPDATE-MIXIN T))|) (lisp::quote (:plist (:arg-info (2))))) (lisp::quote lisp::nil)) (system::debug (lisp::quote pcl::|(FAST-METHOD SLOT-ACCESSOR-FUNCTION (EFFECTIVE-SLOT-DEFINITION T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::slotd lisp::type))) (system::debug (lisp::quote pcl::|(FAST-METHOD (SETF SLOT-ACCESSOR-FUNCTION) (T EFFECTIVE-SLOT-DEFINITION T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::function pcl::slotd lisp::type))) (system::debug (lisp::quote pcl::|(FAST-METHOD INITIALIZE-INTERNAL-SLOT-FUNCTIONS (EFFECTIVE-SLOT-DEFINITION))|) (lisp::quote (pcl::name lisp::class #:g6380 pcl::gf-name pcl::gf))) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-SLOT-ACCESSOR-INFO (EFFECTIVE-SLOT-DEFINITION T T))|) (lisp::quote (pcl::name lisp::class pcl::old-slotd pcl::old-std-p #:g6412))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (DOCUMENTATION-MIXIN T))|) (lisp::quote (pcl::.key. pcl::documentation))) (system::debug (lisp::quote pcl::|(FAST-METHOD DOCUMENTATION (T))|) (lisp::quote (pcl::doc-type))) (system::debug (lisp::quote pcl::|(FAST-METHOD DOCUMENTATION (STANDARD-SLOT-DEFINITION))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::slotd pcl::.rest-arg.))) (system::debug (lisp::quote pcl::|(FAST-METHOD (SETF DOCUMENTATION) (T STANDARD-SLOT-DEFINITION))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::new-value pcl::slotd pcl::.rest-arg.))) (system::debug (lisp::quote pcl::|(FAST-METHOD CLASS-PROTOTYPE (STD-CLASS))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class))) (system::debug (lisp::quote pcl::|(FAST-METHOD CLASS-PROTOTYPE (STRUCTURE-CLASS))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class))) (system::debug (lisp::quote pcl::|(FAST-METHOD ADD-DIRECT-METHOD (CLASS METHOD))|) (lisp::quote (#:g6656 #:g6657))) (system::debug (lisp::quote pcl::|(FAST-METHOD REMOVE-DIRECT-METHOD (CLASS METHOD))|) (lisp::quote (#:g6682 #:g6683))) (system::debug (lisp::quote pcl::|(FAST-METHOD SPECIALIZER-DIRECT-GENERIC-FUNCTIONS (CLASS))|) (lisp::quote (#:g6725 #:g6726 #:g6732 pcl::m))) (system::debug (lisp::quote pcl::|(FAST-METHOD ADD-DIRECT-METHOD (SPECIALIZER-WITH-OBJECT METHOD))|) (lisp::quote (lisp::object pcl::table pcl::entry #:g6796))) (system::debug (lisp::quote pcl::|(FAST-METHOD REMOVE-DIRECT-METHOD (SPECIALIZER-WITH-OBJECT METHOD))|) (lisp::quote (lisp::object pcl::entry #:g6815))) (system::debug (lisp::quote pcl::|(FAST-METHOD SPECIALIZER-DIRECT-GENERIC-FUNCTIONS (SPECIALIZER-WITH-OBJECT))|) (lisp::quote (lisp::object pcl::entry #:g6848 #:g6854 pcl::m))) (system::debug (lisp::quote pcl::map-specializers) (lisp::quote (lisp::function))) (system::debug (lisp::quote pcl::map-all-generic-functions) (lisp::quote (lisp::function pcl::all-generic-functions))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (CLASS-EQ-SPECIALIZER T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::specl lisp::nil pcl::.rest-arg.))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (EQL-SPECIALIZER T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::specl lisp::nil pcl::.rest-arg.))) (system::debug (lisp::quote pcl::ensure-class) (lisp::quote (pcl::name pcl::all))) (system::debug (lisp::quote pcl::ensure-class-values) (lisp::quote (lisp::class pcl::args pcl::initargs pcl::unsupplied pcl::supplied-meta pcl::supplied-supers pcl::supplied-slots pcl::meta))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STD-CLASS T))|) (lisp::quote (pcl::.key. pcl::direct-superclasses pcl::.key. pcl::direct-slots pcl::.key. pcl::direct-default-initargs pcl::.key. pcl::predicate-name pcl::superclass))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :BEFORE (CLASS T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class lisp::nil pcl::.rest-arg.))) (system::debug (lisp::quote pcl::|(FAST-METHOD REINITIALIZE-INSTANCE :AFTER (SLOT-CLASS))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class pcl::.rest-arg. pcl::initargs))) (system::debug (lisp::quote pcl::|(FAST-METHOD SHARED-INITIALIZE :AFTER (STRUCTURE-CLASS T))|) (lisp::quote (pcl::.key. pcl::direct-superclasses pcl::.key. pcl::direct-slots lisp::nil pcl::.key. pcl::predicate-name pcl::name pcl::from-defclass-p pcl::defstruct-p pcl::include pcl::slot-name pcl::acc-name pcl::accessor pcl::reader-names pcl::writer-names pcl::readers-init pcl::writers-init pcl::defstruct-form pcl::reader pcl::writer))) (system::debug (lisp::quote pcl::fix-slot-accessors) (lisp::quote (pcl::add/remove lisp::class pcl::dslotd #:g7161 pcl::r))) (system::debug (lisp::quote pcl::add-direct-subclasses) (lisp::quote (pcl::n))) (system::debug (lisp::quote pcl::remove-direct-subclasses) (lisp::quote (#:g7172 pcl::o))) (system::debug (lisp::quote pcl::update-class) (lisp::quote (#:g7184 pcl::sub))) (system::debug (lisp::quote pcl::update-class-can-precede-p) (lisp::quote (#:g7188 pcl::c #:g7197))) (system::debug (lisp::quote pcl::update-slots) (lisp::quote (pcl::eslotd pcl::nslots pcl::nwrapper-class-slots pcl::owrapper pcl::olayout pcl::owrapper-class-slots pcl::nwrapper))) (system::debug (lisp::quote pcl::compute-class-slots) (lisp::quote (pcl::eslotd))) (system::debug (lisp::quote pcl::compute-layout) (lisp::quote (pcl::names pcl::order pcl::eslotd))) (system::debug (lisp::quote pcl::update-gfs-of-class) (lisp::quote (lisp::class pcl::gf-table))) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-DEFAULT-INITARGS (SLOT-CLASS))|) (lisp::quote (lisp::class pcl::direct))) (system::debug (lisp::quote pcl::make-direct-slotd) (lisp::quote (lisp::class pcl::initargs))) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-SLOTS (STD-CLASS))|) (lisp::quote (#:g7316 pcl::c pcl::d pcl::name pcl::entry #:g7324))) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-SLOTS :AROUND (STD-CLASS))|) (lisp::quote (pcl::.slots. pcl::value))) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-SLOTS :AROUND (STRUCTURE-CLASS))|) (lisp::quote (pcl::.slots. pcl::value))) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION (SLOT-CLASS T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class pcl::dslotds pcl::initargs lisp::class))) (system::debug (lisp::quote pcl::|(FAST-METHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS (SLOT-CLASS T))|) (lisp::quote (pcl::slotd))) (system::debug (lisp::quote pcl::|(FAST-METHOD ADD-READER-METHOD (SLOT-CLASS T T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class lisp::generic-function pcl::slot-name))) (system::debug (lisp::quote pcl::|(FAST-METHOD ADD-WRITER-METHOD (SLOT-CLASS T T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class lisp::generic-function pcl::slot-name))) (system::debug (lisp::quote pcl::|(FAST-METHOD ADD-BOUNDP-METHOD (SLOT-CLASS T T))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class lisp::generic-function pcl::slot-name))) (system::debug (lisp::quote pcl::force-cache-flushes) (lisp::quote (pcl::owrapper pcl::state))) (system::debug (lisp::quote pcl::|(FAST-METHOD MAKE-INSTANCES-OBSOLETE (STD-CLASS))|) (lisp::quote (pcl::owrapper pcl::nwrapper))) (system::debug (lisp::quote pcl::|(FAST-METHOD MAKE-INSTANCES-OBSOLETE (SYMBOL))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. lisp::class))) (system::debug (lisp::quote pcl::obsolete-instance-trap) (lisp::quote (lisp::class pcl::copy pcl::olayout pcl::nlayout pcl::oslots pcl::nslots pcl::oclass-slots pcl::npos #:g7632))) (system::debug (lisp::quote pcl::change-class-internal) (lisp::quote (pcl::old-class pcl::copy pcl::new-wrapper pcl::old-wrapper pcl::old-layout pcl::new-layout pcl::old-slots pcl::new-slots pcl::old-class-slots pcl::old-position))) (system::debug (lisp::quote pcl::|(FAST-METHOD CHANGE-CLASS (T SYMBOL))|) (lisp::quote (pcl::.pv-cell. pcl::.next-method-call. pcl::instance pcl::new-class-name))) (system::debug (lisp::quote pcl::|(FAST-METHOD ADD-DEPENDENT (DEPENDENT-UPDATE-MIXIN T))|) (lisp::quote (#:g7778))) (system::debug (lisp::quote pcl::|(FAST-METHOD MAP-DEPENDENTS (DEPENDENT-UPDATE-MIXIN T))|) (lisp::quote (#:g7814 pcl::dependent))))))
)
