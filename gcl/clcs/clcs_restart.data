       
#(#! 
(lisp::in-package "CONDITIONS")
#(conditions::*unique-id-table* conditions::*unique-id-count* lisp::&rest "&REST keyword is ~:[missing~;misplaced~]." "KEYWORD" lisp::multiple-value-bind conditions::parse-keyword-pairs lisp::quote lisp::let lisp::getf conditions::*restart-clusters* conditions::*condition-restarts* conditions::restart lisp::cons lisp::append lisp::cdr lisp::assoc lisp::*print-escape* "#<~S.~D>" conditions::restart- ((conditions::name lisp::nil lisp::t lisp::nil 0) (lisp::function lisp::nil lisp::t lisp::nil 1) (conditions::report-function lisp::nil lisp::t lisp::nil 2) (conditions::interactive-function lisp::nil lisp::t lisp::nil 3) (conditions::test-function (lisp::function (lisp::lambda (lisp::cond) (lisp::declare (lisp::ignore lisp::cond)) lisp::t)) lisp::t lisp::nil 4)) conditions::copy-restart conditions::restart-print (conditions::make-restart) conditions::restart-p conditions::*kcl-top-restarts* :name conditions::abort1 :function :report-function system::*quit-tag* system::*break-level* system::*quit-tags* :key (:not-found) :not-found "Return to ? level." "Return to top level." "Return to break level ~D." :interactive-function "~S" "~S" lisp::list conditions::make-restart :control-error "Restart ~S is not active." "Restart ~S is not active." lisp::progn "Malformed Once-Only binding spec: ~S." (lisp::gensym "OO-") (lisp::quote lisp::let) conditions::cerror (conditions::signal conditions::error conditions::cerror conditions::warn) conditions::coerce-to-condition lisp::simple-warning lisp::simple-condition conditions::simple-error "OO-" conditions::with-condition-restarts conditions::find-restart (:report :interactive :test) :report :interactive :test lisp::block lisp::tagbody conditions::restart-bind lisp::function lisp::lambda (lisp::&rest conditions::temp) lisp::setq conditions::temp lisp::go lisp::return-from lisp::apply (lisp::stream) lisp::write-string lisp::stream :test-function (:report :interactive :test) conditions::restart-case (lisp::stream) lisp::format (lisp::values lisp::nil lisp::t) conditions::abort conditions::abort-failure conditions::muffle-warning lisp::defun (lisp::&optional lisp::condition) lisp::if lisp::condition conditions::invoke-restart conditions::continue conditions::store-value conditions::use-value system::*make-special conditions::error conditions::kcl-top-restarts conditions::unique-id conditions::restart-report system::define-structure lisp::nil conditions::make-kcl-top-restart conditions::find-kcl-top-restart conditions::compute-restarts lisp::specific-error conditions::warn conditions::signal conditions::munge-restart-case-expression lisp::find (system::%init . #((system::setvv 101 (system::mc lisp::nil 43)) (system::mfsfun (lisp::quote #0=#:|progn 'compile2194|) 0 0) (#0#) (system::mfsfun (lisp::quote #1=#:|progn 'compile2206|) 1 0) (#1#) (system::mfsfun (lisp::quote #2=#:|progn 'compile2219|) 2 0) (#2#) (system::mfsfun (lisp::quote #3=#:|progn 'compile2235|) 3 0) (#3#) (system::mfsfun (lisp::quote #4=#:|progn 'compile2247|) 4 0) (#4#) (system::mfsfun (lisp::quote #5=#:|progn 'compile2260|) 5 0) (#5#) (system::putprop (lisp::quote conditions::unique-id) "Generates a unique integer ID for its argument." #6=(lisp::quote system::function-documentation)) (system::mfsfun (lisp::quote conditions::unique-id) 6 1) (system::mf (lisp::quote conditions::parse-keyword-pairs) 7) (system::putprop (lisp::quote conditions::with-keyword-pairs) (lisp::quote 1) #7=(lisp::quote system::pretty-print-format)) (system::mm (lisp::quote conditions::with-keyword-pairs) 8) (system::mfsfun (lisp::quote #8=#:|progn 'compile2361|) 9 0) (#8#) (system::mfsfun (lisp::quote #9=#:|progn 'compile2373|) 10 0) (#9#) (system::mfsfun (lisp::quote #10=#:|progn 'compile2386|) 11 0) (#10#) (system::mfsfun (lisp::quote #11=#:|progn 'compile2402|) 12 0) (#11#) (system::mfsfun (lisp::quote #12=#:|progn 'compile2414|) 13 0) (#12#) (system::mfsfun (lisp::quote #13=#:|progn 'compile2427|) 14 0) (#13#) (system::mfvfun (lisp::quote conditions::compute-restarts) 15 256) (system::putprop (lisp::quote conditions::with-condition-restarts) "WITH-CONDITION-RESTARTS Condition-Form Restarts-Form Form*
   Evaluates the Forms in a dynamic environment where the restarts in the list
   Restarts-Form are associated with the condition returned by Condition-Form.
   This allows FIND-RESTART, etc., to recognize restarts that are not related
   to the error currently being debugged.  See also RESTART-CASE." #14=(lisp::quote system::function-documentation)) (system::putprop (lisp::quote conditions::with-condition-restarts) (lisp::quote 2) #7#) (system::mm (lisp::quote conditions::with-condition-restarts) 16) (system::mf (lisp::quote conditions::restart-print) 17) (system::mfsfun (lisp::quote #15=#:|progn 'compile2578|) 18 0) (#15#) (system::mfvfun-key (lisp::quote conditions::make-restart) 19 16384 20) (system::mfsfun (lisp::quote #16=#:|progn 'compile2606|) 21 0) (#16#) (system::mfsfun (lisp::quote #17=#:|progn 'compile2622|) 22 0) (#17#) (system::mfsfun (lisp::quote #18=#:|progn 'compile2634|) 23 0) (#18#) (system::mfsfun (lisp::quote #19=#:|progn 'compile2647|) 24 0) (#19#) (system::mfsfun (lisp::quote conditions::make-kcl-top-restart) 25 1) (system::mfsfun (lisp::quote conditions::find-kcl-top-restart) 26 1) (system::mfsfun (lisp::quote conditions::kcl-top-restarts) 27 0) (system::mf (lisp::quote conditions::restart-report) 28) (system::putprop (lisp::quote conditions::restart-bind) (lisp::quote 1) #7#) (system::mm (lisp::quote conditions::restart-bind) 29) (system::mfvfun (lisp::quote conditions::find-restart) 30 513) (system::mf (lisp::quote conditions::invoke-restart) 31) (system::mf (lisp::quote conditions::invoke-restart-interactively) 32) (system::putprop (lisp::quote conditions::once-only) "Once-Only ({(Var Value-Expression)}*) Form*
  Create a Let* which evaluates each Value-Expression, binding a temporary
  variable to the result, and wrapping the Let* around the result of the
  evaluation of Body.  Within the body, each Var is bound to the corresponding
  temporary variable." #14#) (system::putprop (lisp::quote conditions::once-only) (lisp::quote 1) #7#) (system::mm (lisp::quote conditions::once-only) 33) (system::mf (lisp::quote conditions::munge-restart-case-expression) 34) (system::putprop (lisp::quote conditions::restart-case) (lisp::quote 1) #7#) (system::mm (lisp::quote conditions::restart-case) 35) (system::putprop (lisp::quote conditions::with-simple-restart) (lisp::quote 1) #7#) (system::mm (lisp::quote conditions::with-simple-restart) 36) (system::putprop (lisp::quote conditions::abort) "Transfers control to a restart named abort, signalling a control-error if
   none exists." #6#) (system::mf (lisp::quote conditions::abort) 37) (system::putprop (lisp::quote conditions::muffle-warning) "Transfers control to a restart named muffle-warning, signalling a
   control-error if none exists." #6#) (system::mf (lisp::quote conditions::muffle-warning) 38) (system::mm (lisp::quote conditions::define-nil-returning-restart) 39) (system::putprop (lisp::quote conditions::continue) "Transfer control to a restart named continue, returning nil if none exists." #6#) (system::mf (lisp::quote conditions::continue) 40) (system::putprop (lisp::quote conditions::store-value) "Transfer control and value to a restart named store-value, returning nil if
   none exists." #6#) (system::mf (lisp::quote conditions::store-value) 41) (system::putprop (lisp::quote conditions::use-value) "Transfer control and value to a restart named use-value, returning nil if
   none exists." #6#) (system::mf (lisp::quote conditions::use-value) 42) (system::debug (lisp::quote conditions::unique-id) (lisp::quote (#:g2287))) (system::debug (lisp::quote conditions::parse-keyword-pairs) (lisp::quote (lisp::list conditions::keys))) (system::debug (lisp::quote conditions::compute-restarts) (lisp::quote (lisp::condition conditions::restart))) (system::debug (lisp::quote conditions::restart-print) (lisp::quote (conditions::restart lisp::stream))) (system::debug (lisp::quote conditions::make-restart) (lisp::quote (conditions::name lisp::function conditions::report-function conditions::interactive-function conditions::test-function))) (system::debug (lisp::quote conditions::make-kcl-top-restart) (lisp::quote (conditions::quit-tag))) (system::debug (lisp::quote conditions::find-kcl-top-restart) (lisp::quote (#:g2712))) (system::debug (lisp::quote conditions::kcl-top-restarts) (lisp::quote (conditions::old-tags conditions::tags conditions::restarts))) (system::debug (lisp::quote conditions::restart-report) (lisp::quote (conditions::restart lisp::stream lisp::nil conditions::name))) (system::debug (lisp::quote conditions::find-restart) (lisp::quote (conditions::restart lisp::condition))) (system::debug (lisp::quote conditions::invoke-restart) (lisp::quote (conditions::restart lisp::values))) (system::debug (lisp::quote conditions::invoke-restart-interactively) (lisp::quote (conditions::restart))) (system::debug (lisp::quote conditions::munge-restart-case-expression) (lisp::quote (conditions::expression conditions::data conditions::name conditions::args))) (system::debug (lisp::quote conditions::abort) (lisp::quote (lisp::condition))) (system::debug (lisp::quote conditions::muffle-warning) (lisp::quote (lisp::condition))) (system::debug (lisp::quote conditions::continue) (lisp::quote (lisp::condition))) (system::debug (lisp::quote conditions::store-value) (lisp::quote (conditions::value lisp::condition))) (system::debug (lisp::quote conditions::use-value) (lisp::quote (conditions::value lisp::condition))))))
)
